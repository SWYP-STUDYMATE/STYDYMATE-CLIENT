[{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/.lighthouserc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/docs/04-api/improved-api-client.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/auth.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/fixtures/auth.fixture.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/level-test.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/login-ui.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/pages/LevelTestPage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/pages/LoginPage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/pages/MainPage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/qa-checklist.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/smoke-mobile.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/e2e/tdd-agreement.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/playwright.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/public/audioProcessor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/public/sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/App.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/achievement.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/analytics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/chat.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/groupSession.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/groupSessionAI.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/levelTest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/matching.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/notifications.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/onboard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/onboarding.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/profile.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/session.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/settings.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/user.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/api/webrtc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/AIFeedback.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/AchievementBadges.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/AnalyticsDashboard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/AudioRecorder.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/AudioUpload.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/BottomNav.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/Calendar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ChatImageUpload.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/CommonButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/CommonChecklist.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/CompleteOnboarding.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/CountdownTimer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/DashboardLayout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ErrorBoundary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ErrorToast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/FileManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/FilterPanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/GreetingCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/HashtagList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/Header.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/LLMTest.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/LanguageExchangeMates.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/LanguageProfile.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/Layout.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/LazyImage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/LiveTranscription.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/LogoutButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/MainHeader.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/MatchingProfileCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/NotificationBadge.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/NotificationTestPanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/NotificationToast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/NotificationToastManager.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/OnboardingProtectedRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/OptimizedImage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ProfileCard.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ProfileDetailModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ProfileEditor.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ProfileImageUpload.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ProfileSearch.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/PrograssBar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ProtectedRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/RadarChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/RealtimeSubtitlePanel.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/RealtimeSubtitles.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/SelectStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ServerStatusIndicator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/SessionScheduleList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/Sidebar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/StudyStats.jsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadStatsData'. Either include it or remove the dependency array.","line":21,"column":6,"nodeType":"ArrayExpression","endLine":21,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [data, loadStatsData]","fix":{"range":[682,688],"text":"[data, loadStatsData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/SubtitleDisplay.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/SubtitleOverlay.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ThemeToggle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/Toast.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/TranslatedSubtitles.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'latestLocalTranslation' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":73,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"latestLocalTranslation"},"fix":{"range":[2427,2474],"text":""},"desc":"Remove unused variable 'latestLocalTranslation'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'latestRemoteTranslation' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":82,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"latestRemoteTranslation"},"fix":{"range":[2630,2678],"text":""},"desc":"Remove unused variable 'latestRemoteTranslation'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Languages, Loader2, ChevronDown } from 'lucide-react';\nimport { useRealtimeTranscription } from '../hooks/useRealtimeTranscription';\nimport { useRealtimeTranslation, useTranslation as useTextTranslation } from '../hooks/useTranslation';\nimport { DualSubtitleOverlay } from './SubtitleOverlay';\n\nconst SUPPORTED_LANGUAGES = [\n  { code: 'ko', name: '한국어', flag: '🇰🇷' },\n  { code: 'en', name: 'English', flag: '🇺🇸' },\n  { code: 'ja', name: '日本語', flag: '🇯🇵' },\n  { code: 'zh', name: '中文', flag: '🇨🇳' },\n  { code: 'es', name: 'Español', flag: '🇪🇸' },\n  { code: 'fr', name: 'Français', flag: '🇫🇷' },\n  { code: 'de', name: 'Deutsch', flag: '🇩🇪' },\n  { code: 'ru', name: 'Русский', flag: '🇷🇺' },\n  { code: 'ar', name: 'العربية', flag: '🇸🇦' },\n  { code: 'hi', name: 'हिन्दी', flag: '🇮🇳' },\n  { code: 'pt', name: 'Português', flag: '🇵🇹' },\n  { code: 'vi', name: 'Tiếng Việt', flag: '🇻🇳' }\n];\n\nexport default function TranslatedSubtitles({\n  localStream,\n  remoteStream,\n  sourceLanguage = 'auto',\n  defaultTargetLanguage = 'ko',\n  showOriginal = true,\n  showTranslation = true,\n  className = ''\n}) {\n  const [targetLanguage, setTargetLanguage] = useState(defaultTargetLanguage);\n  const [showLanguageMenu, setShowLanguageMenu] = useState(false);\n  const [localSubtitle, setLocalSubtitle] = useState(null);\n  const [remoteSubtitle, setRemoteSubtitle] = useState(null);\n  const [translatedLocalSubtitle, setTranslatedLocalSubtitle] = useState(null);\n  const [translatedRemoteSubtitle, setTranslatedRemoteSubtitle] = useState(null);\n\n  // 로컬 스트림 전사\n  const {\n    isTranscribing: isLocalTranscribing,\n    toggleTranscription: toggleLocalTranscription,\n    error: localError\n  } = useRealtimeTranscription({\n    language: sourceLanguage,\n    onTranscript: (transcript) => {\n      setLocalSubtitle({\n        text: transcript.text,\n        speaker: 'local',\n        language: transcript.language\n      });\n    }\n  });\n\n  // 리모트 스트림 전사\n  const {\n    isTranscribing: isRemoteTranscribing,\n    toggleTranscription: toggleRemoteTranscription,\n    error: remoteError\n  } = useRealtimeTranscription({\n    language: sourceLanguage,\n    onTranscript: (transcript) => {\n      setRemoteSubtitle({\n        text: transcript.text,\n        speaker: 'remote',\n        language: transcript.language\n      });\n    }\n  });\n\n  // 실시간 번역\n  const {\n    translateAndStore: translateLocal,\n    latestTranslation: latestLocalTranslation\n  } = useRealtimeTranslation({\n    sourceLanguage,\n    targetLanguage,\n    enabled: showTranslation\n  });\n\n  const {\n    translateAndStore: translateRemote,\n    latestTranslation: latestRemoteTranslation\n  } = useRealtimeTranslation({\n    sourceLanguage,\n    targetLanguage,\n    enabled: showTranslation\n  });\n\n  // 로컬 자막 번역\n  useEffect(() => {\n    if (localSubtitle && showTranslation) {\n      translateLocal(localSubtitle).then(translation => {\n        if (translation) {\n          setTranslatedLocalSubtitle({\n            text: translation.translated,\n            speaker: 'local',\n            language: targetLanguage\n          });\n        }\n      });\n    }\n  }, [localSubtitle, showTranslation, translateLocal, targetLanguage]);\n\n  // 리모트 자막 번역\n  useEffect(() => {\n    if (remoteSubtitle && showTranslation) {\n      translateRemote(remoteSubtitle).then(translation => {\n        if (translation) {\n          setTranslatedRemoteSubtitle({\n            text: translation.translated,\n            speaker: 'remote',\n            language: targetLanguage\n          });\n        }\n      });\n    }\n  }, [remoteSubtitle, showTranslation, translateRemote, targetLanguage]);\n\n  // 스트림 변경 시 자동 시작\n  useEffect(() => {\n    if (localStream && !isLocalTranscribing) {\n      toggleLocalTranscription(localStream);\n    }\n  }, [localStream, isLocalTranscribing, toggleLocalTranscription]);\n\n  useEffect(() => {\n    if (remoteStream && !isRemoteTranscribing) {\n      toggleRemoteTranscription(remoteStream);\n    }\n  }, [remoteStream, isRemoteTranscribing, toggleRemoteTranscription]);\n\n  // 표시할 자막 결정\n  const displayLocalSubtitle = showTranslation ? translatedLocalSubtitle : localSubtitle;\n  const displayRemoteSubtitle = showTranslation ? translatedRemoteSubtitle : remoteSubtitle;\n\n  return (\n    <>\n      {/* 언어 선택 UI */}\n      <div className={`fixed top-4 right-4 z-50 ${className}`}>\n        <div className=\"relative\">\n          <button\n            onClick={() => setShowLanguageMenu(!showLanguageMenu)}\n            className=\"flex items-center gap-2 px-4 py-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-shadow\"\n          >\n            <Languages className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">\n              {showTranslation ? '번역 중' : '원본'}\n            </span>\n            <span className=\"text-xs text-gray-500\">\n              {SUPPORTED_LANGUAGES.find(l => l.code === targetLanguage)?.flag}\n            </span>\n            <ChevronDown className=\"w-4 h-4\" />\n          </button>\n\n          {showLanguageMenu && (\n            <div className=\"absolute top-full right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden\">\n              <div className=\"py-1\">\n                <button\n                  onClick={() => {\n                    setShowLanguageMenu(false);\n                  }}\n                  className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 ${!showTranslation ? 'bg-primary-50 dark:bg-primary-900/20' : ''\n                    }`}\n                >\n                  원본 언어로 보기\n                </button>\n                <div className=\"border-t border-gray-200 dark:border-gray-700 my-1\" />\n                {SUPPORTED_LANGUAGES.map(lang => (\n                  <button\n                    key={lang.code}\n                    onClick={() => {\n                      setTargetLanguage(lang.code);\n                      setShowLanguageMenu(false);\n                    }}\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between ${targetLanguage === lang.code && showTranslation ? 'bg-primary-50 dark:bg-primary-900/20' : ''\n                      }`}\n                  >\n                    <span>{lang.name}</span>\n                    <span>{lang.flag}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 자막 오버레이 */}\n      <DualSubtitleOverlay\n        localSubtitle={showOriginal ? localSubtitle : displayLocalSubtitle}\n        remoteSubtitle={showOriginal ? remoteSubtitle : displayRemoteSubtitle}\n        localLabel={showOriginal && showTranslation ? '원본' : '나'}\n        remoteLabel={showOriginal && showTranslation ? '번역' : '상대방'}\n      />\n\n      {/* 번역된 자막 (원본과 함께 표시 시) */}\n      {showOriginal && showTranslation && (\n        <DualSubtitleOverlay\n          localSubtitle={translatedLocalSubtitle}\n          remoteSubtitle={translatedRemoteSubtitle}\n          localLabel=\"번역\"\n          remoteLabel=\"번역\"\n        />\n      )}\n\n      {/* 로딩 인디케이터 */}\n      {(isLocalTranscribing || isRemoteTranscribing) && (\n        <div className=\"fixed top-4 left-4 z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg px-4 py-2 flex items-center gap-2\">\n            <Loader2 className=\"w-4 h-4 animate-spin text-primary-500\" />\n            <span className=\"text-sm\">자막 생성 중...</span>\n          </div>\n        </div>\n      )}\n\n      {/* 에러 메시지 */}\n      {(localError || remoteError) && (\n        <div className=\"fixed bottom-4 left-4 z-50\">\n          <div className=\"bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg px-4 py-2 text-sm\">\n            {localError || remoteError}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n// 간단한 번역 자막 컴포넌트\nexport function SimpleTranslatedSubtitle({\n  subtitle,\n  targetLanguage = 'ko',\n  className = ''\n}) {\n  const [translated, setTranslated] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { translateText } = useTextTranslation({ targetLanguage });\n\n  useEffect(() => {\n    if (subtitle?.text) {\n      setLoading(true);\n      translateText(subtitle.text, { target: targetLanguage })\n        .then(result => {\n          setTranslated(result);\n          setLoading(false);\n        })\n        .catch(() => {\n          setLoading(false);\n        });\n    }\n  }, [subtitle, targetLanguage, translateText]);\n\n  if (!subtitle?.text) return null;\n\n  return (\n    <div className={`fixed bottom-20 left-1/2 transform -translate-x-1/2 z-50 ${className}`}>\n      <div className=\"bg-black/90 backdrop-blur-sm text-white px-6 py-3 rounded-lg shadow-2xl\">\n        <p className=\"text-lg font-medium text-center\">{subtitle.text}</p>\n        {loading ? (\n          <div className=\"flex items-center justify-center mt-2\">\n            <Loader2 className=\"w-4 h-4 animate-spin\" />\n          </div>\n        ) : translated && (\n          <p className=\"text-sm text-gray-300 text-center mt-2\">\n            {translated}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/UserStatusIndicator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/VideoControls.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/VideoControlsExample.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'setParticipantCount' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":16,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"setParticipantCount"},"fix":{"range":[587,608],"text":""},"desc":"Remove unused variable 'setParticipantCount'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport VideoControls from './VideoControls';\n\n/**\n * VideoControls Component Example Usage\n * \n * This example demonstrates how to use the VideoControls component\n * in a video calling application.\n */\nconst VideoControlsExample = () => {\n    // State management for demo\n    const [micEnabled, setMicEnabled] = useState(true);\n    const [cameraEnabled, setCameraEnabled] = useState(true);\n    const [screenSharing, setScreenSharing] = useState(false);\n    const [currentLanguage, setCurrentLanguage] = useState('en');\n    const [participantCount, setParticipantCount] = useState(5);\n    const [unreadMessages, setUnreadMessages] = useState(3);\n    const [handRaised, setHandRaised] = useState(false);\n    const [callEnded, setCallEnded] = useState(false);\n\n    // Event handlers\n    const handleMicToggle = (isOn) => {\n        setMicEnabled(isOn);\n        console.log('Microphone:', isOn ? 'ON' : 'OFF');\n    };\n\n    const handleCameraToggle = (isOn) => {\n        setCameraEnabled(isOn);\n        console.log('Camera:', isOn ? 'ON' : 'OFF');\n    };\n\n    const handleScreenShareToggle = (isSharing) => {\n        setScreenSharing(isSharing);\n        console.log('Screen Share:', isSharing ? 'Started' : 'Stopped');\n    };\n\n    const handleEndCall = () => {\n        setCallEnded(true);\n        console.log('Call ended');\n        // In a real app, you would disconnect from the call here\n    };\n\n    const handleLanguageChange = (langCode) => {\n        setCurrentLanguage(langCode);\n        console.log('Language changed to:', langCode);\n    };\n\n    const handleSettingsClick = () => {\n        console.log('Settings clicked');\n        // Open settings modal/panel\n    };\n\n    const handleParticipantsClick = () => {\n        console.log('Participants panel clicked');\n        // Open participants panel\n    };\n\n    const handleChatClick = () => {\n        console.log('Chat panel clicked');\n        setUnreadMessages(0); // Mark messages as read\n        // Open chat panel\n    };\n\n    const handleRaiseHand = (isRaised) => {\n        setHandRaised(isRaised);\n        console.log('Hand:', isRaised ? 'Raised' : 'Lowered');\n    };\n\n    const handleMoreOptionsClick = (action) => {\n        console.log('More options action:', action);\n        switch (action) {\n            case 'speaker-stats':\n                console.log('Opening speaker stats...');\n                break;\n            case 'mute-all':\n                console.log('Muting all participants...');\n                break;\n            case 'record':\n                console.log('Starting recording...');\n                break;\n            default:\n                break;\n        }\n    };\n\n    if (callEnded) {\n        return (\n            <div className=\"min-h-screen bg-[#0A0A0A] flex items-center justify-center\">\n                <div className=\"text-center text-white\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Call Ended</h2>\n                    <button\n                        onClick={() => setCallEnded(false)}\n                        className=\"px-6 py-3 bg-[#4285F4] hover:bg-[#3374E0] rounded-lg\"\n                    >\n                        Start New Call\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-screen bg-[#0A0A0A] flex flex-col\">\n            {/* Main Content Area - Video Grid */}\n            <div className=\"flex-1 flex items-center justify-center p-8\">\n                <div className=\"grid grid-cols-2 gap-4 max-w-4xl w-full\">\n                    {/* Placeholder for video streams */}\n                    {[...Array(4)].map((_, index) => (\n                        <div\n                            key={index}\n                            className=\"aspect-video bg-[#1A1A1A] rounded-lg flex items-center justify-center\"\n                        >\n                            <div className=\"text-white text-center\">\n                                <div className=\"w-24 h-24 bg-[#2A2A2A] rounded-full mx-auto mb-4\" />\n                                <p className=\"text-sm\">Participant {index + 1}</p>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n\n            {/* Controls at the bottom */}\n            <div className=\"p-4\">\n                <VideoControls\n                    onMicToggle={handleMicToggle}\n                    onCameraToggle={handleCameraToggle}\n                    onEndCall={handleEndCall}\n                    onScreenShareToggle={handleScreenShareToggle}\n                    onLanguageChange={handleLanguageChange}\n                    onSettingsClick={handleSettingsClick}\n                    onParticipantsClick={handleParticipantsClick}\n                    onChatClick={handleChatClick}\n                    onRaiseHand={handleRaiseHand}\n                    onMoreOptionsClick={handleMoreOptionsClick}\n                    initialMicState={micEnabled}\n                    initialCameraState={cameraEnabled}\n                    initialScreenShareState={screenSharing}\n                    currentLanguage={currentLanguage}\n                    participantCount={participantCount}\n                    unreadChatCount={unreadMessages}\n                    isHandRaised={handRaised}\n                    isMobile={window.innerWidth < 768}\n                />\n            </div>\n\n            {/* Demo State Display */}\n            <div className=\"absolute top-4 left-4 bg-[#1A1A1A] p-4 rounded-lg text-white text-sm\">\n                <h3 className=\"font-bold mb-2\">Demo State:</h3>\n                <ul className=\"space-y-1\">\n                    <li>Mic: {micEnabled ? '🟢 ON' : '🔴 OFF'}</li>\n                    <li>Camera: {cameraEnabled ? '🟢 ON' : '🔴 OFF'}</li>\n                    <li>Screen Share: {screenSharing ? '🟢 Active' : '⚪ Inactive'}</li>\n                    <li>Language: {currentLanguage.toUpperCase()}</li>\n                    <li>Participants: {participantCount}</li>\n                    <li>Unread Messages: {unreadMessages}</li>\n                    <li>Hand Raised: {handRaised ? '✋ Yes' : '👋 No'}</li>\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default VideoControlsExample;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/WhisperTest.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'translateAudio' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":12,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"translateAudio"},"fix":{"range":[331,355],"text":""},"desc":"Remove unused variable 'translateAudio'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'audioChunks' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":19,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"audioChunks"},"fix":{"range":[612,623],"text":""},"desc":"Remove unused variable 'audioChunks'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useWhisper, WHISPER_LANGUAGES } from '../hooks/useWhisper';\nimport { Mic, MicOff, Upload, Loader2, Globe, FileAudio } from 'lucide-react';\n\nexport default function WhisperTest() {\n    const {\n        loading,\n        error,\n        transcription,\n        progress,\n        transcribeAudio,\n        translateAudio,\n        reset\n    } = useWhisper();\n\n    const [selectedLanguage, setSelectedLanguage] = useState(WHISPER_LANGUAGES.AUTO);\n    const [isRecording, setIsRecording] = useState(false);\n    const [mediaRecorder, setMediaRecorder] = useState(null);\n    const [audioChunks, setAudioChunks] = useState([]);\n\n    // 파일 업로드 처리\n    const handleFileUpload = async (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        try {\n            await transcribeAudio(file, { language: selectedLanguage });\n        } catch (err) {\n            console.error('Transcription error:', err);\n        }\n    };\n\n    // 녹음 시작\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const recorder = new MediaRecorder(stream);\n            const chunks = [];\n\n            recorder.ondataavailable = (event) => {\n                chunks.push(event.data);\n            };\n\n            recorder.onstop = async () => {\n                const audioBlob = new Blob(chunks, { type: 'audio/webm' });\n                try {\n                    await transcribeAudio(audioBlob, { language: selectedLanguage });\n                } catch (err) {\n                    console.error('Transcription error:', err);\n                }\n            };\n\n            recorder.start();\n            setMediaRecorder(recorder);\n            setAudioChunks(chunks);\n            setIsRecording(true);\n        } catch (err) {\n            console.error('Recording error:', err);\n            alert('마이크 접근 권한이 필요합니다.');\n        }\n    };\n\n    // 녹음 중지\n    const stopRecording = () => {\n        if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n            mediaRecorder.stop();\n            mediaRecorder.stream.getTracks().forEach(track => track.stop());\n            setIsRecording(false);\n        }\n    };\n\n    // 번역 처리\n    const handleTranslate = async () => {\n        if (!transcription || !transcription.transcription) return;\n\n        try {\n            // 원본 텍스트를 오디오로 변환하는 대신, \n            // 실제 구현에서는 원본 오디오를 저장해두고 재사용해야 합니다\n            alert('번역 기능은 원본 오디오가 필요합니다. 새로운 오디오를 업로드하고 \"Translate\" 태스크를 선택해주세요.');\n        } catch (err) {\n            console.error('Translation error:', err);\n        }\n    };\n\n    return (\n        <div className=\"max-w-4xl mx-auto p-6\">\n            <div className=\"bg-white rounded-lg shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n                    Whisper 음성 인식 테스트\n                </h2>\n\n                {/* 언어 선택 */}\n                <div className=\"mb-6\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        언어 선택\n                    </label>\n                    <select\n                        value={selectedLanguage}\n                        onChange={(e) => setSelectedLanguage(e.target.value)}\n                        className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        disabled={loading}\n                    >\n                        <option value={WHISPER_LANGUAGES.AUTO}>자동 감지</option>\n                        <option value={WHISPER_LANGUAGES.KOREAN}>한국어</option>\n                        <option value={WHISPER_LANGUAGES.ENGLISH}>English</option>\n                        <option value={WHISPER_LANGUAGES.JAPANESE}>日本語</option>\n                        <option value={WHISPER_LANGUAGES.CHINESE}>中文</option>\n                        <option value={WHISPER_LANGUAGES.SPANISH}>Español</option>\n                        <option value={WHISPER_LANGUAGES.FRENCH}>Français</option>\n                        <option value={WHISPER_LANGUAGES.GERMAN}>Deutsch</option>\n                    </select>\n                </div>\n\n                {/* 입력 옵션들 */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                    {/* 파일 업로드 */}\n                    <div className=\"relative\">\n                        <input\n                            type=\"file\"\n                            accept=\"audio/*\"\n                            onChange={handleFileUpload}\n                            disabled={loading || isRecording}\n                            className=\"hidden\"\n                            id=\"audio-upload\"\n                        />\n                        <label\n                            htmlFor=\"audio-upload\"\n                            className={`flex items-center justify-center gap-2 px-4 py-3 rounded-lg cursor-pointer transition-colors ${loading || isRecording\n                                    ? 'bg-gray-100 text-gray-400'\n                                    : 'bg-blue-500 hover:bg-blue-600 text-white'\n                                }`}\n                        >\n                            <Upload className=\"w-5 h-5\" />\n                            <span>파일 업로드</span>\n                        </label>\n                    </div>\n\n                    {/* 녹음 버튼 */}\n                    <button\n                        onClick={isRecording ? stopRecording : startRecording}\n                        disabled={loading}\n                        className={`flex items-center justify-center gap-2 px-4 py-3 rounded-lg transition-colors ${isRecording\n                                ? 'bg-red-500 hover:bg-red-600 text-white animate-pulse'\n                                : loading\n                                    ? 'bg-gray-100 text-gray-400'\n                                    : 'bg-green-500 hover:bg-green-600 text-white'\n                            }`}\n                    >\n                        {isRecording ? (\n                            <>\n                                <MicOff className=\"w-5 h-5\" />\n                                <span>녹음 중지</span>\n                            </>\n                        ) : (\n                            <>\n                                <Mic className=\"w-5 h-5\" />\n                                <span>녹음 시작</span>\n                            </>\n                        )}\n                    </button>\n                </div>\n\n                {/* 진행 상태 */}\n                {loading && (\n                    <div className=\"mb-6\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                            <Loader2 className=\"w-5 h-5 animate-spin text-blue-500\" />\n                            <span className=\"text-sm text-gray-600\">처리 중...</span>\n                        </div>\n                        {progress > 0 && (\n                            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                <div\n                                    className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                                    style={{ width: `${progress}%` }}\n                                />\n                            </div>\n                        )}\n                    </div>\n                )}\n\n                {/* 에러 메시지 */}\n                {error && (\n                    <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n                        <p className=\"text-red-600\">{error}</p>\n                    </div>\n                )}\n\n                {/* 결과 표시 */}\n                {transcription && (\n                    <div className=\"space-y-4\">\n                        {/* 전사 결과 */}\n                        <div className=\"bg-gray-50 rounded-lg p-6\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                                <h3 className=\"text-lg font-semibold text-gray-900\">전사 결과</h3>\n                                <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                                    <span className=\"flex items-center gap-1\">\n                                        <Globe className=\"w-4 h-4\" />\n                                        {transcription.language || '자동'}\n                                    </span>\n                                    <span className=\"flex items-center gap-1\">\n                                        <FileAudio className=\"w-4 h-4\" />\n                                        {transcription.word_count || 0} 단어\n                                    </span>\n                                    {transcription.chunks > 1 && (\n                                        <span>{transcription.chunks} 청크 처리됨</span>\n                                    )}\n                                </div>\n                            </div>\n                            <p className=\"text-gray-700 whitespace-pre-wrap\">\n                                {transcription.transcription}\n                            </p>\n                        </div>\n\n                        {/* 단어별 타임스탬프 (있는 경우) */}\n                        {transcription.words && transcription.words.length > 0 && (\n                            <details className=\"bg-gray-50 rounded-lg p-6\">\n                                <summary className=\"cursor-pointer font-semibold text-gray-900 mb-3\">\n                                    단어별 타임스탬프 ({transcription.words.length} 단어)\n                                </summary>\n                                <div className=\"space-y-1 text-sm\">\n                                    {transcription.words.map((word, index) => (\n                                        <div key={index} className=\"flex items-center gap-2\">\n                                            <span className=\"text-gray-500 font-mono\">\n                                                {word.start.toFixed(2)}s - {word.end.toFixed(2)}s\n                                            </span>\n                                            <span className=\"text-gray-700\">{word.word}</span>\n                                        </div>\n                                    ))}\n                                </div>\n                            </details>\n                        )}\n\n                        {/* 액션 버튼들 */}\n                        <div className=\"flex gap-3\">\n                            <button\n                                onClick={handleTranslate}\n                                className=\"px-4 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors\"\n                            >\n                                영어로 번역\n                            </button>\n                            <button\n                                onClick={reset}\n                                className=\"px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg transition-colors\"\n                            >\n                                초기화\n                            </button>\n                        </div>\n                    </div>\n                )}\n\n                {/* 사용법 */}\n                <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                    <h3 className=\"text-sm font-semibold text-gray-700 mb-2\">사용법</h3>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                        <li>• 오디오 파일을 업로드하거나 마이크로 직접 녹음할 수 있습니다</li>\n                        <li>• 지원 형식: MP3, WAV, M4A, FLAC, OGG, WebM</li>\n                        <li>• 최대 파일 크기: 25MB (대용량 파일은 자동으로 청크 처리)</li>\n                        <li>• 언어를 지정하면 더 정확한 결과를 얻을 수 있습니다</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/analytics/LevelTestHistoryChart.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLevelTestHistory'. Either include it or remove the dependency array.","line":19,"column":6,"nodeType":"ArrayExpression","endLine":19,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadLevelTestHistory, timeRange]","fix":{"range":[807,818],"text":"[loadLevelTestHistory, timeRange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  BarChart, Bar, PieChart, Pie, Cell\n} from 'recharts';\nimport { Calendar, TrendingUp, Award, Target } from 'lucide-react';\nimport { getLevelTestHistory } from '../../api/analytics';\n\nconst LevelTestHistoryChart = ({ timeRange = 'year' }) => {\n  const [historyData, setHistoryData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedView, setSelectedView] = useState('progress'); // 'progress', 'frequency', 'distribution'\n\n  const LEVEL_ORDER = ['Beginner', 'Elementary', 'Intermediate', 'Upper-Intermediate', 'Advanced', 'Proficient'];\n\n  useEffect(() => {\n    loadLevelTestHistory();\n  }, [timeRange]);\n\n  const loadLevelTestHistory = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await getLevelTestHistory();\n      const data = transformLevelTestData(response, timeRange);\n      setHistoryData(data);\n    } catch (fetchError) {\n      console.error('Level test history loading failed:', fetchError);\n      setHistoryData(null);\n      setError('레벨 테스트 기록을 불러오지 못했습니다. 잠시 후 다시 시도해주세요.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const parseTestDate = (test) => {\n    const candidates = [\n      test?.date,\n      test?.testDate,\n      test?.completedAt,\n      test?.createdAt,\n      test?.created_date,\n      test?.timestamp\n    ];\n\n    for (const candidate of candidates) {\n      if (!candidate) continue;\n      const date = new Date(candidate);\n      if (!Number.isNaN(date.getTime())) {\n        return date;\n      }\n    }\n\n    return null;\n  };\n\n  const filterTestsByRange = (tests, range) => {\n    if (!range || !tests.length) return tests;\n\n    const now = new Date();\n    const start = new Date(now);\n\n    switch (range) {\n      case 'month':\n        start.setMonth(now.getMonth() - 1);\n        break;\n      case 'quarter':\n        start.setMonth(now.getMonth() - 3);\n        break;\n      case 'week':\n        start.setDate(now.getDate() - 7);\n        break;\n      case 'year':\n        start.setFullYear(now.getFullYear() - 1);\n        break;\n      case 'all':\n      default:\n        return tests;\n    }\n\n    return tests.filter((test) => {\n      const date = parseTestDate(test);\n      return date ? date >= start : true;\n    });\n  };\n\n  const getLevelIndex = (test) => {\n    if (Number.isFinite(test?.levelIndex)) {\n      return Number(test.levelIndex);\n    }\n\n    if (Number.isFinite(test?.level)) {\n      return Number(test.level);\n    }\n\n    const levelName = test?.level || test?.levelName || test?.resultLevel || test?.targetLevel;\n    if (typeof levelName === 'string') {\n      const normalized = levelName.trim().toLowerCase();\n      const index = LEVEL_ORDER.findIndex((level) => level.toLowerCase() === normalized);\n      if (index >= 0) {\n        return index;\n      }\n    }\n\n    return null;\n  };\n\n  const transformLevelTestData = (apiResponse, range) => {\n    const levelTests = filterTestsByRange(apiResponse?.levelTests || [], range);\n    \n    return {\n      tests: levelTests,\n      languageDistribution: calculateLanguageDistribution(levelTests),\n      levelProgression: calculateLevelProgression(levelTests),\n      monthlyFrequency: calculateMonthlyFrequency(levelTests)\n    };\n  };\n\n  const calculateLanguageDistribution = (tests) => {\n    if (!tests.length) return [];\n\n    const distribution = {};\n    tests.forEach(test => {\n      const language = test.language || 'Unknown';\n      distribution[language] = (distribution[language] || 0) + 1;\n    });\n    \n    const colors = ['#00C471', '#4285F4', '#FFB800', '#FF6B6B', '#9C27B0'];\n    const total = tests.length;\n\n    return Object.entries(distribution).map(([language, count], index) => ({\n      name: language,\n      value: count,\n      color: colors[index % colors.length],\n      percentage: Number(((count / total) * 100).toFixed(1))\n    }));\n  };\n\n  const calculateLevelProgression = (tests) => {\n    const grouped = {};\n\n    tests.forEach(test => {\n      const levelIndex = getLevelIndex(test);\n      const dateObj = parseTestDate(test);\n\n      if (levelIndex === null || !dateObj) return;\n\n      const language = test.language || 'Unknown';\n      if (!grouped[language]) {\n        grouped[language] = [];\n      }\n\n      grouped[language].push({\n        ...test,\n        levelIndex,\n        dateObj\n      });\n    });\n    \n    const progression = [];\n    Object.entries(grouped).forEach(([language, langTests]) => {\n      langTests.sort((a, b) => a.dateObj - b.dateObj);\n\n      langTests.forEach((test, index) => {\n        const cumulativeSum = langTests\n          .slice(0, index + 1)\n          .reduce((sum, current) => sum + current.levelIndex, 0);\n\n        const monthLabel = test.dateObj.toLocaleDateString('ko-KR', { month: 'short' });\n        const isoDate = test.dateObj.toISOString().split('T')[0];\n\n        const { dateObj: _dateObj, ...rest } = test;\n        progression.push({\n          ...rest,\n          language,\n          date: isoDate,\n          month: monthLabel,\n          testNumber: index + 1,\n          cumulativeProgress: Number((cumulativeSum / (index + 1)).toFixed(2))\n        });\n      });\n    });\n    \n    return progression.sort((a, b) => new Date(a.date) - new Date(b.date));\n  };\n\n  const calculateMonthlyFrequency = (tests) => {\n    const monthly = {};\n    tests.forEach(test => {\n      const date = parseTestDate(test);\n      if (!date) return;\n      const key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      monthly[key] = (monthly[key] || 0) + 1;\n    });\n    \n    return Object.entries(monthly)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([key, count]) => {\n        const [year, month] = key.split('-');\n        const labelDate = new Date(Number(year), Number(month) - 1, 1);\n        const label = labelDate.toLocaleDateString('ko-KR', { year: 'numeric', month: 'short' });\n        return {\n          month: label,\n          tests: count\n        };\n      });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">레벨 테스트 히스토리</h3>\n          <div className=\"w-32 h-8 bg-[var(--black-50)] rounded animate-pulse\"></div>\n        </div>\n        \n        <div className=\"h-80 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-[14px] text-[var(--black-300)]\">레벨 테스트 데이터 로딩 중...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">레벨 테스트 히스토리</h3>\n          <button\n            type=\"button\"\n            onClick={loadLevelTestHistory}\n            className=\"px-3 py-1.5 bg-[#00C471] text-white text-[13px] font-semibold rounded-lg hover:bg-[#00B267] transition-colors\"\n          >\n            다시 시도\n          </button>\n        </div>\n\n        <div className=\"h-80 flex items-center justify-center\">\n          <div className=\"text-center max-w-sm\">\n            <Calendar className=\"w-12 h-12 text-[var(--red-300,#F87171)] mx-auto mb-4\" />\n            <p className=\"text-[16px] text-[var(--black-400,#565656)] font-semibold mb-2\">레벨 테스트 데이터를 불러올 수 없습니다</p>\n            <p className=\"text-[14px] text-[var(--black-300,#808080)]\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!historyData?.tests?.length) {\n    return (\n      <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">레벨 테스트 히스토리</h3>\n        </div>\n        \n        <div className=\"h-80 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Calendar className=\"w-12 h-12 text-[var(--black-200)] mx-auto mb-4\" />\n            <p className=\"text-[16px] text-[var(--black-300)] mb-2\">아직 레벨 테스트 기록이 없습니다</p>\n            <p className=\"text-[14px] text-[var(--black-200)]\">레벨 테스트를 완료하면 여기에 결과가 표시됩니다.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderProgressChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={historyData.levelProgression}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--black-50)\" />\n        <XAxis \n          dataKey=\"month\" \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n        />\n        <YAxis \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n          domain={[0, 4]}\n          tickFormatter={(value) => ['Beginner', 'Elementary', 'Intermediate', 'Upper-Int.', 'Advanced'][value] || value}\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: 'white',\n            border: '1px solid var(--black-50)',\n            borderRadius: '8px'\n          }}\n          labelFormatter={(label) => `테스트 날짜: ${label}`}\n          formatter={(value, _name, props) => [\n            ['Beginner', 'Elementary', 'Intermediate', 'Upper-Intermediate', 'Advanced'][Math.floor(value)],\n            `${props.payload.language} 레벨`\n          ]}\n        />\n        <Line \n          type=\"monotone\" \n          dataKey=\"levelIndex\" \n          stroke=\"#00C471\" \n          strokeWidth={3}\n          dot={{ fill: '#00C471', strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, stroke: '#00C471', strokeWidth: 2 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  const renderFrequencyChart = () => (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={historyData.monthlyFrequency}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--black-50)\" />\n        <XAxis \n          dataKey=\"month\" \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n        />\n        <YAxis \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: 'white',\n            border: '1px solid var(--black-50)',\n            borderRadius: '8px'\n          }}\n        />\n        <Bar \n          dataKey=\"tests\" \n          fill=\"#4285F4\" \n          radius={[4, 4, 0, 0]}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n\n  const renderDistributionChart = () => {\n    if (!historyData.languageDistribution.length) {\n      return (\n        <div className=\"h-80 flex flex-col items-center justify-center text-center text-[var(--black-300)]\">\n          <Award className=\"w-12 h-12 text-[var(--black-200)] mb-3\" />\n          <p className=\"text-[16px] font-medium text-[var(--black-400)] mb-1\">언어별 데이터가 없습니다</p>\n          <p className=\"text-[14px]\">레벨 테스트를 진행하면 언어별 통계를 확인할 수 있어요.</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center justify-center\">\n        <div className=\"w-80 h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={historyData.languageDistribution}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={100}\n                paddingAngle={5}\n                dataKey=\"value\"\n              >\n                {historyData.languageDistribution.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value) => [`${value}회`, '테스트 수']} />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"ml-8\">\n          <h4 className=\"text-[16px] font-bold text-[var(--black-500)] mb-4\">언어별 분포</h4>\n          {historyData.languageDistribution.map((lang, index) => (\n            <div key={index} className=\"flex items-center mb-3\">\n              <div \n                className=\"w-4 h-4 rounded-full mr-3\"\n                style={{ backgroundColor: lang.color }}\n              />\n              <div className=\"flex-1\">\n                <div className=\"text-[14px] text-[var(--black-500)] font-medium\">{lang.name}</div>\n                <div className=\"text-[12px] text-[var(--black-300)]\">\n                  {lang.value}회 ({lang.percentage}%)\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">레벨 테스트 히스토리</h3>\n        \n        <div className=\"flex items-center space-x-2\">\n          <select\n            value={selectedView}\n            onChange={(e) => setSelectedView(e.target.value)}\n            className=\"px-3 py-2 text-[14px] border border-[var(--black-50)] rounded-lg bg-white text-[var(--black-500)] focus:border-[#00C471] focus:outline-none\"\n          >\n            <option value=\"progress\">레벨 진행도</option>\n            <option value=\"frequency\">월별 빈도</option>\n            <option value=\"distribution\">언어별 분포</option>\n          </select>\n        </div>\n      </div>\n\n      {/* 통계 요약 */}\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        <div className=\"text-center p-4 bg-[var(--green-50)] rounded-[12px]\">\n          <div className=\"w-10 h-10 bg-[#00C471] rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Award className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"text-[20px] font-bold text-[var(--black-500)]\">\n            {historyData.tests.length}\n          </div>\n          <div className=\"text-[12px] text-[var(--black-300)]\">총 테스트 수</div>\n        </div>\n\n        <div className=\"text-center p-4 bg-[#F0F8FF] rounded-[12px]\">\n          <div className=\"w-10 h-10 bg-[#4285F4] rounded-full flex items-center justify-center mx-auto mb-2\">\n            <TrendingUp className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"text-[20px] font-bold text-[var(--black-500)]\">\n            {historyData.languageDistribution.length}\n          </div>\n          <div className=\"text-[12px] text-[var(--black-300)]\">테스트 언어 수</div>\n        </div>\n\n        <div className=\"text-center p-4 bg-[#FFF8E1] rounded-[12px]\">\n          <div className=\"w-10 h-10 bg-[#FFB800] rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Target className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"text-[20px] font-bold text-[var(--black-500)]\">\n            {Math.round(historyData.tests.reduce((sum, test) => sum + test.score, 0) / historyData.tests.length) || 0}\n          </div>\n          <div className=\"text-[12px] text-[var(--black-300)]\">평균 점수</div>\n        </div>\n      </div>\n\n      {/* 차트 영역 */}\n      <div className=\"h-80\">\n        {selectedView === 'progress' && renderProgressChart()}\n        {selectedView === 'frequency' && renderFrequencyChart()}\n        {selectedView === 'distribution' && renderDistributionChart()}\n      </div>\n\n      {/* 최근 테스트 결과 */}\n      <div className=\"mt-6 pt-4 border-t border-[var(--black-50)]\">\n        <h4 className=\"text-[16px] font-bold text-[var(--black-500)] mb-3\">최근 테스트 결과</h4>\n        <div className=\"space-y-2\">\n          {historyData.tests.slice(-3).reverse().map((test, index) => (\n            <div key={index} className=\"flex items-center justify-between p-3 bg-[var(--green-50)] rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-2 h-2 bg-[#00C471] rounded-full\"></div>\n                <div>\n                  <span className=\"text-[14px] font-medium text-[var(--black-500)]\">{test.language}</span>\n                  <span className=\"text-[12px] text-[var(--black-300)] ml-2\">{test.level}</span>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-[14px] text-[var(--black-300)]\">\n                  {new Date(test.date).toLocaleDateString('ko-KR')}\n                </span>\n                <span className=\"text-[14px] font-bold text-[#00C471]\">\n                  {test.score}점\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LevelTestHistoryChart;\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/analytics/MatchingStatsChart.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMatchingStats'. Either include it or remove the dependency array.","line":17,"column":6,"nodeType":"ArrayExpression","endLine":17,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadMatchingStats, timeRange]","fix":{"range":[730,741],"text":"[loadMatchingStats, timeRange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell,\n  XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer\n} from 'recharts';\nimport { Users, Heart, TrendingUp, Clock, Target, UserCheck } from 'lucide-react';\nimport { getMatchingStats } from '../../api/analytics';\n\nconst MatchingStatsChart = ({ timeRange = 'month' }) => {\n  const [matchingData, setMatchingData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedView, setSelectedView] = useState('success-rate'); // 'success-rate', 'frequency', 'duration', 'type'\n\n  useEffect(() => {\n    loadMatchingStats();\n  }, [timeRange]);\n\n  const loadMatchingStats = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await getMatchingStats(timeRange);\n      const data = transformMatchingData(response);\n      setMatchingData(data);\n    } catch (fetchError) {\n      console.error('Matching stats loading failed:', fetchError);\n      setMatchingData(null);\n      setError('매칭 통계를 불러오지 못했습니다. 잠시 후 다시 시도해주세요.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // API 데이터 변환 헬퍼 함수들\n  const parseEventDate = (event) => {\n    const candidates = [\n      event?.createdDate,\n      event?.createdAt,\n      event?.created_at,\n      event?.timestamp,\n      event?.eventTime,\n      event?.time,\n      event?.properties?.createdAt,\n      event?.properties?.timestamp,\n      event?.properties?.eventTime\n    ];\n\n    for (const candidate of candidates) {\n      if (!candidate) continue;\n      const date = new Date(candidate);\n      if (!Number.isNaN(date.getTime())) {\n        return date;\n      }\n    }\n\n    return null;\n  };\n\n  const resolveStatus = (event) => {\n    const candidates = [\n      event?.status,\n      event?.properties?.status,\n      event?.properties?.result,\n      event?.event,\n      event?.properties?.eventType\n    ]\n      .filter(Boolean)\n      .map((value) => String(value).toUpperCase());\n\n    if (candidates.some((value) => value.includes('SUCCESS') || value.includes('MATCHED') || value.includes('ACCEPT'))) {\n      return 'SUCCESS';\n    }\n    if (candidates.some((value) => value.includes('FAIL') || value.includes('REJECT') || value.includes('DECLINE') || value.includes('CANCEL'))) {\n      return 'FAILED';\n    }\n    if (candidates.some((value) => value.includes('REQUEST') || value.includes('PENDING'))) {\n      return 'REQUEST';\n    }\n    return 'OTHER';\n  };\n\n  const extractWaitTimeSeconds = (event) => {\n    const props = event?.properties || {};\n    const keys = [\n      'waitTimeSeconds',\n      'wait_time_seconds',\n      'waitTime',\n      'wait_time',\n      'matchingWaitSeconds',\n      'matchWaitSeconds',\n      'queueWaitSeconds',\n      'queueWaitTime',\n      'waitingSeconds',\n      'waitingTime',\n      'waitDurationSeconds',\n      'waitDurationMillis',\n      'waitTimeMs'\n    ];\n\n    for (const key of keys) {\n      if (!(key in props)) continue;\n      const value = props[key];\n      if (value === null || value === undefined || value === '') continue;\n      const num = Number(value);\n      if (Number.isNaN(num)) continue;\n\n      const lowerKey = key.toLowerCase();\n      if (lowerKey.includes('millis') || lowerKey.endsWith('ms')) {\n        return Math.round(num / 1000);\n      }\n      if (lowerKey.includes('minute')) {\n        return Math.round(num * 60);\n      }\n      if (lowerKey.includes('hour')) {\n        return Math.round(num * 3600);\n      }\n      return Math.round(num);\n    }\n\n    return null;\n  };\n\n  const extractSessionDurationMinutes = (event) => {\n    const props = event?.properties || {};\n    const keys = [\n      'sessionDurationMinutes',\n      'durationMinutes',\n      'sessionDuration',\n      'duration',\n      'callDuration',\n      'meetingDuration',\n      'conversationDuration',\n      'lengthMinutes',\n      'length',\n      'sessionDurationSeconds',\n      'durationSeconds'\n    ];\n\n    for (const key of keys) {\n      if (!(key in props)) continue;\n      const value = props[key];\n      if (value === null || value === undefined || value === '') continue;\n      const num = Number(value);\n      if (Number.isNaN(num)) continue;\n\n      const lowerKey = key.toLowerCase();\n      if (lowerKey.includes('millis') || lowerKey.endsWith('ms')) {\n        return Math.round(num / 60000);\n      }\n      if (lowerKey.includes('second')) {\n        return Math.round(num / 60);\n      }\n      if (lowerKey.includes('hour')) {\n        return Math.round(num * 60);\n      }\n      return Math.round(num);\n    }\n\n    return null;\n  };\n\n  const matchTypeLabel = (event) => {\n    const props = event?.properties || {};\n    const rawType = props.matchType || props.matchingType || props.sessionType || props.roomType || props.channelType || props.mode || props.sessionMode;\n    if (!rawType) return '기타';\n\n    const normalized = String(rawType).toUpperCase();\n    if (normalized.includes('GROUP')) return '그룹 세션';\n    if (normalized.includes('RANDOM')) return '랜덤 매칭';\n    if (normalized.includes('TEXT')) return '텍스트 채팅';\n    if (normalized.includes('VOICE') || normalized.includes('AUDIO')) return '음성 매칭';\n    if (normalized.includes('VIDEO')) return '영상 매칭';\n    if (normalized.includes('DISCUSSION') || normalized.includes('TOPIC')) return '주제별 토론';\n    if (normalized.includes('ONE') || normalized.includes('1:1') || normalized.includes('SOLO')) return '1:1 회화';\n    return String(rawType);\n  };\n\n  const LANGUAGE_LABEL_MAP = {\n    EN: 'English',\n    ENGLISH: 'English',\n    KO: 'Korean',\n    KOREAN: 'Korean',\n    JA: 'Japanese',\n    JAPANESE: 'Japanese',\n    ZH: 'Chinese',\n    CHINESE: 'Chinese',\n    ES: 'Spanish',\n    SPANISH: 'Spanish',\n    FR: 'French',\n    FRENCH: 'French'\n  };\n\n  const languageLabel = (event) => {\n    const props = event?.properties || {};\n    const rawLanguage = props.targetLanguage || props.language || props.learningLanguage || props.sessionLanguage || props.partnerLanguage || props.requestLanguage;\n    if (!rawLanguage) return '기타';\n\n    const normalized = LANGUAGE_LABEL_MAP[String(rawLanguage).toUpperCase()];\n    return normalized || String(rawLanguage);\n  };\n\n  const processMatchingEvents = (events) => {\n    const dailyMap = new Map();\n\n    events.forEach((event) => {\n      const date = parseEventDate(event) || new Date();\n      const dayKey = date.toISOString().split('T')[0];\n      const status = resolveStatus(event);\n\n      if (!dailyMap.has(dayKey)) {\n        dailyMap.set(dayKey, { date: dayKey, requests: 0, successful: 0, failed: 0 });\n      }\n\n      const dayEntry = dailyMap.get(dayKey);\n\n      if (status === 'SUCCESS') {\n        dayEntry.successful += 1;\n        dayEntry.requests += 1;\n      } else if (status === 'FAILED') {\n        dayEntry.failed += 1;\n        dayEntry.requests += 1;\n      } else if (status === 'REQUEST') {\n        dayEntry.requests += 1;\n      }\n    });\n\n    return Array.from(dailyMap.values())\n      .map((day) => ({\n        ...day,\n        day: new Date(day.date).toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' }),\n        successRate: day.requests > 0 ? Number(((day.successful / day.requests) * 100).toFixed(1)) : 0\n      }))\n      .sort((a, b) => new Date(a.date) - new Date(b.date));\n  };\n\n  const calculateSummaryStats = (events) => {\n    let totalRequests = 0;\n    let totalSuccessful = 0;\n    let totalFailed = 0;\n    const waitTimes = [];\n    const sessionDurations = [];\n\n    events.forEach((event) => {\n      const status = resolveStatus(event);\n\n      if (status === 'SUCCESS') {\n        totalSuccessful += 1;\n        totalRequests += 1;\n      } else if (status === 'FAILED') {\n        totalFailed += 1;\n        totalRequests += 1;\n      } else if (status === 'REQUEST') {\n        totalRequests += 1;\n      }\n\n      const waitSeconds = extractWaitTimeSeconds(event);\n      if (Number.isFinite(waitSeconds) && waitSeconds > 0) {\n        waitTimes.push(waitSeconds);\n      }\n\n      const durationMinutes = extractSessionDurationMinutes(event);\n      if (Number.isFinite(durationMinutes) && durationMinutes > 0) {\n        sessionDurations.push(durationMinutes);\n      }\n    });\n\n    return {\n      totalRequests,\n      totalSuccessful,\n      totalFailed,\n      overallSuccessRate: totalRequests > 0\n        ? Number(((totalSuccessful / totalRequests) * 100).toFixed(1))\n        : 0,\n      avgWaitTime: waitTimes.length > 0\n        ? Math.round(waitTimes.reduce((sum, current) => sum + current, 0) / waitTimes.length)\n        : 0,\n      avgSessionDuration: sessionDurations.length > 0\n        ? Math.round(sessionDurations.reduce((sum, current) => sum + current, 0) / sessionDurations.length)\n        : 0\n    };\n  };\n\n  const calculateTypeDistribution = (events) => {\n    const counts = new Map();\n\n    events.forEach((event) => {\n      if (resolveStatus(event) !== 'SUCCESS') return;\n      const label = matchTypeLabel(event);\n      counts.set(label, (counts.get(label) || 0) + 1);\n    });\n\n    const total = Array.from(counts.values()).reduce((sum, count) => sum + count, 0);\n    if (total === 0) return [];\n\n    const colors = ['#00C471', '#4285F4', '#FFB800', '#FF6B6B', '#9C27B0', '#6366F1'];\n\n    return Array.from(counts.entries()).map(([name, count], index) => ({\n      name,\n      value: count,\n      percentage: Number(((count / total) * 100).toFixed(1)),\n      color: colors[index % colors.length]\n    }));\n  };\n\n  const calculateLanguageStats = (events) => {\n    const statsMap = new Map();\n\n    events.forEach((event) => {\n      const status = resolveStatus(event);\n      if (!['SUCCESS', 'FAILED', 'REQUEST'].includes(status)) return;\n\n      const label = languageLabel(event);\n      if (!statsMap.has(label)) {\n        statsMap.set(label, { language: label, attempts: 0, successful: 0 });\n      }\n\n      const entry = statsMap.get(label);\n      entry.attempts += 1;\n      if (status === 'SUCCESS') {\n        entry.successful += 1;\n      }\n    });\n\n    const results = Array.from(statsMap.values())\n      .filter((entry) => entry.attempts > 0)\n      .map((entry) => ({\n        ...entry,\n        successRate: Number(((entry.successful / entry.attempts) * 100).toFixed(1))\n      }));\n\n    return results.sort((a, b) => b.successRate - a.successRate);\n  };\n\n  const calculateHourlyStats = (events) => {\n    const hourlyMap = new Map();\n\n    events.forEach((event) => {\n      const status = resolveStatus(event);\n      if (!['SUCCESS', 'FAILED'].includes(status)) return;\n\n      const date = parseEventDate(event);\n      if (!date) return;\n\n      const hour = date.getHours();\n      if (!hourlyMap.has(hour)) {\n        hourlyMap.set(hour, { hour, attempts: 0, successful: 0 });\n      }\n\n      const entry = hourlyMap.get(hour);\n      entry.attempts += 1;\n      if (status === 'SUCCESS') {\n        entry.successful += 1;\n      }\n    });\n\n    return Array.from(hourlyMap.values())\n      .sort((a, b) => a.hour - b.hour)\n      .map((entry) => ({\n        hour: `${entry.hour.toString().padStart(2, '0')}:00`,\n        attempts: entry.attempts,\n        successRate: entry.attempts > 0\n          ? Number(((entry.successful / entry.attempts) * 100).toFixed(1))\n          : 0\n      }));\n  };\n\n  const transformMatchingData = (apiResponse) => {\n    // API 응답을 컴포넌트에서 사용할 수 있는 형태로 변환\n    const events = apiResponse?.matchingEvents || [];\n    \n    if (!events.length) {\n      // API에서 데이터가 없으면 빈 통계 반환\n      return {\n        dailyStats: [],\n        summary: {\n          totalRequests: 0,\n          totalSuccessful: 0,\n          totalFailed: 0,\n          overallSuccessRate: 0,\n          avgWaitTime: 0,\n          avgSessionDuration: 0\n        },\n        matchingTypes: [],\n        languageStats: [],\n        hourlyStats: []\n      };\n    }\n    \n    // 실제 API 데이터를 기반으로 변환\n    const dailyStats = processMatchingEvents(events);\n    const summary = calculateSummaryStats(events);\n    const matchingTypes = calculateTypeDistribution(events);\n    const languageStats = calculateLanguageStats(events);\n    const hourlyStats = calculateHourlyStats(events);\n    \n    return {\n      dailyStats,\n      summary,\n      matchingTypes,\n      languageStats,\n      hourlyStats\n    };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">매칭 성공률 통계</h3>\n          <div className=\"w-32 h-8 bg-[var(--black-50)] rounded animate-pulse\"></div>\n        </div>\n        \n        <div className=\"h-96 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-[14px] text-[var(--black-300)]\">매칭 통계 로딩 중...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">매칭 성공률 통계</h3>\n          <button\n            type=\"button\"\n            onClick={loadMatchingStats}\n            className=\"px-3 py-1.5 bg-[#00C471] text-white text-[13px] font-semibold rounded-lg hover:bg-[#00B267] transition-colors\"\n          >\n            다시 시도\n          </button>\n        </div>\n\n        <div className=\"h-96 flex items-center justify-center\">\n          <div className=\"text-center max-w-sm\">\n            <Users className=\"w-12 h-12 text-[var(--red-300,#F87171)] mx-auto mb-4\" />\n            <p className=\"text-[16px] text-[var(--black-400,#565656)] font-semibold mb-2\">매칭 통계를 불러오지 못했습니다</p>\n            <p className=\"text-[14px] text-[var(--black-300,#808080)]\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!matchingData?.summary.totalRequests) {\n    return (\n      <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">매칭 성공률 통계</h3>\n        </div>\n        \n        <div className=\"h-96 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Users className=\"w-12 h-12 text-[var(--black-200)] mx-auto mb-4\" />\n            <p className=\"text-[16px] text-[var(--black-300)] mb-2\">아직 매칭 기록이 없습니다</p>\n            <p className=\"text-[14px] text-[var(--black-200)]\">매칭을 시도하면 여기에 통계가 표시됩니다.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderSuccessRateChart = () => (\n    <ResponsiveContainer width=\"100%\" height={320}>\n      <AreaChart data={matchingData.dailyStats}>\n        <defs>\n          <linearGradient id=\"successGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#00C471\" stopOpacity={0.3}/>\n            <stop offset=\"95%\" stopColor=\"#00C471\" stopOpacity={0.1}/>\n          </linearGradient>\n        </defs>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--black-50)\" />\n        <XAxis \n          dataKey=\"day\" \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n        />\n        <YAxis \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n          domain={[0, 100]}\n          tickFormatter={(value) => `${value}%`}\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: 'white',\n            border: '1px solid var(--black-50)',\n            borderRadius: '8px'\n          }}\n          formatter={(value) => [`${value}%`, '성공률']}\n        />\n        <Area \n          type=\"monotone\" \n          dataKey=\"successRate\" \n          stroke=\"#00C471\"\n          strokeWidth={2}\n          fill=\"url(#successGradient)\"\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n\n  const renderFrequencyChart = () => (\n    <ResponsiveContainer width=\"100%\" height={320}>\n      <BarChart data={matchingData.dailyStats.slice(-14)}> {/* 최근 2주 */}\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--black-50)\" />\n        <XAxis \n          dataKey=\"day\" \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n        />\n        <YAxis \n          stroke=\"var(--black-300)\"\n          fontSize={12}\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: 'white',\n            border: '1px solid var(--black-50)',\n            borderRadius: '8px'\n          }}\n        />\n        <Bar dataKey=\"successful\" fill=\"#00C471\" name=\"성공\" radius={[2, 2, 0, 0]} />\n        <Bar dataKey=\"failed\" fill=\"#FF6B6B\" name=\"실패\" radius={[2, 2, 0, 0]} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n\n  const renderTypeDistribution = () => {\n    if (!matchingData.matchingTypes.length) {\n      return (\n        <div className=\"h-80 flex flex-col items-center justify-center text-center text-[var(--black-300)]\">\n          <Users className=\"w-12 h-12 text-[var(--black-200)] mb-3\" />\n          <p className=\"text-[16px] font-medium text-[var(--black-400)] mb-1\">분석할 매칭 타입이 없습니다</p>\n          <p className=\"text-[14px]\">매칭을 완료하면 타입별 통계가 표시됩니다.</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center justify-center\">\n        <div className=\"w-80 h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={matchingData.matchingTypes}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={120}\n                paddingAngle={3}\n                dataKey=\"value\"\n              >\n                {matchingData.matchingTypes.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value) => [`${value}건`, '매칭 수']} />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"ml-8\">\n          <h4 className=\"text-[16px] font-bold text-[var(--black-500)] mb-4\">매칭 타입별 분포</h4>\n          {matchingData.matchingTypes.map((type, index) => (\n            <div key={index} className=\"flex items-center mb-3\">\n              <div \n                className=\"w-4 h-4 rounded-full mr-3\"\n                style={{ backgroundColor: type.color }}\n              />\n              <div className=\"flex-1\">\n                <div className=\"text-[14px] text-[var(--black-500)] font-medium\">{type.name}</div>\n                <div className=\"text-[12px] text-[var(--black-300)]\">{type.percentage}% · {type.value}건</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderLanguageStats = () => {\n    if (!matchingData.languageStats.length) {\n      return (\n        <div className=\"h-80 flex flex-col items-center justify-center text-center text-[var(--black-300)]\">\n          <Users className=\"w-12 h-12 text-[var(--black-200)] mb-3\" />\n          <p className=\"text-[16px] font-medium text-[var(--black-400)] mb-1\">언어별 매칭 데이터가 없습니다</p>\n          <p className=\"text-[14px]\">매칭 시도 후 다시 확인해주세요.</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        {matchingData.languageStats.map((lang, index) => (\n          <div key={index} className=\"border border-[var(--black-50)] rounded-[12px] p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"text-[16px] font-semibold text-[var(--black-500)]\">{lang.language}</h4>\n              <span className=\"text-[14px] font-bold text-[#00C471]\">{lang.successRate}%</span>\n            </div>\n            <div className=\"flex items-center justify-between text-[12px] text-[var(--black-300)] mb-2\">\n              <span>{lang.successful}/{lang.attempts} 성공</span>\n              <span>{lang.attempts - lang.successful} 실패</span>\n            </div>\n            <div className=\"w-full bg-[var(--black-50)] rounded-full h-2\">\n              <div \n                className=\"bg-[#00C471] h-2 rounded-full transition-all duration-500\"\n                style={{ width: `${lang.successRate}%` }}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-[18px] font-bold text-[var(--black-500)]\">매칭 성공률 통계</h3>\n        \n        <div className=\"flex items-center space-x-2\">\n          <select\n            value={selectedView}\n            onChange={(e) => setSelectedView(e.target.value)}\n            className=\"px-3 py-2 text-[14px] border border-[var(--black-50)] rounded-lg bg-white text-[var(--black-500)] focus:border-[#00C471] focus:outline-none\"\n          >\n            <option value=\"success-rate\">성공률 추이</option>\n            <option value=\"frequency\">매칭 빈도</option>\n            <option value=\"type\">타입별 분포</option>\n            <option value=\"language\">언어별 성공률</option>\n          </select>\n        </div>\n      </div>\n\n      {/* 통계 요약 */}\n      <div className=\"grid grid-cols-4 gap-4 mb-6\">\n        <div className=\"text-center p-4 bg-[var(--green-50)] rounded-[12px]\">\n          <div className=\"w-10 h-10 bg-[#00C471] rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Target className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"text-[20px] font-bold text-[var(--black-500)]\">\n            {matchingData.summary.overallSuccessRate}%\n          </div>\n          <div className=\"text-[12px] text-[var(--black-300)]\">전체 성공률</div>\n        </div>\n\n        <div className=\"text-center p-4 bg-[#F0F8FF] rounded-[12px]\">\n          <div className=\"w-10 h-10 bg-[#4285F4] rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Users className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"text-[20px] font-bold text-[var(--black-500)]\">\n            {matchingData.summary.totalRequests}\n          </div>\n          <div className=\"text-[12px] text-[var(--black-300)]\">총 매칭 시도</div>\n        </div>\n\n        <div className=\"text-center p-4 bg-[#FFF8E1] rounded-[12px]\">\n          <div className=\"w-10 h-10 bg-[#FFB800] rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Clock className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"text-[20px] font-bold text-[var(--black-500)]\">\n            {Math.floor(matchingData.summary.avgWaitTime / 60)}:{(matchingData.summary.avgWaitTime % 60).toString().padStart(2, '0')}\n          </div>\n          <div className=\"text-[12px] text-[var(--black-300)]\">평균 대기시간</div>\n        </div>\n\n        <div className=\"text-center p-4 bg-[#FFE6F0] rounded-[12px]\">\n          <div className=\"w-10 h-10 bg-[#FF6B6B] rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Heart className=\"w-5 h-5 text-white\" />\n          </div>\n          <div className=\"text-[20px] font-bold text-[var(--black-500)]\">\n            {matchingData.summary.avgSessionDuration}분\n          </div>\n          <div className=\"text-[12px] text-[var(--black-300)]\">평균 세션시간</div>\n        </div>\n      </div>\n\n      {/* 차트 영역 */}\n      <div className=\"mb-6\">\n        {selectedView === 'success-rate' && renderSuccessRateChart()}\n        {selectedView === 'frequency' && renderFrequencyChart()}\n        {selectedView === 'type' && renderTypeDistribution()}\n        {selectedView === 'language' && renderLanguageStats()}\n      </div>\n\n      {/* 최근 매칭 성과 */}\n      <div className=\"pt-4 border-t border-[var(--black-50)]\">\n        <h4 className=\"text-[16px] font-bold text-[var(--black-500)] mb-3\">최근 7일 성과</h4>\n        <div className=\"grid grid-cols-7 gap-2\">\n          {matchingData.dailyStats.slice(-7).map((day, index) => (\n            <div key={index} className=\"text-center p-2 bg-[var(--green-50)] rounded-lg\">\n              <div className=\"text-[12px] text-[var(--black-300)] mb-1\">\n                {new Date(day.date).toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' })}\n              </div>\n              <div className=\"text-[16px] font-bold text-[#00C471]\">{day.successRate}%</div>\n              <div className=\"text-[10px] text-[var(--black-200)]\">\n                {day.successful}/{day.requests}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingStatsChart;\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/ChatContainer.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentUserId'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [currentUserId]","fix":{"range":[1570,1572],"text":"[currentUserId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { fetchChatRooms, initGlobalStompClient } from \"../../api/chat\";\nimport Sidebar from \"./Sidebar\";\nimport ChatRoomList from \"./ChatRoomList\";\nimport EmptyPlaceholder from \"./EmptyPlaceholder\";\nimport ChatWindow from \"./ChatWindow\";\nimport MainHeader from \"../MainHeader\";\n\nexport default function ChatContainer() {\n  const [rooms, setRooms] = useState([]);\n  const [currentRoom, setCurrentRoom] = useState(null);\n\n  // 현재 사용자 ID 가져오기\n  const currentUserId = localStorage.getItem(\"userId\");\n\n  useEffect(() => {\n    reloadChatRooms();\n\n    // 글로벌 WebSocket 클라이언트 초기화\n    let globalClient = null;\n    \n    const initializeGlobalClient = async () => {\n      try {\n        globalClient = await initGlobalStompClient(\n          (newRoom) => {\n            console.log(\"새 방 알림 수신:\", newRoom);\n            console.log(\"현재 사용자 ID:\", currentUserId);\n            console.log(\"새로 생성된 방의 참여자들:\", newRoom.participants);\n\n            // 새로운 채팅방이 생성되었을 때 즉시 목록 새로고침\n            reloadChatRooms();\n\n            // 현재 선택된 방이 있다면 초기화 (새로운 방이 생성되었으므로)\n            setCurrentRoom(null);\n          },\n          (status, data) => {\n            console.log(\"WebSocket 연결 상태:\", status, data);\n          },\n          (type, error) => {\n            console.error(\"WebSocket 에러:\", type, error);\n          }\n        );\n      } catch (error) {\n        console.error(\"글로벌 클라이언트 초기화 실패:\", error);\n      }\n    };\n\n    initializeGlobalClient();\n\n    return () => {\n      if (globalClient) {\n        globalClient.disconnect();\n      }\n    };\n  }, []);\n\n  const reloadChatRooms = async () => {\n    try {\n      const roomsData = await fetchChatRooms();\n      setRooms(roomsData);\n      console.log(\"채팅방 목록 새로고침 완료:\", roomsData.length, \"개\");\n    } catch (error) {\n      console.error(\"채팅방 목록 새로고침 실패:\", error);\n    }\n  };\n\n  const handleNewMessage = ({ roomId, message, sentAt }) => {\n    setRooms((prev) =>\n      prev.map((r) =>\n        r.roomId === roomId\n          ? { ...r, lastMessage: message, lastMessageAt: sentAt }\n          : r\n      )\n    );\n  };\n\n  const handleNewRoomCreated = () => {\n    // 채팅방 생성 후 즉시 목록 새로고침\n    reloadChatRooms();\n  };\n\n  const handleLeaveRoom = () => {\n    // 채팅방 나가기 후 목록 새로고침 및 현재 방 초기화\n    setCurrentRoom(null);\n    reloadChatRooms();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-100\">\n      <MainHeader />\n      <div className=\"flex flex-1 p-6 space-x-6 overflow-hidden\">\n        <Sidebar active=\"chat\" />\n        <div className=\"w-80 flex-shrink-0\">\n          <ChatRoomList\n            rooms={rooms}\n            onSelectRoom={setCurrentRoom}\n            onNewRoomCreated={handleNewRoomCreated}\n            onJoinRoom={() => {\n              reloadChatRooms();\n            }}\n          />\n        </div>\n        <div className=\"flex-1\">\n          {currentRoom ? (\n            <ChatWindow\n              room={currentRoom}\n              currentUserId={currentUserId}\n              onBack={() => setCurrentRoom(null)}\n              onNewMessage={handleNewMessage}\n              onLeaveRoom={handleLeaveRoom}\n            />\n          ) : (\n            <EmptyPlaceholder />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/ChatHeader.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'currentUser' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":10,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentUser"},"fix":{"range":[425,556],"text":""},"desc":"Remove unused variable 'currentUser'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from \"react\";\nimport { Phone, Video, Search, MoreVertical, LogOut } from \"lucide-react\";\nimport OptimizedImage from '../OptimizedImage';\nimport { DEFAULT_PROFILE_IMAGE } from '../../utils/imageUtils';\n\nexport default function ChatHeader({ room, currentUserId, onLeaveRoom, onSearchToggle }) {\n  const [showMenu, setShowMenu] = useState(false);\n  const menuRef = useRef(null);\n\n  const currentUser = room.participants.find(\n    (u) => u.userId === currentUserId\n  ) || {\n    name: \"\",\n    profileImage: \"\",\n  };\n  const partner = room.participants.find((u) => u.userId !== currentUserId) || {\n    name: \"\",\n    profileImage: \"\",\n  };\n\n  // 메뉴 외부 클릭 시 닫기\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setShowMenu(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleLeaveRoom = () => {\n    if (window.confirm(\"정말로 이 채팅방을 나가시겠습니까?\")) {\n      onLeaveRoom();\n    }\n    setShowMenu(false);\n  };\n\n  return (\n    <div className=\"flex items-center justify-between mb-4\">\n      <div className=\"flex items-center\">\n        <OptimizedImage\n          src={partner.profileImage || DEFAULT_PROFILE_IMAGE}\n          alt={partner.name}\n          className=\"w-10 h-10 rounded-full\"\n          width={40}\n          height={40}\n          loading=\"eager\"\n        />\n        <span className=\"ml-3 text-lg font-semibold\">{room.roomName}</span>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <button\n          onClick={() => {\n            /* 전화 로직 */\n          }}\n          className=\"p-2 hover:bg-gray-100 rounded-full\"\n          title=\"음성 통화\"\n        >\n          <Phone className=\"w-5 h-5 text-gray-600\" />\n        </button>\n        <button\n          onClick={() => {\n            /* 영상통화 로직 */\n          }}\n          className=\"p-2 hover:bg-gray-100 rounded-full\"\n          title=\"영상 통화\"\n        >\n          <Video className=\"w-5 h-5 text-gray-600\" />\n        </button>\n        <button\n          onClick={onSearchToggle}\n          className=\"p-2 hover:bg-gray-100 rounded-full\"\n          title=\"메시지 검색 (Ctrl+F)\"\n        >\n          <Search className=\"w-5 h-5 text-gray-600\" />\n        </button>\n\n        {/* 메뉴 버튼 */}\n        <div className=\"relative\" ref={menuRef}>\n          <button\n            onClick={() => setShowMenu(!showMenu)}\n            className=\"p-2 hover:bg-gray-100 rounded-full\"\n          >\n            <MoreVertical className=\"w-5 h-5 text-gray-600\" />\n          </button>\n\n          {/* 드롭다운 메뉴 */}\n          {showMenu && (\n            <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-50\">\n              <button\n                onClick={handleLeaveRoom}\n                className=\"w-full flex items-center px-4 py-3 text-left text-black hover:bg-gray-50 rounded-lg\"\n              >\n                <LogOut className=\"w-4 h-4 mr-3\" />\n                채팅방 나가기\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/ChatInputArea.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"useRef"},"fix":{"range":[24,32],"text":""},"desc":"Remove unused variable 'useRef'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from \"react\";\nimport { Mic, Paperclip, X, Smile } from \"lucide-react\";\nimport Picker from \"emoji-picker-react\";\nimport VoiceRecorder from \"./VoiceRecorder\";\n\nexport default function ChatInputArea({\n  input,\n  setInput,\n  sendMessage,\n  showEmojiPicker,\n  setShowEmojiPicker,\n  selectedImageFiles,\n  imagePreviews,\n  handleFileChange,\n  removeImagePreview,\n  fileInputRef,\n  onTypingStart,\n  onTypingStop,\n}) {\n  const [showVoiceRecorder, setShowVoiceRecorder] = useState(false);\n\n  // 이모지 클릭 핸들러 수정\n  const handleEmojiSelect = (emojiObject) => {\n    setInput((prev) => prev + emojiObject.emoji);\n    setShowEmojiPicker(false); // 이모지 선택 후 피커 닫기\n  };\n\n  const handleVoiceSend = (audioData) => {\n    sendMessage(\"\", [], audioData);\n    setShowVoiceRecorder(false);\n  };\n\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInput(value);\n    \n    // 타이핑 상태 전송 (빈 문자열이 아닐 때)\n    if (value.trim().length > 0 && onTypingStart) {\n      onTypingStart();\n    } else if (value.trim().length === 0 && onTypingStop) {\n      onTypingStop();\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage(input, selectedImageFiles, null);\n      setInput(\"\");\n      // 메시지 전송 시 타이핑 상태 중단\n      if (onTypingStop) {\n        onTypingStop();\n      }\n    }\n  };\n\n\n\n  return (\n    <div className=\"mt-4 flex flex-col px-4\">\n      {/* 이모지 피커를 입력창 위에 표시 */}\n      {showEmojiPicker && (\n        <div className=\"mb-2\">\n          <Picker onEmojiClick={handleEmojiSelect} />\n        </div>\n      )}\n\n      {imagePreviews.length > 0 && (\n        <div className=\"flex flex-wrap gap-2 mb-2 p-2 border rounded-lg bg-gray-50\">\n          {imagePreviews.map((src, idx) => (\n            <div\n              key={idx}\n              className=\"relative w-20 h-20 rounded-lg overflow-hidden\"\n            >\n              <img\n                src={src}\n                alt=\"preview\"\n                className=\"w-full h-full object-cover\"\n              />\n              <button\n                onClick={() => removeImagePreview(idx)}\n                className=\"absolute top-0.5 right-0.5 bg-black bg-opacity-50 text-white rounded-full p-0.5 hover:bg-opacity-70 focus:outline-none focus:ring-2 focus:ring-[#00C471] focus:ring-offset-1 transition-all\"\n                aria-label={`이미지 미리보기 ${idx + 1} 삭제`}\n                type=\"button\"\n              >\n                <X size={12} />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n      <div className=\"flex items-center\">\n        <div className=\"relative flex-1 flex items-center bg-gray-100 rounded-lg px-4 py-2\">\n          <button\n            onClick={() => fileInputRef.current.click()}\n            className=\"mr-2 p-1 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-[#00C471] focus:ring-offset-2 transition-colors\"\n            aria-label=\"이미지 첨부\"\n            type=\"button\"\n          >\n            <Paperclip className=\"w-5 h-5 text-gray-500\" />\n          </button>\n          <input\n            type=\"file\"\n            multiple\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            ref={fileInputRef}\n            className=\"hidden\"\n          />\n          <input\n            type=\"text\"\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Type your message\"\n            className=\"flex-1 bg-transparent outline-none focus:ring-2 focus:ring-[#00C471] focus:ring-offset-2 rounded px-2 py-1\"\n            aria-label=\"메시지 입력\"\n          />\n          <button\n            onClick={() => setShowEmojiPicker((v) => !v)}\n            className=\"ml-2 p-1 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-[#00C471] focus:ring-offset-2 transition-colors\"\n            aria-label={showEmojiPicker ? \"이모지 피커 닫기\" : \"이모지 피커 열기\"}\n            type=\"button\"\n          >\n            <Smile className=\"w-5 h-5 text-gray-500\" />\n          </button>\n        </div>\n        <button\n          onClick={() => setShowVoiceRecorder(true)}\n          className=\"ml-4 p-3 rounded-lg bg-blue-500 hover:bg-blue-600 text-white transition-colors focus:outline-none focus:ring-2 focus:ring-[#00C471] focus:ring-offset-2\"\n          aria-label=\"음성 메시지 녹음\"\n          type=\"button\"\n        >\n          <Mic className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Voice Recorder Modal */}\n      {showVoiceRecorder && (\n        <VoiceRecorder\n          onSend={handleVoiceSend}\n          onCancel={() => setShowVoiceRecorder(false)}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/ChatMessageList.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'isLast' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":46,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"isLast"},"fix":{"range":[1195,1238],"text":""},"desc":"Remove unused variable 'isLast'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect } from \"react\";\nimport EmptyPlaceholder from \"./EmptyPlaceholder\";\nimport VoiceMessage from \"./VoiceMessage\";\n\nexport default function ChatMessageList({\n  messages,\n  currentUserId,\n  formatTimestamp,\n  highlightedMessageId,\n  containerRef,\n}) {\n  const scrollRef = useRef();\n\n  const scrollToBottom = () => {\n    setTimeout(() => {\n      scrollRef.current?.scrollTo(0, scrollRef.current.scrollHeight);\n    }, 50);\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // containerRef를 부모에서 받은 ref로 설정\n  useEffect(() => {\n    if (containerRef) {\n      containerRef.current = scrollRef.current;\n    }\n  }, [containerRef]);\n\n  return (\n    <div\n      ref={scrollRef}\n      className=\"flex-1 min-h-0 overflow-y-auto space-y-2 p-4 pb-2\"\n    >\n      {messages.length === 0 ? (\n        <EmptyPlaceholder />\n      ) : (\n        messages.map((msg, idx) => {\n          const isMine = String(msg.sender.userId) === String(currentUserId);\n          const prevMsg = messages[idx - 1];\n          const sameUser =\n            prevMsg &&\n            String(prevMsg.sender.userId) === String(msg.sender.userId);\n          const showAvatar = !sameUser;\n          const isLast = idx === messages.length - 1;\n          const isHighlighted = highlightedMessageId === msg.messageId;\n\n          return (\n            <div\n              key={msg.messageId}\n              data-message-id={msg.messageId}\n              className={`flex items-end ${isMine ? \"justify-end\" : \"justify-start\"} ${\n                isHighlighted ? \"bg-yellow-100 rounded-lg p-2 -m-2 transition-colors duration-500\" : \"\"\n              }`}\n            >\n              {/* 다른 사람의 메시지 (왼쪽) */}\n              {!isMine && (\n                <div className=\"flex flex-col w-full\">\n                  {/* 프로필 사진과 이름 영역 - 한 줄로 정렬 */}\n                  {showAvatar && (\n                    <div className=\"flex items-center mb-1\">\n                      <img\n                        src={\n                          msg.sender.profileImage ||\n                          \"/assets/basicProfilePic.png\"\n                        }\n                        alt={msg.sender.name}\n                        className=\"w-8 h-8 rounded-full mr-2\"\n                      />\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        {msg.sender.name}\n                      </span>\n                    </div>\n                  )}\n\n                  {/* 메시지 영역 */}\n                  <div className=\"flex items-end ml-10\">\n                    <div className=\"flex items-end\">\n                      {msg.messageType === \"IMAGE\" &&\n                        msg.imageUrls &&\n                        msg.imageUrls.length > 0 ? (\n                        <div className=\"flex flex-wrap gap-1\">\n                          {msg.imageUrls.map((url, imgIdx) => (\n                            <img\n                              key={imgIdx}\n                              src={url}\n                              alt=\"채팅 이미지\"\n                              className=\"max-w-xs max-h-xs h-auto rounded-lg object-contain\"\n                            />\n                          ))}\n                        </div>\n                      ) : msg.messageType === \"AUDIO\" && msg.audioUrl ? (\n                        <VoiceMessage\n                          audioUrl={msg.audioUrl}\n                          duration={msg.audioDuration}\n                          isMine={false}\n                        />\n                      ) : (\n                        <div className=\"bg-pink-200 text-gray-900 px-4 py-2 rounded-lg rounded-tl-none whitespace-pre-wrap\">\n                          {msg.message}\n                        </div>\n                      )}\n                      <span className=\"ml-2 text-xs text-gray-400 mb-1\">\n                        {formatTimestamp(msg.sentAt)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* 내 메시지 (오른쪽) */}\n              {isMine && (\n                <div className=\"flex items-end w-full justify-end\">\n                  {/* 메시지 영역 */}\n                  <div className=\"flex flex-col max-w-[70%] items-end\">\n                    <div className=\"flex items-end\">\n                      <span className=\"mr-2 text-xs text-gray-400 mb-1\">\n                        {formatTimestamp(msg.sentAt)}\n                      </span>\n                      {msg.messageType === \"IMAGE\" &&\n                        msg.imageUrls &&\n                        msg.imageUrls.length > 0 ? (\n                        <div className=\"flex flex-wrap gap-1\">\n                          {msg.imageUrls.map((url, imgIdx) => (\n                            <img\n                              key={imgIdx}\n                              src={url}\n                              alt=\"채팅 이미지\"\n                              className=\"max-w-xs max-h-xs h-auto rounded-lg object-contain\"\n                            />\n                          ))}\n                        </div>\n                      ) : msg.messageType === \"AUDIO\" && msg.audioUrl ? (\n                        <VoiceMessage\n                          audioUrl={msg.audioUrl}\n                          duration={msg.audioDuration}\n                          isMine={true}\n                        />\n                      ) : (\n                        <div className=\"bg-[#00C471] text-white px-4 py-2 rounded-lg rounded-tr-none whitespace-pre-wrap\">\n                          {msg.message}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* 프로필 사진 영역 - 항상 유지 */}\n                  <div className=\"w-10 flex-shrink-0 ml-2\">\n                    {showAvatar && (\n                      <img\n                        src={\n                          msg.sender.profileImage ||\n                          \"/assets/basicProfilePic.png\"\n                        }\n                        alt={msg.sender.name}\n                        className=\"w-8 h-8 rounded-full\"\n                      />\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/ChatRoomList.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/ChatWindow.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentUserId'. Either include it or remove the dependency array.","line":127,"column":6,"nodeType":"ArrayExpression","endLine":127,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [isRoomMissing, room.roomId, onNewMessage, currentUserId]","fix":{"range":[3936,3979],"text":"[isRoomMissing, room.roomId, onNewMessage, currentUserId]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleKeyDown' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":245,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleKeyDown"},"fix":{"range":[6932,7095],"text":""},"desc":"Remove unused variable 'handleKeyDown'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport {\n  fetchChatHistory,\n  initStompClient,\n  uploadChatImages,\n  leaveChatRoom,\n  sendTypingStatus,\n  subscribeToTyping,\n  unsubscribeFromTyping,\n  markMessagesAsRead,\n} from \"../../api/chat\";\nimport ChatHeader from \"./ChatHeader\";\nimport ChatMessageList from \"./ChatMessageList\";\nimport ChatInputArea from \"./ChatInputArea\";\nimport TypingIndicator from \"./TypingIndicator\";\nimport MessageSearch from \"./MessageSearch\";\nimport { useAlert } from \"../../hooks/useAlert\";\n\nexport default function ChatWindow({\n  room,\n  onNewMessage,\n  currentUserId,\n  onLeaveRoom,\n}) {\n  // Guard early return without affecting hooks order\n  const isRoomMissing = !room;\n  const { showError } = useAlert();\n\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [selectedImageFiles, setSelectedImageFiles] = useState([]);\n  const [imagePreviews, setImagePreviews] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [highlightedMessageId, setHighlightedMessageId] = useState(null);\n  const clientRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  const typingSubscriptionRef = useRef(null);\n  const isTypingSentRef = useRef(false);\n  const messagesContainerRef = useRef(null);\n\n  useEffect(() => {\n    if (isRoomMissing) return undefined;\n    \n    const initializeChatRoom = async () => {\n      try {\n        // 채팅 히스토리 로드\n        const history = await fetchChatHistory(room.roomId);\n        setMessages(history);\n\n        // WebSocket 클라이언트 초기화\n        clientRef.current = await initStompClient(\n          room.roomId,\n          (msg) => {\n            setMessages((prev) => [...prev, msg]);\n            onNewMessage({\n              roomId: room.roomId,\n              message: msg.message,\n              sentAt: msg.sentAt,\n            });\n          },\n          (status, data) => {\n            console.log(`채팅방 ${room.roomId} WebSocket 상태:`, status, data);\n          },\n          (type, error) => {\n            console.error(`채팅방 ${room.roomId} WebSocket 에러:`, type, error);\n          }\n        );\n\n        // 타이핑 상태 구독\n        typingSubscriptionRef.current = subscribeToTyping(room.roomId, (typingData) => {\n          const { userId, userName, userProfileImage, isTyping } = typingData;\n          \n          // 본인의 타이핑 상태는 무시\n          if (String(userId) === String(currentUserId)) {\n            return;\n          }\n          \n          setTypingUsers((prev) => {\n            if (isTyping) {\n              // 이미 있는 사용자인지 확인\n              const exists = prev.find(user => String(user.userId) === String(userId));\n              if (!exists) {\n                return [...prev, {\n                  userId,\n                  name: userName,\n                  profileImage: userProfileImage\n                }];\n              }\n              return prev;\n            } else {\n              // 타이핑 중단 시 목록에서 제거\n              return prev.filter(user => String(user.userId) !== String(userId));\n            }\n          });\n        });\n\n        // 채팅방 입장 시 메시지를 읽음 처리\n        try {\n          await markMessagesAsRead(room.roomId);\n        } catch (error) {\n          console.error(\"메시지 읽음 처리 실패:\", error);\n        }\n      } catch (error) {\n        console.error(\"채팅방 초기화 실패:\", error);\n      }\n    };\n\n    initializeChatRoom();\n\n    return () => {\n      if (clientRef.current?.disconnect) {\n        clientRef.current.disconnect();\n      }\n      if (typingSubscriptionRef.current) {\n        unsubscribeFromTyping(typingSubscriptionRef.current);\n      }\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      // 타이핑 상태 초기화\n      setTypingUsers([]);\n      isTypingSentRef.current = false;\n    };\n  }, [isRoomMissing, room?.roomId, onNewMessage]);\n\n  // 타이핑 상태 관리 함수\n  const handleTypingStart = useCallback(() => {\n    if (!isTypingSentRef.current) {\n      sendTypingStatus(room.roomId, true);\n      isTypingSentRef.current = true;\n    }\n\n    // 기존 타임아웃 클리어\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // 3초 후 타이핑 중단 신호 전송\n    typingTimeoutRef.current = setTimeout(() => {\n      sendTypingStatus(room.roomId, false);\n      isTypingSentRef.current = false;\n    }, 3000);\n  }, [room.roomId]);\n\n  const handleTypingStop = useCallback(() => {\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n    \n    if (isTypingSentRef.current) {\n      sendTypingStatus(room.roomId, false);\n      isTypingSentRef.current = false;\n    }\n  }, [room.roomId]);\n\n  // 메시지 하이라이트 및 스크롤 이동\n  const handleHighlightMessage = useCallback((message) => {\n    setHighlightedMessageId(message.messageId);\n    \n    // 3초 후 하이라이트 해제\n    setTimeout(() => {\n      setHighlightedMessageId(null);\n    }, 3000);\n\n    // 해당 메시지로 스크롤\n    setTimeout(() => {\n      const messageElement = document.querySelector(`[data-message-id=\"${message.messageId}\"]`);\n      if (messageElement && messagesContainerRef.current) {\n        messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    }, 100);\n  }, []);\n\n  // 키보드 단축키 처리\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      // Ctrl+F 또는 Cmd+F로 검색창 열기\n      if ((e.ctrlKey || e.metaKey) && e.key === 'f') {\n        e.preventDefault();\n        setIsSearchOpen(true);\n      }\n      // ESC로 검색창 닫기\n      if (e.key === 'Escape' && isSearchOpen) {\n        setIsSearchOpen(false);\n        setHighlightedMessageId(null);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isSearchOpen]);\n\n  const handleLeaveRoom = async () => {\n    try {\n      await leaveChatRoom(room.roomId);\n      if (onLeaveRoom) {\n        onLeaveRoom();\n      }\n    } catch (error) {\n      console.error(\"채팅방 나가기 실패:\", error);\n      showError(\"채팅방 나가기에 실패했습니다.\");\n    }\n  };\n\n  const sendMessage = async (text, images, audioData) => {\n    // 타이핑 상태 중단\n    handleTypingStop();\n    \n    let finalImageUrls = [];\n    if (images.length) {\n      try {\n        finalImageUrls = await uploadChatImages(room.roomId, images);\n      } catch {\n        showError(\"이미지 업로드 실패\");\n        return;\n      }\n    }\n\n    clientRef.current.send(\n      \"/pub/chat/message\",\n      {},\n      JSON.stringify({\n        roomId: room.roomId,\n        message: text.trim(),\n        imageUrls: finalImageUrls,\n        audioData: audioData, // Base64 Data URL\n        messageType: audioData\n          ? \"AUDIO\"\n          : finalImageUrls.length\n            ? \"IMAGE\"\n            : text.trim()\n              ? \"TEXT\"\n              : \"TEXT\",\n      })\n    );\n\n    setInput(\"\");\n    setSelectedImageFiles([]);\n    setImagePreviews([]);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage(input, selectedImageFiles, null);\n    }\n  };\n\n  const handleFileChange = (e) => {\n    const files = Array.from(e.target.files);\n    setSelectedImageFiles(files);\n    setImagePreviews(files.map((f) => URL.createObjectURL(f)));\n    e.target.value = \"\";\n  };\n\n  const removeImagePreview = (idx) => {\n    setSelectedImageFiles((prev) => prev.filter((_, i) => i !== idx));\n    setImagePreviews((prev) => prev.filter((_, i) => i !== idx));\n  };\n\n  if (isRoomMissing) return null;\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg p-8 flex flex-col h-full w-full relative\">\n      {/* 메시지 검색 */}\n      <MessageSearch\n        roomId={room.roomId}\n        isOpen={isSearchOpen}\n        onClose={() => {\n          setIsSearchOpen(false);\n          setHighlightedMessageId(null);\n        }}\n        messages={messages}\n        onHighlightMessage={handleHighlightMessage}\n      />\n      \n      <ChatHeader\n        room={room}\n        currentUserId={currentUserId}\n        onLeaveRoom={handleLeaveRoom}\n        onSearchToggle={() => setIsSearchOpen(!isSearchOpen)}\n      />\n\n      <div className=\"border-b border-gray-200 mx-6 my-4\" />\n\n      <div className=\"flex-1 min-h-0 flex flex-col\">\n        <ChatMessageList\n          messages={messages}\n          currentUserId={currentUserId}\n          highlightedMessageId={highlightedMessageId}\n          containerRef={messagesContainerRef}\n          formatTimestamp={(dateStr) => {\n            const date = new Date(dateStr);\n            const now = new Date();\n            const diffInHours = (now - date) / (1000 * 60 * 60);\n\n            if (diffInHours < 24) {\n              return date.toLocaleTimeString(\"ko-KR\", {\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n                hour12: false,\n              });\n            } else {\n              return date.toLocaleDateString(\"ko-KR\", {\n                month: \"short\",\n                day: \"numeric\",\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n                hour12: false,\n              });\n            }\n          }}\n        />\n        \n        {/* 타이핑 인디케이터 */}\n        <TypingIndicator typingUsers={typingUsers} />\n      </div>\n\n      <ChatInputArea\n        input={input}\n        setInput={setInput}\n        sendMessage={sendMessage}\n        showEmojiPicker={showEmojiPicker}\n        setShowEmojiPicker={setShowEmojiPicker}\n        selectedImageFiles={selectedImageFiles}\n        imagePreviews={imagePreviews}\n        handleFileChange={handleFileChange}\n        removeImagePreview={removeImagePreview}\n        fileInputRef={fileInputRef}\n        onTypingStart={handleTypingStart}\n        onTypingStop={handleTypingStop}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/CreateChatRoomModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/EmptyPlaceholder.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/ImageUploadModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/MessageSearch.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'performSearch'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [keyword, performSearch, roomId]","fix":{"range":[1234,1251],"text":"[keyword, performSearch, roomId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Search, X, ChevronUp, ChevronDown } from 'lucide-react';\nimport { searchChatMessages } from '../../api/chat';\n\nconst MessageSearch = ({ roomId, isOpen, onClose, messages, onHighlightMessage }) => {\n  const [keyword, setKeyword] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const inputRef = useRef(null);\n  const searchTimeoutRef = useRef(null);\n\n  // 검색창이 열릴 때 포커스\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  // 키워드 변경 시 검색 실행 (디바운싱)\n  useEffect(() => {\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    if (keyword.trim().length >= 2) {\n      searchTimeoutRef.current = setTimeout(() => {\n        performSearch();\n      }, 300);\n    } else {\n      setSearchResults([]);\n      setCurrentIndex(-1);\n      setTotalResults(0);\n    }\n\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [keyword, roomId]);\n\n  const performSearch = async () => {\n    if (!keyword.trim() || !roomId) return;\n\n    setIsLoading(true);\n    try {\n      // 서버 검색\n      const serverResults = await searchChatMessages(roomId, keyword.trim());\n      \n      // 로컬 메시지에서도 검색 (실시간 메시지)\n      const localResults = messages.filter(msg => \n        msg.message && msg.message.toLowerCase().includes(keyword.toLowerCase())\n      );\n\n      // 결과 합치기 (중복 제거)\n      const allResults = [...serverResults.content];\n      localResults.forEach(local => {\n        if (!allResults.find(server => server.messageId === local.messageId)) {\n          allResults.push(local);\n        }\n      });\n\n      // 시간순 정렬 (최신순)\n      allResults.sort((a, b) => new Date(b.sentAt) - new Date(a.sentAt));\n\n      setSearchResults(allResults);\n      setTotalResults(allResults.length);\n      setCurrentIndex(allResults.length > 0 ? 0 : -1);\n\n      // 첫 번째 결과로 이동\n      if (allResults.length > 0) {\n        onHighlightMessage(allResults[0]);\n      }\n    } catch (error) {\n      console.error('검색 실패:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const navigateResult = (direction) => {\n    if (searchResults.length === 0) return;\n\n    let newIndex;\n    if (direction === 'up') {\n      newIndex = currentIndex > 0 ? currentIndex - 1 : searchResults.length - 1;\n    } else {\n      newIndex = currentIndex < searchResults.length - 1 ? currentIndex + 1 : 0;\n    }\n\n    setCurrentIndex(newIndex);\n    onHighlightMessage(searchResults[newIndex]);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Escape') {\n      onClose();\n    } else if (e.key === 'Enter') {\n      e.preventDefault();\n      if (e.shiftKey) {\n        navigateResult('up');\n      } else {\n        navigateResult('down');\n      }\n    }\n  };\n\n  const formatTimestamp = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString('ko-KR', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    });\n  };\n\n  const highlightKeyword = (text, keyword) => {\n    if (!keyword) return text;\n    \n    const regex = new RegExp(`(${keyword})`, 'gi');\n    return text.split(regex).map((part, index) => \n      regex.test(part) ? (\n        <mark key={index} className=\"bg-yellow-200 text-gray-900 px-1 rounded\">\n          {part}\n        </mark>\n      ) : part\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"absolute top-0 left-0 right-0 z-10 bg-white border-b border-gray-200 shadow-lg\">\n      <div className=\"p-4\">\n        {/* 검색 입력창 */}\n        <div className=\"flex items-center gap-2 mb-3\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={keyword}\n              onChange={(e) => setKeyword(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder=\"메시지 검색...\"\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#00C471] focus:border-transparent\"\n            />\n            {isLoading && (\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                <div className=\"w-4 h-4 border-2 border-gray-300 border-t-[#00C471] rounded-full animate-spin\"></div>\n              </div>\n            )}\n          </div>\n          \n          {/* 네비게이션 버튼들 */}\n          <div className=\"flex items-center gap-1\">\n            <span className=\"text-sm text-gray-500 px-2\">\n              {totalResults > 0 ? `${currentIndex + 1}/${totalResults}` : '0'}\n            </span>\n            <button\n              onClick={() => navigateResult('up')}\n              disabled={searchResults.length === 0}\n              className=\"p-1 rounded hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <ChevronUp className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={() => navigateResult('down')}\n              disabled={searchResults.length === 0}\n              className=\"p-1 rounded hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <ChevronDown className=\"w-4 h-4\" />\n            </button>\n          </div>\n          \n          <button\n            onClick={onClose}\n            className=\"p-1 rounded hover:bg-gray-100 text-gray-500\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n\n        {/* 검색 결과 미리보기 */}\n        {keyword.length >= 2 && searchResults.length > 0 && (\n          <div className=\"max-h-32 overflow-y-auto bg-gray-50 rounded-lg\">\n            {searchResults.slice(0, 5).map((result, index) => (\n              <button\n                key={result.messageId}\n                onClick={() => {\n                  setCurrentIndex(index);\n                  onHighlightMessage(result);\n                }}\n                className={`w-full text-left p-2 hover:bg-gray-100 border-b border-gray-200 last:border-b-0 ${\n                  index === currentIndex ? 'bg-blue-50 border-blue-200' : ''\n                }`}\n              >\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-sm font-medium text-gray-700\">\n                    {result.sender.name}\n                  </span>\n                  <span className=\"text-xs text-gray-500\">\n                    {formatTimestamp(result.sentAt)}\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 truncate\">\n                  {highlightKeyword(result.message, keyword)}\n                </p>\n              </button>\n            ))}\n            {searchResults.length > 5 && (\n              <div className=\"p-2 text-center text-xs text-gray-500\">\n                +{searchResults.length - 5}개 더\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 검색 도움말 */}\n        {keyword.length === 0 && (\n          <div className=\"text-sm text-gray-500\">\n            <p>메시지를 검색하세요. (최소 2글자)</p>\n            <p className=\"text-xs mt-1\">Enter: 다음 결과, Shift+Enter: 이전 결과, Esc: 닫기</p>\n          </div>\n        )}\n\n        {keyword.length >= 2 && searchResults.length === 0 && !isLoading && (\n          <div className=\"text-sm text-gray-500 text-center py-4\">\n            검색 결과가 없습니다.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MessageSearch;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/Sidebar.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/TypingIndicator.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/VoiceMessage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'animationRef' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":10,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"animationRef"},"fix":{"range":[452,486],"text":""},"desc":"Remove unused variable 'animationRef'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from 'react';\nimport { Play, Pause, Mic } from 'lucide-react';\n\nexport default function VoiceMessage({ audioUrl, duration, isMine }) {\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [totalDuration, setTotalDuration] = useState(duration || 0);\n    const [waveformData, setWaveformData] = useState([]);\n    const audioRef = useRef(null);\n    const animationRef = useRef(null);\n\n    useEffect(() => {\n        // 더미 파형 데이터 생성 (실제로는 오디오 분석 필요)\n        const bars = Array.from({ length: 40 }, () => Math.random() * 0.8 + 0.2);\n        setWaveformData(bars);\n    }, []);\n\n    useEffect(() => {\n        const audio = audioRef.current;\n        if (!audio) return;\n\n        const handleLoadedMetadata = () => {\n            setTotalDuration(audio.duration);\n        };\n\n        const handleTimeUpdate = () => {\n            setCurrentTime(audio.currentTime);\n        };\n\n        const handleEnded = () => {\n            setIsPlaying(false);\n            setCurrentTime(0);\n        };\n\n        audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n        audio.addEventListener('timeupdate', handleTimeUpdate);\n        audio.addEventListener('ended', handleEnded);\n\n        return () => {\n            audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n            audio.removeEventListener('timeupdate', handleTimeUpdate);\n            audio.removeEventListener('ended', handleEnded);\n        };\n    }, []);\n\n    const togglePlay = () => {\n        const audio = audioRef.current;\n        if (!audio) return;\n\n        if (isPlaying) {\n            audio.pause();\n            setIsPlaying(false);\n        } else {\n            audio.play();\n            setIsPlaying(true);\n        }\n    };\n\n    const formatTime = (seconds) => {\n        if (!seconds || isNaN(seconds)) return '0:00';\n        const mins = Math.floor(seconds / 60);\n        const secs = Math.floor(seconds % 60);\n        return `${mins}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    const handleWaveformClick = (e) => {\n        const audio = audioRef.current;\n        if (!audio || !totalDuration) return;\n\n        const rect = e.currentTarget.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const percentage = x / rect.width;\n        const newTime = percentage * totalDuration;\n\n        audio.currentTime = newTime;\n        setCurrentTime(newTime);\n    };\n\n    const progressPercentage = totalDuration ? (currentTime / totalDuration) * 100 : 0;\n\n    return (\n        <div className={`flex items-center gap-3 p-3 rounded-lg ${isMine ? 'bg-[#00C471]' : 'bg-[#FFE4EC]'\n            } min-w-[280px] max-w-[320px]`}>\n            {/* Play/Pause Button */}\n            <button\n                onClick={togglePlay}\n                className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${isMine\n                        ? 'bg-white/20 hover:bg-white/30 text-white'\n                        : 'bg-gray-800/10 hover:bg-gray-800/20 text-gray-800'\n                    } transition-colors`}\n            >\n                {isPlaying ? (\n                    <Pause className=\"w-5 h-5\" />\n                ) : (\n                    <Play className=\"w-5 h-5 ml-0.5\" />\n                )}\n            </button>\n\n            {/* Waveform */}\n            <div className=\"flex-1 flex flex-col gap-1\">\n                <div\n                    className=\"relative h-10 flex items-center cursor-pointer\"\n                    onClick={handleWaveformClick}\n                >\n                    {/* Waveform bars */}\n                    <div className=\"absolute inset-0 flex items-center gap-[2px]\">\n                        {waveformData.map((height, index) => {\n                            const barPercentage = (index / waveformData.length) * 100;\n                            const isActive = barPercentage <= progressPercentage;\n\n                            return (\n                                <div\n                                    key={index}\n                                    className={`flex-1 rounded-full transition-all duration-75 ${isMine\n                                            ? isActive ? 'bg-white' : 'bg-white/40'\n                                            : isActive ? 'bg-gray-800' : 'bg-gray-800/30'\n                                        }`}\n                                    style={{ height: `${height * 100}%` }}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n\n                {/* Time */}\n                <div className={`flex items-center justify-between text-xs ${isMine ? 'text-white/80' : 'text-gray-600'\n                    }`}>\n                    <span>{formatTime(currentTime)}</span>\n                    <span>{formatTime(totalDuration)}</span>\n                </div>\n            </div>\n\n            {/* Voice icon */}\n            <div className={`flex-shrink-0 ${isMine ? 'text-white/60' : 'text-gray-600'\n                }`}>\n                <Mic className=\"w-4 h-4\" />\n            </div>\n\n            {/* Hidden audio element */}\n            <audio\n                ref={audioRef}\n                src={audioUrl}\n                preload=\"metadata\"\n                crossOrigin=\"anonymous\"\n            />\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/chat/VoiceRecorder.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/error-boundary-helpers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/profile/LanguageLevelProgress.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/profile/WeeklyActivityChart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/AccessibleButton.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/AccessibleInput.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/AlertModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/ConfirmModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/CustomConfirm.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getIconColor' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"getIconColor"},"fix":{"range":[418,610],"text":""},"desc":"Remove unused variable 'getIconColor'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { X } from 'lucide-react';\n\n/**\n * 커스텀 확인 팝업 컴포넌트\n */\nconst CustomConfirm = ({ \n  isOpen, \n  onClose, \n  onConfirm, \n  title = \"확인\",\n  message, \n  confirmText = \"확인\", \n  cancelText = \"취소\",\n  type = \"default\" // default, warning, success\n}) => {\n  if (!isOpen) return null;\n\n  const handleBackdropClick = (e) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const getIconColor = () => {\n    switch (type) {\n      case 'warning': return 'text-amber-500';\n      case 'success': return 'text-green-500';\n      default: return 'text-blue-500';\n    }\n  };\n\n  const getIcon = () => {\n    switch (type) {\n      case 'warning': return '⚠️';\n      case 'success': return '✅';\n      default: return '❓';\n    }\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-50 flex items-center justify-center p-4 overlay-soft\"\n      onClick={handleBackdropClick}\n    >\n      {/* 모달 컨텐츠 */}\n      <div className=\"bg-white rounded-[20px] shadow-2xl w-full max-w-[320px] mx-4 animate-in fade-in-0 zoom-in-95 duration-200\">\n        {/* 헤더 */}\n        <div className=\"flex items-center justify-between p-6 pb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <span className=\"text-2xl\">{getIcon()}</span>\n            <h3 className=\"text-[18px] font-bold text-[#111111]\">{title}</h3>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-1 hover:bg-gray-100 rounded-full transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-[#929292]\" />\n          </button>\n        </div>\n        \n        {/* 메시지 */}\n        <div className=\"px-6 pb-6\">\n          <p className=\"text-[16px] text-[#606060] leading-[24px]\">\n            {message}\n          </p>\n        </div>\n        \n        {/* 버튼들 */}\n        <div className=\"flex space-x-3 p-6 pt-0\">\n          <button\n            onClick={onClose}\n            className=\"flex-1 py-3 px-4 bg-[#F8F9FA] text-[#606060] text-[16px] font-medium rounded-[10px] hover:bg-[#E9ECEF] transition-colors duration-200\"\n          >\n            {cancelText}\n          </button>\n          <button\n            onClick={onConfirm}\n            className=\"flex-1 py-3 px-4 bg-[#00C471] text-white text-[16px] font-bold rounded-[10px] hover:bg-[#00B267] transition-colors duration-200\"\n          >\n            {confirmText}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomConfirm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/ErrorMessage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/KeyboardNavigableList.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'items'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [items, items.length]","fix":{"range":[1244,1258],"text":"[items, items.length]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport { useFocusManagement } from '../../hooks/useKeyboardNavigation';\nimport { createListItemAriaProps, createKeyboardHint } from '../../utils/accessibility';\n\n/**\n * 키보드 네비게이션 가능한 리스트 컴포넌트\n * @param {Object} props\n * @param {Array} props.items - 리스트 아이템 배열\n * @param {Function} props.renderItem - 아이템 렌더링 함수 (item, index, isActive) => ReactNode\n * @param {Function} props.onItemSelect - 아이템 선택 핸들러\n * @param {Function} props.onItemActivate - 아이템 활성화 핸들러 (Enter/Space)\n * @param {number} props.initialIndex - 초기 활성 인덱스\n * @param {boolean} props.loop - 순환 네비게이션 여부\n * @param {boolean} props.autoFocus - 자동 포커스 여부\n * @param {string} props.className - 추가 CSS 클래스\n * @param {string} props.itemClassName - 아이템 CSS 클래스\n */\nconst KeyboardNavigableList = ({\n  items = [],\n  renderItem,\n  onItemSelect,\n  onItemActivate,\n  initialIndex = 0,\n  loop = true,\n  autoFocus = false,\n  className = '',\n  itemClassName = ''\n}) => {\n  const [activeIndex, setActiveIndex] = useState(initialIndex);\n  const listRef = useRef(null);\n  const itemRefs = useRef([]);\n\n  // 아이템 ref 배열 초기화\n  useEffect(() => {\n    itemRefs.current = items.map((_, index) => itemRefs.current[index] || React.createRef());\n  }, [items.length]);\n\n  // 포커스 관리\n  const {\n    focusNext,\n    focusPrevious,\n    focusIndex,\n    focusFirst,\n    focusLast\n  } = useFocusManagement({\n    focusableElements: itemRefs.current,\n    initialIndex,\n    loop,\n    autoFocus\n  });\n\n  // 키보드 이벤트 처리\n  const handleKeyDown = (e) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        const nextIndex = loop \n          ? (activeIndex + 1) % items.length\n          : Math.min(activeIndex + 1, items.length - 1);\n        setActiveIndex(nextIndex);\n        focusNext();\n        onItemSelect?.(items[nextIndex], nextIndex);\n        break;\n      }\n        \n      case 'ArrowUp': {\n        e.preventDefault();\n        const prevIndex = loop \n          ? (activeIndex - 1 + items.length) % items.length\n          : Math.max(activeIndex - 1, 0);\n        setActiveIndex(prevIndex);\n        focusPrevious();\n        onItemSelect?.(items[prevIndex], prevIndex);\n        break;\n      }\n        \n      case 'Home': {\n        e.preventDefault();\n        setActiveIndex(0);\n        focusFirst();\n        onItemSelect?.(items[0], 0);\n        break;\n      }\n        \n      case 'End': {\n        e.preventDefault();\n        const lastIndex = items.length - 1;\n        setActiveIndex(lastIndex);\n        focusLast();\n        onItemSelect?.(items[lastIndex], lastIndex);\n        break;\n      }\n        \n      case 'Enter': \n      case ' ': {\n        e.preventDefault();\n        onItemActivate?.(items[activeIndex], activeIndex);\n        break;\n      }\n    }\n  };\n\n  // 마우스 클릭 처리\n  const handleItemClick = (item, index) => {\n    setActiveIndex(index);\n    focusIndex(index);\n    onItemSelect?.(item, index);\n    onItemActivate?.(item, index);\n  };\n\n  // 마우스 호버 처리\n  const handleItemMouseEnter = (index) => {\n    setActiveIndex(index);\n  };\n\n  if (!items.length) {\n    return (\n      <div \n        className={`text-center py-8 text-gray-500 ${className}`}\n        role=\"status\"\n      >\n        표시할 항목이 없습니다\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={listRef}\n      className={`focus:outline-none ${className}`}\n      role=\"listbox\"\n      tabIndex={0}\n      onKeyDown={handleKeyDown}\n      aria-label={`목록, ${createKeyboardHint('↑ ↓', '항목 이동')}, ${createKeyboardHint('Enter', '선택')}`}\n      aria-activedescendant={`list-item-${activeIndex}`}\n    >\n      {items.map((item, index) => {\n        const isActive = index === activeIndex;\n        const listItemProps = createListItemAriaProps(index + 1, items.length);\n        \n        return (\n          <div\n            key={index}\n            ref={itemRefs.current[index]}\n            id={`list-item-${index}`}\n            className={`cursor-pointer transition-colors duration-150 focus:outline-none ${\n              isActive \n                ? 'bg-green-50 border-green-500 ring-2 ring-green-500 ring-opacity-50' \n                : 'hover:bg-gray-50'\n            } ${itemClassName}`}\n            tabIndex={-1}\n            onClick={() => handleItemClick(item, index)}\n            onMouseEnter={() => handleItemMouseEnter(index)}\n            {...listItemProps}\n            aria-selected={isActive}\n          >\n            {renderItem ? renderItem(item, index, isActive) : (\n              <div className=\"p-3\">\n                {typeof item === 'string' ? item : JSON.stringify(item)}\n              </div>\n            )}\n          </div>\n        );\n      })}\n      \n      {/* 스크린 리더용 사용법 안내 */}\n      <div className=\"sr-only\" aria-live=\"polite\">\n        {items.length}개 항목 중 {activeIndex + 1}번째가 선택되었습니다. \n        위아래 화살표 키로 이동하고 Enter 키로 선택하세요.\n      </div>\n    </div>\n  );\n};\n\n/**\n * 간단한 텍스트 리스트 컴포넌트\n */\nexport const SimpleTextList = ({ \n  items = [], \n  onItemSelect,\n  className = '',\n  ...props \n}) => {\n  return (\n    <KeyboardNavigableList\n      items={items}\n      renderItem={(item, index, isActive) => (\n        <div className={`p-3 ${isActive ? 'font-medium' : ''}`}>\n          {item}\n        </div>\n      )}\n      onItemSelect={onItemSelect}\n      className={className}\n      {...props}\n    />\n  );\n};\n\n/**\n * 카드 스타일 리스트 컴포넌트\n */\nexport const CardList = ({ \n  items = [], \n  onItemSelect,\n  renderCard,\n  className = '',\n  ...props \n}) => {\n  return (\n    <KeyboardNavigableList\n      items={items}\n      renderItem={(item, index, isActive) => (\n        <div className={`p-4 m-2 rounded-lg border ${\n          isActive \n            ? 'border-green-500 bg-green-50' \n            : 'border-gray-200 bg-white hover:border-gray-300'\n        }`}>\n          {renderCard ? renderCard(item, index, isActive) : (\n            <div className=\"text-sm text-gray-600\">\n              {typeof item === 'object' ? JSON.stringify(item) : item}\n            </div>\n          )}\n        </div>\n      )}\n      onItemSelect={onItemSelect}\n      className={className}\n      itemClassName=\"\"\n      {...props}\n    />\n  );\n};\n\nexport default KeyboardNavigableList;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/LazyBoundary.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/LazyImage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/LazyList.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'createKeyboardHint' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":4,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"createKeyboardHint"},"fix":{"range":[206,226],"text":""},"desc":"Remove unused variable 'createKeyboardHint'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useLazyList, useInfiniteScroll } from '../../hooks/useLazyLoading';\nimport { SkeletonLoader } from './LoadingSpinner';\nimport { createAriaLabel, createKeyboardHint } from '../../utils/accessibility';\n\n/**\n * 지연 로딩 리스트 컴포넌트\n * @param {Object} props\n * @param {Array} props.items - 리스트 아이템 배열\n * @param {Function} props.renderItem - 아이템 렌더링 함수\n * @param {number} props.initialCount - 초기 로딩 개수\n * @param {number} props.loadMoreCount - 추가 로딩 개수\n * @param {string} props.className - 추가 CSS 클래스\n * @param {string} props.itemClassName - 아이템 CSS 클래스\n * @param {string} props.emptyMessage - 빈 리스트 메시지\n * @param {boolean} props.showSkeleton - 스켈레톤 표시 여부\n */\nconst LazyList = ({\n  items = [],\n  renderItem,\n  initialCount = 10,\n  loadMoreCount = 5,\n  className = '',\n  itemClassName = '',\n  emptyMessage = '표시할 항목이 없습니다.',\n  showSkeleton = true\n}) => {\n  const {\n    visibleItems,\n    hasMore,\n    isLoading,\n    sentinelRef,\n    loadMore\n  } = useLazyList({\n    items,\n    initialCount,\n    loadMoreCount\n  });\n\n  // 빈 리스트 처리\n  if (items.length === 0) {\n    return (\n      <div className={`text-center py-8 text-gray-500 ${className}`}>\n        <div className=\"text-4xl mb-4\">📋</div>\n        <p>{emptyMessage}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={className}\n      role=\"list\"\n      aria-label={createAriaLabel(`리스트`, `${items.length}개 항목 중 ${visibleItems.length}개 표시됨`)}\n    >\n      {/* 리스트 아이템들 */}\n      {visibleItems.map((item, index) => (\n        <div\n          key={item.id || index}\n          className={`list-item ${itemClassName}`}\n          role=\"listitem\"\n          aria-setsize={items.length}\n          aria-posinset={index + 1}\n        >\n          {renderItem(item, index)}\n        </div>\n      ))}\n\n      {/* 무한 스크롤 센티넬 */}\n      {hasMore && (\n        <div ref={sentinelRef} className=\"py-4\">\n          {isLoading && showSkeleton ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 3 }).map((_, index) => (\n                <SkeletonLoader\n                  key={index}\n                  height=\"80px\"\n                  className=\"rounded-lg\"\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center\">\n              <button\n                onClick={loadMore}\n                disabled={isLoading}\n                className=\"px-4 py-2 text-green-600 hover:text-green-700 disabled:opacity-50\"\n                aria-label={`추가로 ${loadMoreCount}개 항목 로딩`}\n              >\n                {isLoading ? '로딩 중...' : '더 보기'}\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* 스크린 리더용 정보 */}\n      <div className=\"sr-only\" aria-live=\"polite\">\n        {visibleItems.length}개 항목이 표시되었습니다.\n        {hasMore && ` ${items.length - visibleItems.length}개 항목이 더 있습니다.`}\n      </div>\n    </div>\n  );\n};\n\n/**\n * 무한 스크롤 리스트 컴포넌트\n */\nexport const InfiniteScrollList = ({\n  items = [],\n  renderItem,\n  fetchNextPage,\n  hasNextPage = false,\n  isFetchingNextPage = false,\n  className = '',\n  itemClassName = '',\n  emptyMessage = '표시할 항목이 없습니다.',\n  loadingMessage = '추가 항목을 불러오는 중...',\n  showSkeleton = true\n}) => {\n  const { sentinelRef } = useInfiniteScroll(fetchNextPage, {\n    hasNextPage,\n    isFetchingNextPage\n  });\n\n  if (items.length === 0 && !isFetchingNextPage) {\n    return (\n      <div className={`text-center py-8 text-gray-500 ${className}`}>\n        <div className=\"text-4xl mb-4\">📋</div>\n        <p>{emptyMessage}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={className}\n      role=\"list\"\n      aria-label={createAriaLabel(`무한 스크롤 리스트`, `${items.length}개 항목`)}\n    >\n      {/* 리스트 아이템들 */}\n      {items.map((item, index) => (\n        <div\n          key={item.id || index}\n          className={`list-item ${itemClassName}`}\n          role=\"listitem\"\n          aria-setsize={-1} // 무한 리스트이므로 총 개수 알 수 없음\n          aria-posinset={index + 1}\n        >\n          {renderItem(item, index)}\n        </div>\n      ))}\n\n      {/* 로딩 센티넬 */}\n      {hasNextPage && (\n        <div ref={sentinelRef} className=\"py-4\">\n          {isFetchingNextPage ? (\n            showSkeleton ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }).map((_, index) => (\n                  <SkeletonLoader\n                    key={index}\n                    height=\"80px\"\n                    className=\"rounded-lg\"\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center text-gray-500\">\n                <div className=\"animate-spin w-6 h-6 border-2 border-green-500 border-t-transparent rounded-full mx-auto mb-2\"></div>\n                {loadingMessage}\n              </div>\n            )\n          ) : (\n            <div className=\"text-center\">\n              <div className=\"text-green-600 text-sm\">\n                스크롤하여 더 많은 항목을 로드하세요\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* 스크린 리더용 정보 */}\n      <div className=\"sr-only\" aria-live=\"polite\">\n        {items.length}개 항목이 표시되었습니다.\n        {isFetchingNextPage && ' 추가 항목을 불러오는 중입니다.'}\n        {!hasNextPage && items.length > 0 && ' 모든 항목을 표시했습니다.'}\n      </div>\n    </div>\n  );\n};\n\n/**\n * 가상화된 리스트 컴포넌트 (대용량 데이터용)\n */\nexport const VirtualizedList = ({\n  items = [],\n  renderItem,\n  itemHeight = 80,\n  containerHeight = 400,\n  overscan = 5,\n  className = ''\n}) => {\n  const [scrollTop, setScrollTop] = useState(0);\n  \n  const handleScroll = useCallback((e) => {\n    setScrollTop(e.target.scrollTop);\n  }, []);\n\n  // 화면에 표시될 아이템 계산\n  const visibleStart = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n  const visibleEnd = Math.min(\n    items.length,\n    Math.ceil((scrollTop + containerHeight) / itemHeight) + overscan\n  );\n  \n  const visibleItems = items.slice(visibleStart, visibleEnd);\n  const totalHeight = items.length * itemHeight;\n  const offsetY = visibleStart * itemHeight;\n\n  return (\n    <div\n      className={`overflow-auto ${className}`}\n      style={{ height: containerHeight }}\n      onScroll={handleScroll}\n      role=\"list\"\n      aria-label={createAriaLabel(`가상화된 리스트`, `${items.length}개 항목`)}\n    >\n      <div style={{ height: totalHeight, position: 'relative' }}>\n        <div style={{ transform: `translateY(${offsetY}px)` }}>\n          {visibleItems.map((item, index) => {\n            const actualIndex = visibleStart + index;\n            return (\n              <div\n                key={item.id || actualIndex}\n                style={{ height: itemHeight }}\n                className=\"list-item\"\n                role=\"listitem\"\n                aria-setsize={items.length}\n                aria-posinset={actualIndex + 1}\n              >\n                {renderItem(item, actualIndex)}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* 스크린 리더용 정보 */}\n      <div className=\"sr-only\" aria-live=\"polite\">\n        {items.length}개 항목 중 {visibleItems.length}개를 표시하고 있습니다.\n        현재 {visibleStart + 1}번째부터 {visibleEnd}번째 항목입니다.\n      </div>\n    </div>\n  );\n};\n\nexport default LazyList;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/LoadingSpinner.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/PullToRefresh.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/components/ui/SwipeNavigation.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useAchievementOverview.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useAlert.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useCustomConfirm.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useFileUpload.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'options' is assigned a value but never used.","line":9,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"options"},"fix":{"range":[201,213],"text":""},"desc":"Remove unused variable 'options'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":48,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":55,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\n/**\n * 파일 업로드를 위한 커스텀 훅\n * 실제 진행률 추적과 에러 처리를 포함\n * @param {Object} options - 업로드 옵션\n * @returns {Object} - 업로드 상태와 함수들\n */\nexport function useFileUpload(options = {}) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [uploadedFile, setUploadedFile] = useState(null);\n\n  const resetState = useCallback(() => {\n    setIsUploading(false);\n    setUploadProgress(0);\n    setError(null);\n    setUploadedFile(null);\n  }, []);\n\n  /**\n   * XMLHttpRequest를 사용한 실제 진행률 추적 업로드\n   * @param {string} url - 업로드 URL\n   * @param {FormData} formData - 폼 데이터\n   * @param {Object} headers - 추가 헤더\n   * @returns {Promise<Object>} - 업로드 결과\n   */\n  const uploadWithProgress = useCallback(async (url, formData, headers = {}) => {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      // 업로드 진행률 추적\n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          const progress = Math.round((event.loaded / event.total) * 100);\n          setUploadProgress(progress);\n        }\n      };\n\n      // 업로드 완료\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const result = JSON.parse(xhr.responseText);\n            setUploadProgress(100);\n            resolve(result);\n          } catch (e) {\n            reject(new Error('응답 파싱 실패'));\n          }\n        } else {\n          try {\n            const errorData = JSON.parse(xhr.responseText);\n            reject(new Error(errorData.message || `업로드 실패: ${xhr.status}`));\n          } catch (e) {\n            reject(new Error(`업로드 실패: ${xhr.status} ${xhr.statusText}`));\n          }\n        }\n      };\n\n      // 에러 처리\n      xhr.onerror = () => {\n        reject(new Error('네트워크 오류가 발생했습니다.'));\n      };\n\n      // 업로드 취소\n      xhr.onabort = () => {\n        reject(new Error('업로드가 취소되었습니다.'));\n      };\n\n      // 요청 시작\n      xhr.open('POST', url);\n      \n      // 헤더 설정\n      Object.entries(headers).forEach(([key, value]) => {\n        xhr.setRequestHeader(key, value);\n      });\n\n      xhr.send(formData);\n    });\n  }, []);\n\n  /**\n   * 파일 업로드 실행\n   * @param {string} url - 업로드 URL\n   * @param {FormData} formData - 폼 데이터\n   * @param {Object} config - 설정 옵션\n   * @returns {Promise<Object>} - 업로드 결과\n   */\n  const upload = useCallback(async (url, formData, config = {}) => {\n    const { \n      headers = {}, \n      onSuccess, \n      onError,\n      resetOnSuccess = true \n    } = config;\n\n    setIsUploading(true);\n    setUploadProgress(0);\n    setError(null);\n\n    try {\n      // Authorization 헤더 자동 추가\n      const token = localStorage.getItem('accessToken');\n      if (token && !headers.Authorization) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      const result = await uploadWithProgress(url, formData, headers);\n      \n      // 성공 처리\n      const responseData = result.data || result;\n      setUploadedFile(responseData);\n      \n      if (onSuccess) {\n        onSuccess(responseData);\n      }\n\n      if (resetOnSuccess) {\n        setTimeout(() => {\n          resetState();\n        }, 1000);\n      }\n\n      return responseData;\n    } catch (err) {\n      console.error('Upload error:', err);\n      setError(err.message || '업로드 중 오류가 발생했습니다.');\n      \n      if (onError) {\n        onError(err);\n      }\n\n      throw err;\n    } finally {\n      setIsUploading(false);\n    }\n  }, [uploadWithProgress, resetState]);\n\n  /**\n   * 여러 파일 동시 업로드\n   * @param {Array} uploadTasks - 업로드 작업 배열 [{url, formData, config}]\n   * @returns {Promise<Array>} - 업로드 결과 배열\n   */\n  const uploadMultiple = useCallback(async (uploadTasks) => {\n    setIsUploading(true);\n    setError(null);\n\n    try {\n      const results = [];\n      let completedCount = 0;\n\n      for (const task of uploadTasks) {\n        const { url, formData, config = {} } = task;\n        \n        try {\n          const result = await upload(url, formData, {\n            ...config,\n            resetOnSuccess: false,\n            onSuccess: (data) => {\n              completedCount++;\n              setUploadProgress(Math.round((completedCount / uploadTasks.length) * 100));\n              if (config.onSuccess) {\n                config.onSuccess(data);\n              }\n            }\n          });\n          results.push({ success: true, data: result });\n        } catch (error) {\n          results.push({ success: false, error: error.message });\n        }\n      }\n\n      return results;\n    } catch (err) {\n      setError(err.message || '다중 업로드 중 오류가 발생했습니다.');\n      throw err;\n    } finally {\n      setIsUploading(false);\n    }\n  }, [upload]);\n\n  return {\n    // 상태\n    isUploading,\n    uploadProgress,\n    error,\n    uploadedFile,\n\n    // 함수\n    upload,\n    uploadMultiple,\n    resetState,\n\n    // 유틸리티\n    setError,\n    setUploadProgress\n  };\n}\n\n/**\n * 이미지 업로드 전용 훅\n */\nexport function useImageUpload(options = {}) {\n  const uploadHook = useFileUpload(options);\n  const WORKERS_API_URL = import.meta.env.VITE_WORKERS_API_URL || 'https://workers.languagemate.kr';\n\n  const uploadImage = useCallback(async (file, type = 'general', metadata = {}) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('type', type);\n    \n    if (metadata && Object.keys(metadata).length > 0) {\n      formData.append('metadata', JSON.stringify(metadata));\n    }\n\n    return uploadHook.upload(`${WORKERS_API_URL}/api/v1/upload/image`, formData, options);\n  }, [uploadHook, WORKERS_API_URL, options]);\n\n  return {\n    ...uploadHook,\n    uploadImage\n  };\n}\n\n/**\n * 오디오 업로드 전용 훅\n */\nexport function useAudioUpload(options = {}) {\n  const uploadHook = useFileUpload(options);\n  const WORKERS_API_URL = import.meta.env.VITE_WORKERS_API_URL || 'https://workers.languagemate.kr';\n\n  const uploadAudio = useCallback(async (file, folder = 'general', metadata = {}) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('folder', folder);\n    \n    if (metadata && Object.keys(metadata).length > 0) {\n      formData.append('metadata', JSON.stringify(metadata));\n    }\n\n    return uploadHook.upload(`${WORKERS_API_URL}/api/v1/upload/audio`, formData, options);\n  }, [uploadHook, WORKERS_API_URL, options]);\n\n  return {\n    ...uploadHook,\n    uploadAudio\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useImagePreload.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useImageUpload.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useIntersectionObserver.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useKeyboardNavigation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useLLM.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useLazyLoading.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/usePreload.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/usePullToRefresh.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useRealtimeTranscription.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useSwipeGesture.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useTranslation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useWebRTC.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'closePeerConnection', 'createPeerConnection', 'handleAnswer', 'handleIceCandidate', 'handleOffer', and 'handleParticipantUpdate'. Either include them or remove the dependency array.","line":146,"column":6,"nodeType":"ArrayExpression","endLine":146,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [closePeerConnection, createPeerConnection, handleAnswer, handleIceCandidate, handleOffer, handleParticipantUpdate, roomId, userId]","fix":{"range":[4096,4112],"text":"[closePeerConnection, createPeerConnection, handleAnswer, handleIceCandidate, handleOffer, handleParticipantUpdate, roomId, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'handleConnectionFailure' and 'startStatsMonitoring'. Either include them or remove the dependency array.","line":215,"column":6,"nodeType":"ArrayExpression","endLine":215,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleConnectionFailure, startStatsMonitoring]","fix":{"range":[6024,6026],"text":"[handleConnectionFailure, startStatsMonitoring]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'peerId' is defined but never used.","line":303,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":303,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"peerId"},"fix":{"range":[8416,8424],"text":""},"desc":"Remove unused variable 'peerId'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'connectWebSocket', 'disconnect', and 'getUserMedia'. Either include them or remove the dependency array.","line":451,"column":6,"nodeType":"ArrayExpression","endLine":451,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [connectWebSocket, disconnect, getUserMedia, roomId, userId]","fix":{"range":[12363,12379],"text":"[connectWebSocket, disconnect, getUserMedia, roomId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef, useCallback } from 'react';\n\nconst WORKERS_API_URL = import.meta.env.VITE_WORKERS_API_URL || 'https://workers.languagemate.kr';\n\n// ICE서버 설정\nconst ICE_SERVERS = [\n  { urls: 'stun:stun.l.google.com:19302' },\n  { urls: 'stun:stun1.l.google.com:19302' },\n  // TURN 서버 (필요시 추가)\n];\n\nexport default function useWebRTC(roomId, userId) {\n  // 상태 관리\n  const [connectionState, setConnectionState] = useState('new'); // new, connecting, connected, disconnected, failed\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [isVideoEnabled, setIsVideoEnabled] = useState(true);\n  const [error, setError] = useState(null);\n  const [stats, setStats] = useState({\n    bitrate: 0,\n    packetLoss: 0,\n    latency: 0,\n    quality: 'good' // good, fair, poor\n  });\n\n  // Refs\n  const wsRef = useRef(null);\n  const peerConnectionsRef = useRef(new Map());\n  const localStreamRef = useRef(null);\n  const statsIntervalRef = useRef(null);\n\n  // 미디어 스트림 획득\n  const getUserMedia = useCallback(async (constraints = {}) => {\n    try {\n      const defaultConstraints = {\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        },\n        video: constraints.video !== false ? {\n          width: { ideal: 1280, max: 1920 },\n          height: { ideal: 720, max: 1080 },\n          frameRate: { ideal: 24, max: 30 }\n        } : false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        ...defaultConstraints,\n        ...constraints\n      });\n\n      localStreamRef.current = stream;\n      setLocalStream(stream);\n      setError(null);\n      \n      return stream;\n    } catch (err) {\n      console.error('Failed to get user media:', err);\n      setError(err.message);\n      \n      // 비디오 실패시 오디오만 시도\n      if (err.name === 'NotFoundError' && constraints.video !== false) {\n        return getUserMedia({ video: false });\n      }\n      \n      throw err;\n    }\n  }, []);\n\n  // WebSocket 연결\n  const connectWebSocket = useCallback(() => {\n    if (!roomId || !userId) return;\n\n    const wsUrl = `${WORKERS_API_URL.replace('https', 'wss')}/api/room/${roomId}/ws`;\n    const ws = new WebSocket(wsUrl);\n    \n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setConnectionState('connecting');\n      \n      // 사용자 정보 전송\n      ws.send(JSON.stringify({\n        type: 'join',\n        userId,\n        userName: userId // 실제로는 사용자 이름 전달\n      }));\n    };\n\n    ws.onmessage = async (event) => {\n      const message = JSON.parse(event.data);\n      \n      switch (message.type) {\n        case 'connected':\n          console.log('Joined room:', message.roomData);\n          break;\n          \n        case 'participant-joined':\n          console.log('New participant:', message.participant);\n          await createPeerConnection(message.participant.id, true);\n          break;\n          \n        case 'participant-left':\n          console.log('Participant left:', message.participantId);\n          closePeerConnection(message.participantId);\n          break;\n          \n        case 'offer':\n          await handleOffer(message.from, message.data);\n          break;\n          \n        case 'answer':\n          await handleAnswer(message.from, message.data);\n          break;\n          \n        case 'ice-candidate':\n          await handleIceCandidate(message.from, message.data);\n          break;\n          \n        case 'participant-updated':\n          handleParticipantUpdate(message.participant);\n          break;\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setError('연결 오류가 발생했습니다');\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setConnectionState('disconnected');\n      \n      // 재연결 시도\n      setTimeout(() => {\n        if (wsRef.current === ws) {\n          connectWebSocket();\n        }\n      }, 3000);\n    };\n\n    wsRef.current = ws;\n    return ws;\n  }, [roomId, userId]);\n\n  // Peer Connection 생성\n  const createPeerConnection = useCallback(async (peerId, createOffer = false) => {\n    console.log('Creating peer connection for:', peerId);\n    \n    const pc = new RTCPeerConnection({ iceServers: ICE_SERVERS });\n    peerConnectionsRef.current.set(peerId, pc);\n\n    // 로컬 스트림 추가\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => {\n        pc.addTrack(track, localStreamRef.current);\n      });\n    }\n\n    // ICE 후보 처리\n    pc.onicecandidate = (event) => {\n      if (event.candidate && wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'ice-candidate',\n          data: {\n            to: peerId,\n            signal: event.candidate\n          }\n        }));\n      }\n    };\n\n    // 원격 스트림 처리\n    pc.ontrack = (event) => {\n      console.log('Received remote track from:', peerId);\n      setRemoteStreams(prev => new Map(prev).set(peerId, event.streams[0]));\n    };\n\n    // 연결 상태 모니터링\n    pc.onconnectionstatechange = () => {\n      console.log(`Connection state for ${peerId}:`, pc.connectionState);\n      \n      if (pc.connectionState === 'connected') {\n        setConnectionState('connected');\n        startStatsMonitoring(pc, peerId);\n      } else if (pc.connectionState === 'failed') {\n        handleConnectionFailure(peerId);\n      }\n    };\n\n    // Offer 생성 및 전송\n    if (createOffer) {\n      try {\n        const offer = await pc.createOffer();\n        await pc.setLocalDescription(offer);\n        \n        if (wsRef.current?.readyState === WebSocket.OPEN) {\n          wsRef.current.send(JSON.stringify({\n            type: 'offer',\n            data: {\n              to: peerId,\n              signal: offer\n            }\n          }));\n        }\n      } catch (err) {\n        console.error('Failed to create offer:', err);\n        setError('연결 생성 실패');\n      }\n    }\n\n    return pc;\n  }, []);\n\n  // Offer 처리\n  const handleOffer = useCallback(async (fromId, offer) => {\n    console.log('Handling offer from:', fromId);\n    \n    try {\n      const pc = await createPeerConnection(fromId, false);\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n      \n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n      \n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'answer',\n          data: {\n            to: fromId,\n            signal: answer\n          }\n        }));\n      }\n    } catch (err) {\n      console.error('Failed to handle offer:', err);\n      setError('연결 수락 실패');\n    }\n  }, [createPeerConnection]);\n\n  // Answer 처리\n  const handleAnswer = useCallback(async (fromId, answer) => {\n    console.log('Handling answer from:', fromId);\n    \n    const pc = peerConnectionsRef.current.get(fromId);\n    if (pc) {\n      try {\n        await pc.setRemoteDescription(new RTCSessionDescription(answer));\n      } catch (err) {\n        console.error('Failed to handle answer:', err);\n        setError('연결 설정 실패');\n      }\n    }\n  }, []);\n\n  // ICE Candidate 처리\n  const handleIceCandidate = useCallback(async (fromId, candidate) => {\n    const pc = peerConnectionsRef.current.get(fromId);\n    if (pc && candidate) {\n      try {\n        await pc.addIceCandidate(new RTCIceCandidate(candidate));\n      } catch (err) {\n        console.error('Failed to add ICE candidate:', err);\n      }\n    }\n  }, []);\n\n  // 참가자 업데이트 처리\n  const handleParticipantUpdate = useCallback((participant) => {\n    console.log('Participant updated:', participant);\n    // UI 업데이트 등 필요한 처리\n  }, []);\n\n  // 연결 실패 처리\n  const handleConnectionFailure = useCallback((peerId) => {\n    console.log('Connection failed for:', peerId);\n    \n    // ICE 재시작 시도\n    const pc = peerConnectionsRef.current.get(peerId);\n    if (pc) {\n      pc.restartIce();\n    }\n  }, []);\n\n  // Peer Connection 종료\n  const closePeerConnection = useCallback((peerId) => {\n    const pc = peerConnectionsRef.current.get(peerId);\n    if (pc) {\n      pc.close();\n      peerConnectionsRef.current.delete(peerId);\n    }\n    \n    setRemoteStreams(prev => {\n      const newStreams = new Map(prev);\n      newStreams.delete(peerId);\n      return newStreams;\n    });\n  }, []);\n\n  // 통계 모니터링\n  const startStatsMonitoring = useCallback((pc, peerId) => {\n    const interval = setInterval(async () => {\n      if (pc.connectionState !== 'connected') {\n        clearInterval(interval);\n        return;\n      }\n\n      try {\n        const stats = await pc.getStats();\n        let totalBitrate = 0;\n        let totalPacketLoss = 0;\n        let totalPackets = 0;\n        let rtts = [];\n\n        stats.forEach(report => {\n          if (report.type === 'outbound-rtp' && report.kind === 'video') {\n            totalBitrate += report.bytesSent * 8 / report.timestamp;\n            totalPacketLoss += report.packetsLost || 0;\n            totalPackets += report.packetsSent || 0;\n          }\n          \n          if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n            if (report.currentRoundTripTime) {\n              rtts.push(report.currentRoundTripTime * 1000); // ms\n            }\n          }\n        });\n\n        const packetLossRate = totalPackets > 0 ? totalPacketLoss / totalPackets : 0;\n        const avgLatency = rtts.length > 0 ? rtts.reduce((a, b) => a + b) / rtts.length : 0;\n        \n        // 품질 판단\n        let quality = 'good';\n        if (packetLossRate > 0.05 || avgLatency > 150) {\n          quality = 'fair';\n        }\n        if (packetLossRate > 0.1 || avgLatency > 300) {\n          quality = 'poor';\n        }\n\n        setStats({\n          bitrate: Math.round(totalBitrate / 1000), // kbps\n          packetLoss: Math.round(packetLossRate * 100), // %\n          latency: Math.round(avgLatency), // ms\n          quality\n        });\n      } catch (err) {\n        console.error('Failed to get stats:', err);\n      }\n    }, 2000);\n\n    return interval;\n  }, []);\n\n  // 오디오 토글\n  const toggleAudio = useCallback(() => {\n    if (localStreamRef.current) {\n      const audioTracks = localStreamRef.current.getAudioTracks();\n      audioTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n      \n      const newState = audioTracks[0]?.enabled ?? false;\n      setIsAudioEnabled(newState);\n      \n      // 서버에 상태 전송\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'toggle-audio',\n          data: { enabled: newState }\n        }));\n      }\n    }\n  }, []);\n\n  // 비디오 토글\n  const toggleVideo = useCallback(() => {\n    if (localStreamRef.current) {\n      const videoTracks = localStreamRef.current.getVideoTracks();\n      videoTracks.forEach(track => {\n        track.enabled = !track.enabled;\n      });\n      \n      const newState = videoTracks[0]?.enabled ?? false;\n      setIsVideoEnabled(newState);\n      \n      // 서버에 상태 전송\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'toggle-video',\n          data: { enabled: newState }\n        }));\n      }\n    }\n  }, []);\n\n  // 연결 종료\n  const disconnect = useCallback(() => {\n    // 모든 Peer Connection 종료\n    peerConnectionsRef.current.forEach((pc, peerId) => {\n      closePeerConnection(peerId);\n    });\n\n    // 로컬 스트림 종료\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localStreamRef.current = null;\n      setLocalStream(null);\n    }\n\n    // WebSocket 종료\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n\n    // 통계 모니터링 중지\n    if (statsIntervalRef.current) {\n      clearInterval(statsIntervalRef.current);\n    }\n\n    setConnectionState('disconnected');\n    setRemoteStreams(new Map());\n  }, [closePeerConnection]);\n\n  // 초기 연결 설정\n  useEffect(() => {\n    if (!roomId || !userId) return;\n\n    const init = async () => {\n      try {\n        // 미디어 스트림 획득\n        await getUserMedia();\n        \n        // WebSocket 연결\n        connectWebSocket();\n      } catch (err) {\n        console.error('Failed to initialize:', err);\n        setError('초기화 실패: ' + err.message);\n      }\n    };\n\n    init();\n\n    // 클린업\n    return () => {\n      disconnect();\n    };\n  }, [roomId, userId]); // getUserMedia, connectWebSocket, disconnect는 의존성에서 제외\n\n  return {\n    // 상태\n    connectionState,\n    localStream,\n    remoteStreams,\n    isAudioEnabled,\n    isVideoEnabled,\n    error,\n    stats,\n    \n    // 액션\n    toggleAudio,\n    toggleVideo,\n    disconnect,\n    getUserMedia\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useWebSocketTranscription.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'handleWebSocketMessage' and 'scheduleReconnect'. Either include them or remove the dependency array.","line":100,"column":6,"nodeType":"ArrayExpression","endLine":100,"endColumn":86,"suggestions":[{"desc":"Update the dependencies array to be: [language, targetLanguage, enableTranslation, handleWebSocketMessage, isTranscribing, reconnectAttempts, scheduleReconnect]","fix":{"range":[3063,3143],"text":"[language, targetLanguage, enableTranslation, handleWebSocketMessage, isTranscribing, reconnectAttempts, scheduleReconnect]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'startAudioCapture'. Either include it or remove the dependency array.","line":195,"column":6,"nodeType":"ArrayExpression","endLine":195,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [reconnectDelay, reconnectAttempts, connectWebSocket, startAudioCapture]","fix":{"range":[5901,5954],"text":"[reconnectDelay, reconnectAttempts, connectWebSocket, startAudioCapture]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useCallback, useEffect } from 'react';\nimport { log } from '../utils/logger';\n\nconst WS_URL = import.meta.env.VITE_WORKERS_WS_URL || 'wss://workers.languagemate.kr/ws';\n\nexport function useWebSocketTranscription({\n  language = 'auto',\n  targetLanguage = 'ko',\n  enableTranslation = true,\n  onTranscript,\n  onError,\n  reconnectAttempts = 3,\n  reconnectDelay = 2000\n} = {}) {\n  // 상태 관리\n  const [isConnected, setIsConnected] = useState(false);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [currentTranscript, setCurrentTranscript] = useState(null);\n  const [error, setError] = useState(null);\n  const [connectionQuality, setConnectionQuality] = useState('good');\n\n  // 레퍼런스 관리\n  const wsRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const processorRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectCountRef = useRef(0);\n  const lastTranscriptTimeRef = useRef(Date.now());\n\n  // WebSocket 연결\n  const connectWebSocket = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        const wsUrl = `${WS_URL}/api/transcribe/stream`;\n        const ws = new WebSocket(wsUrl);\n        \n        ws.onopen = () => {\n          log.info('WebSocket 전사 연결 성공', { wsUrl }, 'WS_TRANSCRIPTION');\n          setIsConnected(true);\n          setError(null);\n          reconnectCountRef.current = 0;\n\n          // 초기 설정 전송\n          ws.send(JSON.stringify({\n            type: 'config',\n            config: {\n              language,\n              targetLanguage,\n              enableTranslation,\n              model: 'whisper-large-v3-turbo',\n              responseFormat: 'verbose_json',\n              temperature: 0.1,\n              vadFilter: true,\n              initialPrompt: 'This is a conversation between language learners.'\n            }\n          }));\n\n          resolve(ws);\n        };\n\n        ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            handleWebSocketMessage(data);\n          } catch (err) {\n            log.error('WebSocket 메시지 파싱 오류', err, 'WS_TRANSCRIPTION');\n          }\n        };\n\n        ws.onerror = (error) => {\n          log.error('WebSocket 연결 오류', error, 'WS_TRANSCRIPTION');\n          setError('실시간 전사 연결에 오류가 발생했습니다.');\n          setConnectionQuality('poor');\n          reject(error);\n        };\n\n        ws.onclose = (event) => {\n          log.info('WebSocket 연결 종료', { code: event.code, reason: event.reason }, 'WS_TRANSCRIPTION');\n          setIsConnected(false);\n          \n          // 자동 재연결 시도\n          if (isTranscribing && reconnectCountRef.current < reconnectAttempts) {\n            scheduleReconnect();\n          }\n        };\n\n        wsRef.current = ws;\n\n      } catch (err) {\n        log.error('WebSocket 연결 실패', err, 'WS_TRANSCRIPTION');\n        setError('실시간 전사 서비스에 연결할 수 없습니다.');\n        reject(err);\n      }\n    });\n  }, [language, targetLanguage, enableTranslation, isTranscribing, reconnectAttempts]);\n\n  // WebSocket 메시지 처리\n  const handleWebSocketMessage = useCallback((data) => {\n    switch (data.type) {\n      case 'transcription': {\n        const transcript = {\n          id: `transcript-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          text: data.text,\n          language: data.language || language,\n          confidence: data.confidence || 1.0,\n          isFinal: data.is_final || false,\n          timestamp: new Date().toISOString(),\n          duration: data.duration || 0,\n          words: data.words || []\n        };\n\n        if (data.translations && enableTranslation) {\n          transcript.translations = data.translations;\n        }\n\n        setCurrentTranscript(transcript);\n        lastTranscriptTimeRef.current = Date.now();\n\n        if (onTranscript) {\n          onTranscript(transcript);\n        }\n\n        // 연결 품질 업데이트\n        setConnectionQuality('good');\n        break;\n      }\n\n      case 'translation':\n        // 번역 결과 처리\n        if (onTranscript) {\n          onTranscript({\n            id: `translation-${Date.now()}`,\n            text: data.translatedText,\n            originalText: data.originalText,\n            sourceLanguage: data.sourceLanguage,\n            targetLanguage: data.targetLanguage,\n            timestamp: new Date().toISOString(),\n            isTranslation: true\n          });\n        }\n        break;\n\n      case 'error': {\n        const errorMessage = data.message || '전사 처리 중 오류가 발생했습니다.';\n        setError(errorMessage);\n        setConnectionQuality('poor');\n        if (onError) {\n          onError(new Error(errorMessage));\n        }\n        break;\n      }\n\n      case 'status':\n        log.info('WebSocket 상태 업데이트', data, 'WS_TRANSCRIPTION');\n        break;\n\n      default:\n        log.warn('알 수 없는 메시지 타입', data, 'WS_TRANSCRIPTION');\n    }\n  }, [language, enableTranslation, onTranscript, onError]);\n\n  // 재연결 스케줄링\n  const scheduleReconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n\n    reconnectCountRef.current++;\n    const delay = reconnectDelay * Math.pow(2, reconnectCountRef.current - 1);\n\n    log.info(`WebSocket 재연결 시도 예정`, { \n      attempt: reconnectCountRef.current, \n      delay,\n      maxAttempts: reconnectAttempts \n    }, 'WS_TRANSCRIPTION');\n\n    reconnectTimeoutRef.current = setTimeout(async () => {\n      try {\n        await connectWebSocket();\n        if (mediaStreamRef.current) {\n          await startAudioCapture(mediaStreamRef.current);\n        }\n      } catch (err) {\n        log.error('재연결 실패', err, 'WS_TRANSCRIPTION');\n        if (reconnectCountRef.current >= reconnectAttempts) {\n          setError(`연결을 ${reconnectAttempts}회 시도했지만 실패했습니다.`);\n        }\n      }\n    }, delay);\n  }, [connectWebSocket, reconnectDelay, reconnectAttempts]);\n\n  // 오디오 캡처 시작\n  const startAudioCapture = useCallback(async (stream) => {\n    try {\n      // 오디오 컨텍스트 생성\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 16000\n      });\n\n      // 소스 생성\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      \n      // ScriptProcessorNode 생성 (AudioWorklet이 지원되지 않는 경우)\n      if (audioContextRef.current.audioWorklet) {\n        try {\n          await audioContextRef.current.audioWorklet.addModule('/audioProcessor.js');\n          processorRef.current = new AudioWorkletNode(audioContextRef.current, 'pcm-processor');\n        } catch {\n          // AudioWorklet 실패 시 ScriptProcessorNode 사용\n          processorRef.current = audioContextRef.current.createScriptProcessor(4096, 1, 1);\n        }\n      } else {\n        processorRef.current = audioContextRef.current.createScriptProcessor(4096, 1, 1);\n      }\n\n      // 오디오 데이터 처리\n      if (processorRef.current.port) {\n        // AudioWorkletNode\n        processorRef.current.port.onmessage = (event) => {\n          if (wsRef.current?.readyState === WebSocket.OPEN) {\n            wsRef.current.send(event.data.audioData);\n          }\n        };\n      } else {\n        // ScriptProcessorNode\n        processorRef.current.onaudioprocess = (event) => {\n          if (wsRef.current?.readyState === WebSocket.OPEN) {\n            const inputBuffer = event.inputBuffer;\n            const channelData = inputBuffer.getChannelData(0);\n            const audioData = new Float32Array(channelData);\n            wsRef.current.send(audioData.buffer);\n          }\n        };\n      }\n\n      // 연결\n      source.connect(processorRef.current);\n      processorRef.current.connect(audioContextRef.current.destination);\n\n      log.info('오디오 캡처 시작', { sampleRate: audioContextRef.current.sampleRate }, 'WS_TRANSCRIPTION');\n\n    } catch (err) {\n      log.error('오디오 캡처 초기화 실패', err, 'WS_TRANSCRIPTION');\n      setError('마이크 접근에 실패했습니다.');\n      throw err;\n    }\n  }, []);\n\n  // 전사 시작\n  const startTranscription = useCallback(async (stream) => {\n    if (!stream) {\n      setError('오디오 스트림이 제공되지 않았습니다.');\n      return;\n    }\n\n    try {\n      setError(null);\n      setIsTranscribing(true);\n      mediaStreamRef.current = stream;\n\n      // WebSocket 연결\n      await connectWebSocket();\n      \n      // 오디오 캡처 시작\n      await startAudioCapture(stream);\n\n      log.info('실시간 전사 시작', { language, targetLanguage, enableTranslation }, 'WS_TRANSCRIPTION');\n\n    } catch (err) {\n      log.error('전사 시작 실패', err, 'WS_TRANSCRIPTION');\n      setIsTranscribing(false);\n      setError(err.message || '전사를 시작할 수 없습니다.');\n      if (onError) {\n        onError(err);\n      }\n    }\n  }, [connectWebSocket, startAudioCapture, language, targetLanguage, enableTranslation, onError]);\n\n  // 전사 중지\n  const stopTranscription = useCallback(() => {\n    log.info('실시간 전사 중지', null, 'WS_TRANSCRIPTION');\n\n    setIsTranscribing(false);\n    \n    // WebSocket 연결 종료\n    if (wsRef.current) {\n      wsRef.current.close(1000, 'User requested stop');\n      wsRef.current = null;\n    }\n\n    // 오디오 리소스 정리\n    if (processorRef.current) {\n      processorRef.current.disconnect();\n      processorRef.current = null;\n    }\n\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n\n    // 재연결 타이머 정리\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    setIsConnected(false);\n    setCurrentTranscript(null);\n    setError(null);\n    reconnectCountRef.current = 0;\n  }, []);\n\n  // 전사 토글\n  const toggleTranscription = useCallback(async (stream) => {\n    if (isTranscribing) {\n      stopTranscription();\n    } else if (stream) {\n      await startTranscription(stream);\n    } else {\n      setError('오디오 스트림이 필요합니다.');\n    }\n  }, [isTranscribing, startTranscription, stopTranscription]);\n\n  // 언어 설정 업데이트\n  const updateLanguage = useCallback((newLanguage, newTargetLanguage) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'config',\n        config: {\n          language: newLanguage,\n          targetLanguage: newTargetLanguage,\n          enableTranslation\n        }\n      }));\n    }\n  }, [enableTranslation]);\n\n  // 연결 상태 모니터링\n  useEffect(() => {\n    if (!isTranscribing) return;\n\n    const interval = setInterval(() => {\n      const timeSinceLastTranscript = Date.now() - lastTranscriptTimeRef.current;\n      \n      // 10초 이상 응답이 없으면 연결 품질을 'poor'로 설정\n      if (timeSinceLastTranscript > 10000) {\n        setConnectionQuality('poor');\n      } else if (timeSinceLastTranscript > 5000) {\n        setConnectionQuality('fair');\n      } else {\n        setConnectionQuality('good');\n      }\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [isTranscribing]);\n\n  // 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      stopTranscription();\n    };\n  }, [stopTranscription]);\n\n  return {\n    // 상태\n    isConnected,\n    isTranscribing,\n    currentTranscript,\n    error,\n    connectionQuality,\n    \n    // 메서드\n    startTranscription,\n    stopTranscription,\n    toggleTranscription,\n    updateLanguage,\n    \n    // 연결 정보\n    reconnectCount: reconnectCountRef.current,\n    maxReconnectAttempts: reconnectAttempts\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/hooks/useWhisper.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Achievement/AchievementPage.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAchievements'. Either include it or remove the dependency array.","line":21,"column":6,"nodeType":"ArrayExpression","endLine":21,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadAchievements]","fix":{"range":[726,728],"text":"[loadAchievements]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  getMyAchievements, \n  getMyAchievementStats, \n  claimAchievementReward,\n  ACHIEVEMENT_CATEGORIES \n} from '../../api/achievement';\nimport Header from '../../components/Header';\nimport { useAlert } from '../../hooks/useAlert';\nimport { Trophy, Star, Target, Award, TrendingUp, Gift } from 'lucide-react';\n\nexport default function AchievementPage() {\n  const [achievements, setAchievements] = useState([]);\n  const [stats, setStats] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState('ALL');\n  const [loading, setLoading] = useState(true);\n  const { showError, showSuccess } = useAlert();\n\n  useEffect(() => {\n    loadAchievements();\n  }, []);\n\n  const loadAchievements = async () => {\n    try {\n      setLoading(true);\n      const [achievementsData, statsData] = await Promise.all([\n        getMyAchievements(),\n        getMyAchievementStats()\n      ]);\n      \n      setAchievements(achievementsData.data || []);\n      setStats(statsData.data || {});\n    } catch (error) {\n      showError('업적 정보를 불러오는데 실패했습니다.');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClaimReward = async (achievementId) => {\n    try {\n      await claimAchievementReward(achievementId);\n      showSuccess('보상을 수령했습니다!');\n      await loadAchievements(); // 리로드\n    } catch (error) {\n      showError('보상 수령에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const getCategoryIcon = (category) => {\n    switch (category) {\n      case 'STUDY': return <Trophy className=\"w-5 h-5\" />;\n      case 'SOCIAL': return <Star className=\"w-5 h-5\" />;\n      case 'MILESTONE': return <Target className=\"w-5 h-5\" />;\n      case 'SPECIAL': return <Award className=\"w-5 h-5\" />;\n      case 'STREAK': return <TrendingUp className=\"w-5 h-5\" />;\n      default: return <Trophy className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getCategoryName = (category) => {\n    const names = {\n      'ALL': '전체',\n      'STUDY': '학습',\n      'SOCIAL': '소셜',\n      'MILESTONE': '마일스톤',\n      'SPECIAL': '특별',\n      'STREAK': '연속'\n    };\n    return names[category] || category;\n  };\n\n  const filteredAchievements = selectedCategory === 'ALL' \n    ? achievements \n    : achievements.filter(a => a.category === selectedCategory);\n\n  if (loading) {\n    return (\n      <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n        <Header />\n        <div className=\"flex justify-center items-center h-[400px]\">\n          <div className=\"text-[#929292]\">로딩 중...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      \n      {/* 통계 섹션 */}\n      <div className=\"bg-white p-6 border-b border-[#E7E7E7]\">\n        <h1 className=\"text-[24px] font-bold text-[#111111] mb-4\">나의 업적</h1>\n        \n        {stats && (\n          <div className=\"grid grid-cols-3 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-[24px] font-bold text-[#00C471]\">\n                {stats.completedCount || 0}\n              </div>\n              <div className=\"text-[12px] text-[#929292]\">완료</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-[24px] font-bold text-[#111111]\">\n                {stats.inProgressCount || 0}\n              </div>\n              <div className=\"text-[12px] text-[#929292]\">진행중</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-[24px] font-bold text-[#4285F4]\">\n                {stats.totalPoints || 0}\n              </div>\n              <div className=\"text-[12px] text-[#929292]\">포인트</div>\n            </div>\n          </div>\n        )}\n\n        {/* 진행률 바 */}\n        <div className=\"bg-[#F1F3F5] rounded-full h-2 overflow-hidden\">\n          <div \n            className=\"bg-[#00C471] h-full transition-all duration-500\"\n            style={{ \n              width: `${stats ? (stats.completedCount / (stats.totalCount || 1) * 100) : 0}%` \n            }}\n          />\n        </div>\n        <div className=\"text-[12px] text-[#929292] mt-1 text-right\">\n          {stats?.completedCount || 0} / {stats?.totalCount || 0} 완료\n        </div>\n      </div>\n\n      {/* 카테고리 필터 */}\n      <div className=\"bg-white px-6 py-3 border-b border-[#E7E7E7]\">\n        <div className=\"flex gap-2 overflow-x-auto\">\n          {['ALL', ...Object.values(ACHIEVEMENT_CATEGORIES)].map((category) => (\n            <button\n              key={category}\n              onClick={() => setSelectedCategory(category)}\n              className={`px-4 py-2 rounded-full text-[14px] font-medium whitespace-nowrap transition-colors\n                ${selectedCategory === category \n                  ? 'bg-[#00C471] text-white' \n                  : 'bg-[#F1F3F5] text-[#606060] hover:bg-[#E7E7E7]'\n                }`}\n            >\n              {getCategoryName(category)}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* 업적 리스트 */}\n      <div className=\"p-6\">\n        {filteredAchievements.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Trophy className=\"w-12 h-12 text-[#B5B5B5] mx-auto mb-4\" />\n            <p className=\"text-[#929292]\">아직 업적이 없습니다</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredAchievements.map((achievement) => (\n              <div\n                key={achievement.id}\n                className={`bg-white rounded-[10px] p-4 border transition-all\n                  ${achievement.isCompleted \n                    ? 'border-[#00C471] shadow-sm' \n                    : 'border-[#E7E7E7]'\n                  }`}\n              >\n                <div className=\"flex items-start gap-4\">\n                  {/* 아이콘 */}\n                  <div className={`w-12 h-12 rounded-full flex items-center justify-center\n                    ${achievement.isCompleted \n                      ? 'bg-[#E6F9F1]' \n                      : 'bg-[#F1F3F5]'\n                    }`}\n                  >\n                    <div className={achievement.isCompleted ? 'text-[#00C471]' : 'text-[#B5B5B5]'}>\n                      {getCategoryIcon(achievement.category)}\n                    </div>\n                  </div>\n\n                  {/* 내용 */}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-1\">\n                      <h3 className={`font-bold text-[16px] \n                        ${achievement.isCompleted ? 'text-[#111111]' : 'text-[#606060]'}`}\n                      >\n                        {achievement.title}\n                      </h3>\n                      {achievement.points > 0 && (\n                        <span className=\"text-[14px] font-bold text-[#4285F4]\">\n                          +{achievement.points}P\n                        </span>\n                      )}\n                    </div>\n                    \n                    <p className=\"text-[14px] text-[#929292] mb-2\">\n                      {achievement.description}\n                    </p>\n\n                    {/* 진행 바 */}\n                    {!achievement.isCompleted && (\n                      <div className=\"mb-2\">\n                        <div className=\"bg-[#F1F3F5] rounded-full h-2 overflow-hidden\">\n                          <div \n                            className=\"bg-[#00C471] h-full transition-all\"\n                            style={{ \n                              width: `${(achievement.currentProgress / achievement.targetProgress) * 100}%` \n                            }}\n                          />\n                        </div>\n                        <div className=\"text-[12px] text-[#929292] mt-1\">\n                          {achievement.currentProgress} / {achievement.targetProgress}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* 보상 수령 버튼 */}\n                    {achievement.isCompleted && !achievement.isRewardClaimed && (\n                      <button\n                        onClick={() => handleClaimReward(achievement.id)}\n                        className=\"flex items-center gap-2 px-4 py-2 bg-[#00C471] text-white \n                          rounded-[6px] text-[14px] font-medium hover:bg-[#00B267] transition-colors\"\n                      >\n                        <Gift className=\"w-4 h-4\" />\n                        보상 수령\n                      </button>\n                    )}\n\n                    {/* 완료 날짜 */}\n                    {achievement.isCompleted && achievement.completedAt && (\n                      <div className=\"text-[12px] text-[#929292] mt-2\">\n                        완료: {new Date(achievement.completedAt).toLocaleDateString()}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Achievements/AchievementsPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Analytics/AnalyticsDashboard.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Icon' is defined but never used.","line":272,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":272,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[10384,10395],"text":""},"desc":"Remove unused variable 'Icon'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { Activity, TrendingUp, AlertCircle, Clock, Users, Globe, Zap, Server } from 'lucide-react';\n\n// 색상 팔레트 (디자인 시스템 준수)\nconst COLORS = [\n  'var(--green-500)',\n  'var(--red-500)',\n  'var(--blue)',\n  'var(--green-400)',\n  'var(--warning-yellow)',\n  'var(--black-300)'\n];\n\nexport default function AnalyticsDashboard() {\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState('24h');\n  const [realTimeMetrics, setRealTimeMetrics] = useState(null);\n\n  useEffect(() => {\n    fetchDashboardData();\n    connectToMetricsStream();\n\n    return () => {\n      // Cleanup WebSocket connection\n      if (window.metricsWs) {\n        window.metricsWs.close();\n      }\n    };\n  }, [timeRange]);\n\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/v1/analytics/dashboard`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch dashboard data');\n\n      const data = await response.json();\n      setDashboardData(data.data);\n    } catch (error) {\n      console.error('Dashboard data error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const connectToMetricsStream = () => {\n    const ws = new WebSocket(`wss://${window.location.host}/api/v1/analytics/stream`);\n\n    ws.onopen = () => {\n      console.log('Connected to metrics stream');\n    };\n\n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'metrics_update') {\n        setRealTimeMetrics(data.data);\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    window.metricsWs = ws;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen page-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-[var(--green-500)] mx-auto mb-4\"></div>\n          <p className=\"text-[16px] text-[var(--black-300)]\">Loading analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const overview = dashboardData?.overview?.last24h;\n  const { topPaths, errorsByStatus, geoDistribution } = dashboardData || {};\n\n  return (\n    <div className=\"min-h-screen page-bg p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-[28px] font-bold text-[var(--black-500)]\">Analytics Dashboard</h1>\n          <select\n            value={timeRange}\n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"px-4 py-2 border border-[var(--black-50)] rounded-lg bg-white text-[var(--black-500)]\"\n          >\n            <option value=\"24h\">Last 24 hours</option>\n            <option value=\"7d\">Last 7 days</option>\n            <option value=\"30d\">Last 30 days</option>\n          </select>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <MetricCard\n            icon={Activity}\n            title=\"Total Requests\"\n            value={overview?.count || 0}\n            change=\"+12.5%\"\n            color=\"#00C471\"\n          />\n          <MetricCard\n            icon={Clock}\n            title=\"Avg Response Time\"\n            value={`${overview?.avgDuration?.toFixed(0) || 0}ms`}\n            change=\"-5.2%\"\n            color=\"#45B7D1\"\n          />\n          <MetricCard\n            icon={AlertCircle}\n            title=\"Error Rate\"\n            value={`${((overview?.errorRate || 0) * 100).toFixed(1)}%`}\n            change=\"+0.3%\"\n            color=\"#FF6B6B\"\n          />\n          <MetricCard\n            icon={Zap}\n            title=\"P95 Response Time\"\n            value={`${overview?.p95Duration?.toFixed(0) || 0}ms`}\n            change=\"-2.1%\"\n            color=\"#FFA07A\"\n          />\n        </div>\n\n        {/* Charts Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Response Time Chart */}\n          <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n            <h3 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">Response Time Trend</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={generateTimeSeriesData()}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--neutral-100)\" />\n                <XAxis dataKey=\"time\" stroke=\"var(--black-300)\" />\n                <YAxis stroke=\"var(--black-300)\" />\n                <Tooltip />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"avg\"\n                  stroke=\"var(--green-500)\"\n                  strokeWidth={2}\n                  dot={false}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"p95\"\n                  stroke=\"var(--red-400)\"\n                  strokeWidth={2}\n                  strokeDasharray=\"5 5\"\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Top Endpoints Chart */}\n          <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n            <h3 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">Top Endpoints</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={formatTopPaths(topPaths)} layout=\"horizontal\">\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--neutral-100)\" />\n                <XAxis type=\"number\" stroke=\"var(--black-300)\" />\n                <YAxis dataKey=\"path\" type=\"category\" stroke=\"var(--black-300)\" width={100} />\n                <Tooltip />\n                <Bar dataKey=\"count\" fill=\"var(--green-500)\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Error Distribution */}\n          <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n            <h3 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">Error Distribution</h3>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <PieChart>\n                <Pie\n                  data={formatErrorDistribution(errorsByStatus)}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label\n                >\n                  {formatErrorDistribution(errorsByStatus)?.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Geographic Distribution */}\n          <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n            <h3 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4 flex items-center\">\n              <Globe className=\"w-5 h-5 mr-2\" />\n              Geographic Distribution\n            </h3>\n            <div className=\"space-y-3\">\n              {formatGeoDistribution(geoDistribution)?.slice(0, 5).map((country, index) => (\n                <div key={index} className=\"flex justify-between items-center\">\n                  <span className=\"text-[14px] text-[var(--black-300)]\">{country.country}</span>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-24 h-2 bg-[var(--black-50)] rounded-full mr-2\">\n                      <div\n                        className=\"h-full bg-[var(--green-500)] rounded-full\"\n                        style={{ width: `${(country.percentage)}%` }}\n                      />\n                    </div>\n                    <span className=\"text-[14px] font-semibold text-[var(--black-500)] w-12 text-right\">\n                      {country.percentage}%\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Real-time Metrics */}\n          <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n            <h3 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4 flex items-center\">\n              <Server className=\"w-5 h-5 mr-2\" />\n              Real-time Metrics\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-[14px] text-[var(--black-300)]\">Active Connections</span>\n                <span className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                  {realTimeMetrics?.activeConnections || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-[14px] text-[var(--black-300)]\">Req/sec</span>\n                <span className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                  {realTimeMetrics?.requestsPerSecond || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-[14px] text-[var(--black-300)]\">CPU Usage</span>\n                <span className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                  {realTimeMetrics?.cpuUsage || 0}%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-[14px] text-[var(--black-300)]\">Memory Usage</span>\n                <span className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                  {realTimeMetrics?.memoryUsage || 0}MB\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Metric Card Component\nfunction MetricCard({ icon: Icon, title, value, change, color }) {\n  const isPositive = change.startsWith('+');\n  const isGoodChange = (title.includes('Error') || title.includes('Response')) ? !isPositive : isPositive;\n\n  return (\n    <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className={`p-3 rounded-full ${color === '#00C471' ? 'metric-pill-success' : color === '#45B7D1' ? 'metric-pill-info' : color === '#FF6B6B' ? 'metric-pill-danger' : 'metric-pill-warning'}`}>\n          <Icon className=\"w-6 h-6\" />\n        </div>\n        <span className={`text-[14px] font-semibold ${isGoodChange ? 'text-[var(--green-500)]' : 'text-[var(--red-400)]'}`}>\n          {change}\n        </span>\n      </div>\n      <h3 className=\"text-[14px] text-[var(--black-300)] mb-1\">{title}</h3>\n      <p className=\"text-[24px] font-bold text-[var(--black-500)]\">{value}</p>\n    </div>\n  );\n}\n\n// Helper functions\nfunction generateTimeSeriesData() {\n  const hours = 24;\n  const data = [];\n  const now = new Date();\n\n  for (let i = hours - 1; i >= 0; i--) {\n    const time = new Date(now - i * 60 * 60 * 1000);\n    data.push({\n      time: `${time.getHours()}:00`,\n      avg: Math.floor(Math.random() * 50) + 100,\n      p95: Math.floor(Math.random() * 100) + 150,\n    });\n  }\n\n  return data;\n}\n\nfunction formatTopPaths(data) {\n  if (!data) return [];\n  return Object.entries(data)\n    .map(([path, stats]) => ({\n      path: path.length > 20 ? path.substring(0, 20) + '...' : path,\n      count: stats.count || 0\n    }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 5);\n}\n\nfunction formatErrorDistribution(data) {\n  if (!data) return [];\n  return Object.entries(data)\n    .filter(([status]) => parseInt(status) >= 400)\n    .map(([status, stats]) => ({\n      name: `${status}`,\n      value: stats.count || 0\n    }));\n}\n\nfunction formatGeoDistribution(data) {\n  if (!data) return [];\n  const total = Object.values(data).reduce((sum, stats) => sum + (stats.count || 0), 0);\n  return Object.entries(data)\n    .map(([country, stats]) => ({\n      country: country || 'Unknown',\n      count: stats.count || 0,\n      percentage: Math.round(((stats.count || 0) / total) * 100)\n    }))\n    .sort((a, b) => b.count - a.count);\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Analytics/AnalyticsPage.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadAnalyticsData, timeRange]","fix":{"range":[1688,1699],"text":"[loadAnalyticsData, timeRange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  BarChart3, TrendingUp, Users, Globe, Clock, Calendar,\n  Target, Award, MessageSquare, Video, ChevronRight,\n  RefreshCw, Filter, ChevronDown\n} from 'lucide-react';\nimport {\n  LineChart, Line, BarChart, Bar, PieChart, Pie, Cell,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\nimport { \n  getStudyStats, \n  getSessionActivity\n} from '../../api/analytics';\nimport WeeklyActivityChart from '../../components/profile/WeeklyActivityChart';\nimport LevelTestHistoryChart from '../../components/analytics/LevelTestHistoryChart';\nimport MatchingStatsChart from '../../components/analytics/MatchingStatsChart';\n\nconst AnalyticsPage = () => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState('week');\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const loadAnalyticsData = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const [studyStatsResponse, sessionActivityResponse] = await Promise.all([\n        getStudyStats(timeRange),\n        getSessionActivity(timeRange)\n      ]);\n\n      const data = transformApiDataToAnalyticsData(studyStatsResponse, sessionActivityResponse);\n      setAnalyticsData(data);\n    } catch (fetchError) {\n      console.error('Analytics data loading failed:', fetchError);\n      setAnalyticsData(null);\n      setError('학습 통계를 불러오지 못했습니다. 잠시 후 다시 시도해주세요.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [timeRange]);\n\n  /**\n   * API 응답 데이터를 컴포넌트에서 사용하는 형태로 변환\n   */\n  const transformApiDataToAnalyticsData = (studyStats, sessionActivity) => {\n    // API 응답 구조에 따라 데이터 변환 로직 구현\n    const transformedData = {\n      overview: {\n        totalSessions: studyStats?.metrics?.totalSessions || 0,\n        totalMinutes: studyStats?.metrics?.totalMinutes || 0,\n        weeklyGrowth: studyStats?.metrics?.weeklyGrowth || 0,\n        currentStreak: studyStats?.metrics?.currentStreak || 0,\n        averageSessionTime: studyStats?.metrics?.averageSessionTime || 0,\n        partnersCount: studyStats?.metrics?.partnersCount || 0\n      },\n      sessionStats: sessionActivity?.metrics?.dailyStats || [],\n      languageProgress: studyStats?.metrics?.languageProgress || [],\n      sessionTypes: Array.isArray(studyStats?.metrics?.sessionTypes)\n        ? studyStats.metrics.sessionTypes\n        : [],\n      weeklyGoals: studyStats?.metrics?.weeklyGoals || {\n        current: 0,\n        target: 7,\n        streak: 0\n      },\n      topPartners: studyStats?.metrics?.topPartners || []\n    };\n    \n    return transformedData;\n  };\n\n  const getTimeRangeLabel = (range) => {\n    switch (range) {\n      case 'day': return '오늘';\n      case 'week': return '이번 주';\n      case 'month': return '이번 달';\n      case 'year': return '올해';\n      default: return '이번 주';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#FAFAFA] flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-[#929292]\">통계를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-[#FAFAFA] flex items-center justify-center px-6\">\n        <div className=\"bg-white border border-[#FFE0E0] rounded-[16px] px-8 py-10 text-center max-w-lg shadow-sm\">\n          <div className=\"mx-auto mb-4 w-12 h-12 rounded-full bg-[#FFF5F5] flex items-center justify-center\">\n            <TrendingUp className=\"w-6 h-6 text-[#E53E3E]\" />\n          </div>\n          <h2 className=\"text-[20px] font-bold text-[#111111] mb-2\">통계 데이터를 불러올 수 없습니다</h2>\n          <p className=\"text-[14px] text-[#606060] mb-6\">{error}</p>\n          <button\n            type=\"button\"\n            onClick={loadAnalyticsData}\n            className=\"px-5 py-2 rounded-[8px] bg-[#00C471] text-white text-[14px] font-semibold hover:bg-[#00B267] transition-colors\"\n          >\n            다시 시도\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA]\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <button \n                onClick={() => navigate(-1)}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors lg:hidden\"\n              >\n                <ChevronRight className=\"w-6 h-6 text-[#111111] rotate-180\" />\n              </button>\n              <div>\n                <h1 className=\"text-xl font-bold text-[#111111]\">학습 통계</h1>\n                <p className=\"text-sm text-[#929292]\">\n                  {getTimeRangeLabel(timeRange)} 학습 현황\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              {/* Time Range Selector */}\n              <div className=\"relative\">\n                <select\n                  value={timeRange}\n                  onChange={(e) => setTimeRange(e.target.value)}\n                  className=\"appearance-none bg-white border border-[#E7E7E7] rounded-lg px-4 py-2 pr-8 text-[14px] focus:border-[#00C471] focus:outline-none\"\n                >\n                  <option value=\"day\">오늘</option>\n                  <option value=\"week\">이번 주</option>\n                  <option value=\"month\">이번 달</option>\n                  <option value=\"year\">올해</option>\n                </select>\n                <ChevronDown className=\"absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-[#929292] pointer-events-none\" />\n              </div>\n\n              <button\n                onClick={loadAnalyticsData}\n                className=\"p-2 text-[#666666] hover:text-[#111111] hover:bg-[#F1F3F5] rounded-lg transition-colors\"\n              >\n                <RefreshCw className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          <div className=\"bg-white rounded-[16px] p-4 border border-[#E7E7E7]\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"w-10 h-10 bg-[#00C471]/10 rounded-full flex items-center justify-center\">\n                <Video className=\"w-5 h-5 text-[#00C471]\" />\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-[20px] font-bold text-[#111111]\">\n                  {analyticsData.overview.totalSessions}\n                </div>\n                <div className=\"text-[12px] text-[#929292]\">총 세션</div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <TrendingUp className=\"w-3 h-3 text-[#00C471]\" />\n              <span className=\"text-[12px] text-[#00C471] font-medium\">\n                +{analyticsData.overview.weeklyGrowth}%\n              </span>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-[16px] p-4 border border-[#E7E7E7]\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"w-10 h-10 bg-[#4285F4]/10 rounded-full flex items-center justify-center\">\n                <Clock className=\"w-5 h-5 text-[#4285F4]\" />\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-[20px] font-bold text-[#111111]\">\n                  {Math.floor(analyticsData.overview.totalMinutes / 60)}h {analyticsData.overview.totalMinutes % 60}m\n                </div>\n                <div className=\"text-[12px] text-[#929292]\">총 학습시간</div>\n              </div>\n            </div>\n            <div className=\"text-[12px] text-[#666666]\">\n              평균 {analyticsData.overview.averageSessionTime}분/세션\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-[16px] p-4 border border-[#E7E7E7]\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"w-10 h-10 bg-[#FF6B6B]/10 rounded-full flex items-center justify-center\">\n                <Target className=\"w-5 h-5 text-[#FF6B6B]\" />\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-[20px] font-bold text-[#111111]\">\n                  {analyticsData.overview.currentStreak}\n                </div>\n                <div className=\"text-[12px] text-[#929292]\">연속 학습</div>\n              </div>\n            </div>\n            <div className=\"text-[12px] text-[#666666]\">\n              일 연속\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-[16px] p-4 border border-[#E7E7E7]\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"w-10 h-10 bg-[#9C27B0]/10 rounded-full flex items-center justify-center\">\n                <Users className=\"w-5 h-5 text-[#9C27B0]\" />\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-[20px] font-bold text-[#111111]\">\n                  {analyticsData.overview.partnersCount}\n                </div>\n                <div className=\"text-[12px] text-[#929292]\">파트너</div>\n              </div>\n            </div>\n            <div className=\"text-[12px] text-[#666666]\">\n              활성 파트너\n            </div>\n          </div>\n        </div>\n\n        {/* Weekly Goal */}\n        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-[18px] font-bold text-[#111111]\">주간 목표</h3>\n            <button className=\"text-[14px] text-[#00C471] font-medium\">\n              목표 수정\n            </button>\n          </div>\n\n          <div className=\"mb-4\">\n            <div className=\"flex items-center justify-between text-[14px] mb-2\">\n              <span className=\"text-[#666666]\">\n                {analyticsData.weeklyGoals.current}/{analyticsData.weeklyGoals.target} 세션 완료\n              </span>\n              <span className=\"text-[#111111] font-semibold\">\n                {Math.round((analyticsData.weeklyGoals.current / analyticsData.weeklyGoals.target) * 100)}%\n              </span>\n            </div>\n            <div className=\"w-full bg-[#E7E7E7] rounded-full h-3\">\n              <div \n                className=\"bg-[#00C471] h-3 rounded-full transition-all duration-500\"\n                style={{ width: `${(analyticsData.weeklyGoals.current / analyticsData.weeklyGoals.target) * 100}%` }}\n              ></div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4 text-[12px]\">\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-[#00C471] rounded-full\"></div>\n              <span className=\"text-[#666666]\">{analyticsData.weeklyGoals.streak}일 연속 목표 달성</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Weekly Activity Chart */}\n        <WeeklyActivityChart data={analyticsData.sessionStats} />\n\n        {/* Charts Row */}\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Session Activity Chart */}\n          <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n            <h3 className=\"text-[18px] font-bold text-[#111111] mb-4\">세션 활동</h3>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={analyticsData.sessionStats}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E7E7E7\" />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke=\"#929292\"\n                    fontSize={12}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis stroke=\"#929292\" fontSize={12} />\n                  <Tooltip \n                    contentStyle={{ \n                      backgroundColor: 'white',\n                      border: '1px solid #E7E7E7',\n                      borderRadius: '8px'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"sessions\" \n                    stroke=\"#00C471\" \n                    strokeWidth={3}\n                    dot={{ fill: '#00C471', strokeWidth: 2, r: 4 }}\n                    activeDot={{ r: 6, stroke: '#00C471', strokeWidth: 2 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Session Types Pie Chart */}\n          <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n            <h3 className=\"text-[18px] font-bold text-[#111111] mb-4\">세션 유형</h3>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={analyticsData.sessionTypes}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={100}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {analyticsData.sessionTypes.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"flex justify-center space-x-4 mt-4\">\n              {analyticsData.sessionTypes.map((type, index) => (\n                <div key={index} className=\"flex items-center space-x-2\">\n                  <div \n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: type.color }}\n                  ></div>\n                  <span className=\"text-[12px] text-[#666666]\">\n                    {type.name} ({type.value}%)\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Advanced Analytics Charts */}\n        <LevelTestHistoryChart timeRange={timeRange} />\n        <MatchingStatsChart timeRange={timeRange} />\n\n        {/* Language Progress */}\n        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-[18px] font-bold text-[#111111]\">언어별 진도</h3>\n            <button \n              onClick={() => navigate('/profile')}\n              className=\"text-[14px] text-[#00C471] font-medium flex items-center space-x-1\"\n            >\n              <span>자세히 보기</span>\n              <ChevronRight className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          <div className=\"space-y-4\">\n            {analyticsData.languageProgress.map((lang, index) => (\n              <div key={index} className=\"border border-[#E7E7E7] rounded-[12px] p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-[#F1F3F5] rounded-full flex items-center justify-center\">\n                      <Globe className=\"w-5 h-5 text-[#00C471]\" />\n                    </div>\n                    <div>\n                      <h4 className=\"text-[16px] font-semibold text-[#111111]\">{lang.language}</h4>\n                      <p className=\"text-[14px] text-[#929292]\">{lang.level}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-[16px] font-bold text-[#111111]\">{lang.progress}%</div>\n                    <div className=\"text-[12px] text-[#929292]\">{lang.sessions} 세션</div>\n                  </div>\n                </div>\n                \n                <div className=\"w-full bg-[#E7E7E7] rounded-full h-2\">\n                  <div \n                    className=\"bg-[#00C471] h-2 rounded-full transition-all duration-700\"\n                    style={{ width: `${lang.progress}%` }}\n                  ></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Top Partners */}\n        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-[18px] font-bold text-[#111111]\">주요 파트너</h3>\n            <button \n              onClick={() => navigate('/matching')}\n              className=\"text-[14px] text-[#00C471] font-medium\"\n            >\n              모든 파트너 보기\n            </button>\n          </div>\n\n          <div className=\"space-y-3\">\n            {analyticsData.topPartners.map((partner, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 hover:bg-[#F9F9F9] rounded-lg transition-colors\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-[20px]\">{partner.flag}</div>\n                  <div>\n                    <h4 className=\"text-[14px] font-semibold text-[#111111]\">{partner.name}</h4>\n                    <p className=\"text-[12px] text-[#929292]\">{partner.sessions}번 세션</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Award className=\"w-4 h-4 text-[#FFD700]\" />\n                    <span className=\"text-[12px] font-medium text-[#111111]\">{partner.rating}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Chat/ChatPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/GroupSession/GroupSessionDetailPage.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSessionDetails'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadSessionDetails, sessionId]","fix":{"range":[1764,1775],"text":"[loadSessionDetails, sessionId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  getGroupSessionDetails,\n  getSessionParticipants,\n  joinGroupSession,\n  leaveGroupSession,\n  startGroupSession,\n  endGroupSession,\n  cancelGroupSession,\n  kickParticipant,\n  updateGroupSession\n} from '../../api/groupSession';\nimport Header from '../../components/Header';\nimport { useAlert } from '../../hooks/useAlert';\nimport { \n  Users, Calendar, Clock, Globe, Lock, Video, Mic, MessageSquare,\n  Play, Square, XCircle, UserMinus, Settings, Share2, Copy,\n  CheckCircle, AlertCircle, BookOpen, Target, Hash, Star,\n  ChevronLeft, Edit2, Trash2, UserPlus, LogOut\n} from 'lucide-react';\n\nexport default function GroupSessionDetailPage() {\n  const { sessionId } = useParams();\n  const navigate = useNavigate();\n  const { showError, showSuccess, showInfo } = useAlert();\n  \n  const [session, setSession] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isHost, setIsHost] = useState(false);\n  const [isParticipant, setIsParticipant] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [cancelReason, setCancelReason] = useState('');\n  const [copiedCode, setCopiedCode] = useState(false);\n  \n  // 세션 수정 폼\n  const [editSession, setEditSession] = useState({\n    title: '',\n    description: '',\n    language: '',\n    targetLevel: '',\n    maxParticipants: 6,\n    scheduledStartTime: '',\n    durationMinutes: 60,\n    topic: '',\n    tags: []\n  });\n\n  const currentUserId = localStorage.getItem('userId'); // 현재 사용자 ID\n\n  useEffect(() => {\n    loadSessionDetails();\n  }, [sessionId]);\n\n  const loadSessionDetails = async () => {\n    try {\n      setLoading(true);\n      \n      // 세션 상세 정보 로드\n      const sessionResponse = await getGroupSessionDetails(sessionId);\n      const sessionData = sessionResponse.data;\n      setSession(sessionData);\n      \n      // 호스트 및 참가자 여부 확인\n      setIsHost(sessionData.hostId === currentUserId);\n      setIsParticipant(sessionData.participantIds?.includes(currentUserId));\n      \n      // 수정 폼 초기화\n      setEditSession({\n        title: sessionData.title,\n        description: sessionData.description || '',\n        language: sessionData.language,\n        targetLevel: sessionData.targetLevel,\n        maxParticipants: sessionData.maxParticipants,\n        scheduledStartTime: sessionData.scheduledStartTime,\n        durationMinutes: sessionData.durationMinutes,\n        topic: sessionData.topic || '',\n        tags: sessionData.tags || []\n      });\n      \n      // 참가자 목록 로드\n      try {\n        const participantsResponse = await getSessionParticipants(sessionId);\n        setParticipants(participantsResponse.data || []);\n      } catch (error) {\n        console.error('Failed to load participants:', error);\n      }\n    } catch (error) {\n      console.error('Failed to load session details:', error);\n      showError('세션 정보를 불러오는데 실패했습니다.');\n      navigate('/group-session');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleJoinSession = async () => {\n    try {\n      await joinGroupSession(sessionId);\n      showSuccess('세션에 참가했습니다.');\n      loadSessionDetails();\n    } catch (error) {\n      showError('세션 참가에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleLeaveSession = async () => {\n    if (!confirm('정말 세션에서 나가시겠습니까?')) return;\n    \n    try {\n      await leaveGroupSession(sessionId);\n      showInfo('세션에서 나갔습니다.');\n      navigate('/group-session');\n    } catch (error) {\n      showError('세션 나가기에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleStartSession = async () => {\n    try {\n      await startGroupSession(sessionId);\n      showSuccess('세션이 시작되었습니다.');\n      navigate(`/group-session/room/${sessionId}`);\n    } catch (error) {\n      showError('세션 시작에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleEndSession = async () => {\n    if (!confirm('정말 세션을 종료하시겠습니까?')) return;\n    \n    try {\n      await endGroupSession(sessionId);\n      showSuccess('세션이 종료되었습니다.');\n      loadSessionDetails();\n    } catch (error) {\n      showError('세션 종료에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleCancelSession = async () => {\n    try {\n      await cancelGroupSession(sessionId, cancelReason);\n      showInfo('세션이 취소되었습니다.');\n      setShowCancelModal(false);\n      setCancelReason('');\n      loadSessionDetails();\n    } catch (error) {\n      showError('세션 취소에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleUpdateSession = async () => {\n    try {\n      await updateGroupSession(sessionId, editSession);\n      showSuccess('세션 정보가 수정되었습니다.');\n      setShowEditModal(false);\n      loadSessionDetails();\n    } catch (error) {\n      showError('세션 수정에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleKickParticipant = async (participantId, participantName) => {\n    if (!confirm(`${participantName}님을 세션에서 내보내시겠습니까?`)) return;\n    \n    try {\n      await kickParticipant(sessionId, participantId);\n      showSuccess('참가자를 내보냈습니다.');\n      loadSessionDetails();\n    } catch (error) {\n      showError('참가자 내보내기에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleCopyJoinCode = () => {\n    if (session?.joinCode) {\n      navigator.clipboard.writeText(session.joinCode);\n      setCopiedCode(true);\n      showSuccess('참가 코드가 복사되었습니다.');\n      setTimeout(() => setCopiedCode(false), 3000);\n    }\n  };\n\n  const handleShareSession = () => {\n    const shareUrl = `${window.location.origin}/group-session/${sessionId}`;\n    const shareText = `\"${session.title}\" 그룹 세션에 참여하세요!\\n${shareUrl}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: session.title,\n        text: shareText,\n        url: shareUrl\n      });\n    } else {\n      navigator.clipboard.writeText(shareText);\n      showSuccess('공유 링크가 복사되었습니다.');\n    }\n  };\n\n  const getSessionTypeIcon = (type) => {\n    switch (type) {\n      case 'VIDEO': return <Video className=\"w-5 h-5\" />;\n      case 'AUDIO': return <Mic className=\"w-5 h-5\" />;\n      case 'TEXT': return <MessageSquare className=\"w-5 h-5\" />;\n      default: return <Users className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getSessionStatusBadge = (status) => {\n    switch (status) {\n      case 'SCHEDULED':\n        return <span className=\"px-3 py-1.5 bg-[#4285F4] text-white text-[14px] rounded-full\">예정됨</span>;\n      case 'ONGOING':\n        return <span className=\"px-3 py-1.5 bg-[#00C471] text-white text-[14px] rounded-full\">진행중</span>;\n      case 'COMPLETED':\n        return <span className=\"px-3 py-1.5 bg-[#606060] text-white text-[14px] rounded-full\">종료됨</span>;\n      case 'CANCELLED':\n        return <span className=\"px-3 py-1.5 bg-[#EA4335] text-white text-[14px] rounded-full\">취소됨</span>;\n      default:\n        return null;\n    }\n  };\n\n  const formatDateTime = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('ko-KR', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      weekday: 'long'\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n        <Header />\n        <div className=\"flex justify-center items-center h-[400px]\">\n          <div className=\"text-[#929292]\">로딩 중...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!session) {\n    return (\n      <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n        <Header />\n        <div className=\"flex flex-col items-center justify-center h-[400px]\">\n          <AlertCircle className=\"w-12 h-12 text-[#B5B5B5] mb-4\" />\n          <p className=\"text-[#929292]\">세션을 찾을 수 없습니다</p>\n          <button\n            onClick={() => navigate('/group-session')}\n            className=\"mt-4 px-6 py-2 bg-[#111111] text-white rounded-[6px]\"\n          >\n            목록으로 돌아가기\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      \n      {/* 헤더 섹션 */}\n      <div className=\"bg-white p-6 border-b border-[#E7E7E7]\">\n        <button\n          onClick={() => navigate('/group-session')}\n          className=\"flex items-center gap-2 text-[#606060] mb-4 hover:text-[#111111]\"\n        >\n          <ChevronLeft className=\"w-5 h-5\" />\n          <span className=\"text-[14px]\">목록으로</span>\n        </button>\n\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              {getSessionStatusBadge(session.status)}\n              {session.isPublic ? (\n                <Globe className=\"w-5 h-5 text-[#606060]\" />\n              ) : (\n                <Lock className=\"w-5 h-5 text-[#606060]\" />\n              )}\n              {getSessionTypeIcon(session.sessionType)}\n            </div>\n            <h1 className=\"text-[24px] font-bold text-[#111111] mb-2\">{session.title}</h1>\n            {session.description && (\n              <p className=\"text-[16px] text-[#606060]\">{session.description}</p>\n            )}\n          </div>\n          \n          {isHost && session.status === 'SCHEDULED' && (\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => setShowEditModal(true)}\n                className=\"p-2 text-[#606060] hover:bg-[#F1F3F5] rounded-full\"\n              >\n                <Edit2 className=\"w-5 h-5\" />\n              </button>\n              <button\n                onClick={handleShareSession}\n                className=\"p-2 text-[#606060] hover:bg-[#F1F3F5] rounded-full\"\n              >\n                <Share2 className=\"w-5 h-5\" />\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* 세션 정보 */}\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <BookOpen className=\"w-4 h-4 text-[#929292]\" />\n            <span className=\"text-[14px] text-[#606060]\">학습 언어</span>\n            <span className=\"text-[14px] font-medium text-[#111111]\">{session.language}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Target className=\"w-4 h-4 text-[#929292]\" />\n            <span className=\"text-[14px] text-[#606060]\">레벨</span>\n            <span className=\"text-[14px] font-medium text-[#111111]\">{session.targetLevel}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"w-4 h-4 text-[#929292]\" />\n            <span className=\"text-[14px] text-[#606060]\">참가자</span>\n            <span className=\"text-[14px] font-medium text-[#111111]\">\n              {session.currentParticipants || 0}/{session.maxParticipants}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"w-4 h-4 text-[#929292]\" />\n            <span className=\"text-[14px] text-[#606060]\">진행 시간</span>\n            <span className=\"text-[14px] font-medium text-[#111111]\">{session.durationMinutes}분</span>\n          </div>\n        </div>\n\n        {/* 시작 시간 */}\n        {session.scheduledStartTime && (\n          <div className=\"p-3 bg-[#F1F3F5] rounded-[6px] mb-4\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4 text-[#606060]\" />\n              <span className=\"text-[14px] font-medium text-[#111111]\">\n                {formatDateTime(session.scheduledStartTime)}\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* 참가 코드 (호스트만 보기) */}\n        {isHost && session.joinCode && (\n          <div className=\"p-3 bg-[#E6F9F1] rounded-[6px] mb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-[12px] text-[#606060] mb-1\">참가 코드</p>\n                <p className=\"text-[20px] font-mono font-bold text-[#00C471] tracking-wider\">\n                  {session.joinCode}\n                </p>\n              </div>\n              <button\n                onClick={handleCopyJoinCode}\n                className=\"p-2 text-[#00C471] hover:bg-white/50 rounded-full\"\n              >\n                {copiedCode ? <CheckCircle className=\"w-5 h-5\" /> : <Copy className=\"w-5 h-5\" />}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* 태그 */}\n        {session.tags && session.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {session.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"px-3 py-1 bg-[#F1F3F5] text-[#606060] text-[12px] rounded-full\"\n              >\n                #{tag}\n              </span>\n            ))}\n          </div>\n        )}\n\n        {/* 액션 버튼 */}\n        <div className=\"flex gap-3\">\n          {session.status === 'SCHEDULED' && (\n            <>\n              {isHost ? (\n                <>\n                  <button\n                    onClick={handleStartSession}\n                    className=\"flex-1 py-3 bg-[#00C471] text-white rounded-[6px] \n                      font-medium hover:bg-[#00B267] transition-colors flex items-center \n                      justify-center gap-2\"\n                  >\n                    <Play className=\"w-5 h-5\" />\n                    세션 시작\n                  </button>\n                  <button\n                    onClick={() => setShowCancelModal(true)}\n                    className=\"px-4 py-3 bg-[#F1F3F5] text-[#606060] rounded-[6px] \n                      font-medium hover:bg-[#E7E7E7] transition-colors\"\n                  >\n                    <XCircle className=\"w-5 h-5\" />\n                  </button>\n                </>\n              ) : isParticipant ? (\n                <button\n                  onClick={handleLeaveSession}\n                  className=\"flex-1 py-3 bg-[#F1F3F5] text-[#606060] rounded-[6px] \n                    font-medium hover:bg-[#E7E7E7] transition-colors flex items-center \n                    justify-center gap-2\"\n                >\n                  <LogOut className=\"w-5 h-5\" />\n                  세션 나가기\n                </button>\n              ) : (\n                <button\n                  onClick={handleJoinSession}\n                  className=\"flex-1 py-3 bg-[#00C471] text-white rounded-[6px] \n                    font-medium hover:bg-[#00B267] transition-colors flex items-center \n                    justify-center gap-2\"\n                >\n                  <UserPlus className=\"w-5 h-5\" />\n                  세션 참가\n                </button>\n              )}\n            </>\n          )}\n          \n          {session.status === 'ONGOING' && (\n            <>\n              {(isHost || isParticipant) ? (\n                <>\n                  <button\n                    onClick={() => navigate(`/group-session/room/${sessionId}`)}\n                    className=\"flex-1 py-3 bg-[#00C471] text-white rounded-[6px] \n                      font-medium hover:bg-[#00B267] transition-colors flex items-center \n                      justify-center gap-2\"\n                  >\n                    <Play className=\"w-5 h-5\" />\n                    세션 입장\n                  </button>\n                  {isHost && (\n                    <button\n                      onClick={handleEndSession}\n                      className=\"px-4 py-3 bg-[#EA4335] text-white rounded-[6px] \n                        font-medium hover:bg-[#D33B2C] transition-colors\"\n                    >\n                      <Square className=\"w-5 h-5\" />\n                    </button>\n                  )}\n                </>\n              ) : (\n                <button\n                  disabled\n                  className=\"flex-1 py-3 bg-[#F1F3F5] text-[#929292] rounded-[6px] \n                    font-medium cursor-not-allowed\"\n                >\n                  진행 중인 세션\n                </button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* 참가자 목록 */}\n      <div className=\"p-6\">\n        <h2 className=\"text-[18px] font-bold text-[#111111] mb-4\">\n          참가자 ({participants.length}/{session.maxParticipants})\n        </h2>\n        \n        {participants.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Users className=\"w-12 h-12 text-[#B5B5B5] mx-auto mb-4\" />\n            <p className=\"text-[#929292]\">아직 참가자가 없습니다</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {participants.map((participant) => (\n              <div\n                key={participant.id}\n                className=\"bg-white rounded-[10px] p-4 border border-[#E7E7E7] \n                  flex items-center justify-between\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  {participant.profileImage ? (\n                    <img\n                      src={participant.profileImage}\n                      alt={participant.name}\n                      className=\"w-10 h-10 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-10 h-10 rounded-full bg-[#F1F3F5] \n                      flex items-center justify-center\">\n                      <Users className=\"w-5 h-5 text-[#929292]\" />\n                    </div>\n                  )}\n                  <div>\n                    <p className=\"text-[14px] font-medium text-[#111111]\">\n                      {participant.name}\n                      {participant.id === session.hostId && (\n                        <span className=\"ml-2 px-2 py-0.5 bg-[#00C471] text-white \n                          text-[10px] rounded-full\">호스트</span>\n                      )}\n                    </p>\n                    <p className=\"text-[12px] text-[#606060]\">\n                      {participant.language} • {participant.level}\n                    </p>\n                  </div>\n                </div>\n                \n                {isHost && participant.id !== session.hostId && session.status !== 'COMPLETED' && (\n                  <button\n                    onClick={() => handleKickParticipant(participant.id, participant.name)}\n                    className=\"p-2 text-[#929292] hover:text-[#EA4335] hover:bg-[#FFF5F5] \n                      rounded-full transition-colors\"\n                  >\n                    <UserMinus className=\"w-4 h-4\" />\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 세션 수정 모달 */}\n      {showEditModal && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 p-4 overlay-strong\">\n          <div className=\"bg-white rounded-[20px] w-full max-w-[500px] max-h-[80vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-[#E7E7E7]\">\n              <h2 className=\"text-[20px] font-bold text-[#111111]\">세션 정보 수정</h2>\n            </div>\n            \n            <div className=\"p-6 space-y-4\">\n              <div>\n                <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                  세션 제목\n                </label>\n                <input\n                  type=\"text\"\n                  value={editSession.title}\n                  onChange={(e) => setEditSession({ ...editSession, title: e.target.value })}\n                  className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                    focus:border-[#111111] outline-none\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                  설명\n                </label>\n                <textarea\n                  value={editSession.description}\n                  onChange={(e) => setEditSession({ ...editSession, description: e.target.value })}\n                  rows={3}\n                  className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                    focus:border-[#111111] outline-none resize-none\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    최대 참가자\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editSession.maxParticipants}\n                    onChange={(e) => setEditSession({ ...editSession, maxParticipants: parseInt(e.target.value) })}\n                    min=\"2\"\n                    max=\"10\"\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    진행 시간 (분)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={editSession.durationMinutes}\n                    onChange={(e) => setEditSession({ ...editSession, durationMinutes: parseInt(e.target.value) })}\n                    min=\"30\"\n                    max=\"180\"\n                    step=\"30\"\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                  주제\n                </label>\n                <input\n                  type=\"text\"\n                  value={editSession.topic}\n                  onChange={(e) => setEditSession({ ...editSession, topic: e.target.value })}\n                  className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                    focus:border-[#111111] outline-none\"\n                />\n              </div>\n            </div>\n\n            <div className=\"p-6 border-t border-[#E7E7E7] flex gap-3\">\n              <button\n                onClick={() => setShowEditModal(false)}\n                className=\"flex-1 py-3 bg-[#F1F3F5] text-[#606060] rounded-[6px] \n                  font-medium hover:bg-[#E7E7E7] transition-colors\"\n              >\n                취소\n              </button>\n              <button\n                onClick={handleUpdateSession}\n                className=\"flex-1 py-3 bg-[#00C471] text-white rounded-[6px] \n                  font-medium hover:bg-[#00B267] transition-colors\"\n              >\n                수정하기\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 세션 취소 모달 */}\n      {showCancelModal && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 p-4 overlay-strong\">\n          <div className=\"bg-white rounded-[20px] w-full max-w-[400px]\">\n            <div className=\"p-6 border-b border-[#E7E7E7]\">\n              <h2 className=\"text-[20px] font-bold text-[#111111]\">세션 취소</h2>\n            </div>\n            \n            <div className=\"p-6\">\n              <p className=\"text-[14px] text-[#606060] mb-4\">\n                세션을 취소하면 모든 참가자에게 알림이 전송됩니다.\n              </p>\n              <textarea\n                value={cancelReason}\n                onChange={(e) => setCancelReason(e.target.value)}\n                placeholder=\"취소 사유를 입력하세요 (선택사항)\"\n                rows={3}\n                className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                  focus:border-[#111111] outline-none resize-none\"\n              />\n            </div>\n\n            <div className=\"p-6 border-t border-[#E7E7E7] flex gap-3\">\n              <button\n                onClick={() => {\n                  setShowCancelModal(false);\n                  setCancelReason('');\n                }}\n                className=\"flex-1 py-3 bg-[#F1F3F5] text-[#606060] rounded-[6px] \n                  font-medium hover:bg-[#E7E7E7] transition-colors\"\n              >\n                돌아가기\n              </button>\n              <button\n                onClick={handleCancelSession}\n                className=\"flex-1 py-3 bg-[#EA4335] text-white rounded-[6px] \n                  font-medium hover:bg-[#D33B2C] transition-colors\"\n              >\n                세션 취소\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/GroupSession/GroupSessionPage.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [activeTab, filters, loadSessions]","fix":{"range":[1576,1596],"text":"[activeTab, filters, loadSessions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  getPublicGroupSessions,\n  getMyGroupSessions,\n  getUpcomingGroupSessions,\n  getOngoingGroupSessions,\n  createGroupSession,\n  joinGroupSessionByCode\n} from '../../api/groupSession';\nimport Header from '../../components/Header';\nimport { useAlert } from '../../hooks/useAlert';\nimport { \n  Users, Calendar, Clock, Globe, Lock, Video, Mic, MessageSquare, \n  Plus, Search, Filter, ChevronRight, UserPlus, Code, Play, BookOpen,\n  Target, Hash, Star, AlertCircle, CheckCircle, XCircle\n} from 'lucide-react';\n\nexport default function GroupSessionPage() {\n  const navigate = useNavigate();\n  const { showError, showSuccess } = useAlert();\n  \n  // 상태 관리\n  const [sessions, setSessions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('PUBLIC'); // PUBLIC, MY, UPCOMING, ONGOING\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showJoinModal, setShowJoinModal] = useState(false);\n  const [joinCode, setJoinCode] = useState('');\n  const [filters, setFilters] = useState({\n    language: '',\n    level: '',\n    status: ''\n  });\n  \n  // 새 세션 생성 폼\n  const [newSession, setNewSession] = useState({\n    title: '',\n    description: '',\n    language: 'English',\n    targetLevel: 'Intermediate',\n    maxParticipants: 6,\n    scheduledStartTime: '',\n    durationMinutes: 60,\n    isPublic: true,\n    sessionType: 'VIDEO',\n    topic: '',\n    tags: []\n  });\n\n  useEffect(() => {\n    loadSessions();\n  }, [activeTab, filters]);\n\n  const loadSessions = async () => {\n    try {\n      setLoading(true);\n      let data;\n      \n      switch (activeTab) {\n        case 'PUBLIC': {\n          const publicResponse = await getPublicGroupSessions({\n            language: filters.language,\n            level: filters.level,\n            status: filters.status\n          });\n          data = publicResponse.data?.content || publicResponse.data || [];\n          break;\n        }\n          \n        case 'MY': {\n          const myResponse = await getMyGroupSessions();\n          data = myResponse.data || [];\n          break;\n        }\n          \n        case 'UPCOMING': {\n          const upcomingResponse = await getUpcomingGroupSessions();\n          data = upcomingResponse.data?.content || upcomingResponse.data || [];\n          break;\n        }\n          \n        case 'ONGOING': {\n          const ongoingResponse = await getOngoingGroupSessions();\n          data = ongoingResponse.data || [];\n          break;\n        }\n          \n        default: {\n          data = [];\n        }\n      }\n      \n      setSessions(Array.isArray(data) ? data : []);\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n      showError('세션 목록을 불러오는데 실패했습니다.');\n      setSessions([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateSession = async () => {\n    if (!newSession.title || !newSession.scheduledStartTime) {\n      showError('필수 정보를 입력해주세요.');\n      return;\n    }\n\n    try {\n      const response = await createGroupSession(newSession);\n      showSuccess('세션이 생성되었습니다.');\n      setShowCreateModal(false);\n      setNewSession({\n        title: '',\n        description: '',\n        language: 'English',\n        targetLevel: 'Intermediate',\n        maxParticipants: 6,\n        scheduledStartTime: '',\n        durationMinutes: 60,\n        isPublic: true,\n        sessionType: 'VIDEO',\n        topic: '',\n        tags: []\n      });\n      loadSessions();\n      \n      // 생성된 세션 상세 페이지로 이동\n      if (response.data?.id) {\n        navigate(`/group-session/${response.data.id}`);\n      }\n    } catch (error) {\n      showError('세션 생성에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleJoinByCode = async () => {\n    if (!joinCode || joinCode.length !== 6) {\n      showError('올바른 참가 코드를 입력해주세요.');\n      return;\n    }\n\n    try {\n      const response = await joinGroupSessionByCode(joinCode);\n      showSuccess('세션에 참가했습니다.');\n      setShowJoinModal(false);\n      setJoinCode('');\n      \n      // 세션 룸으로 이동\n      if (response.data?.id) {\n        navigate(`/group-session/room/${response.data.id}`);\n      }\n    } catch (error) {\n      showError('세션 참가에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const getSessionTypeIcon = (type) => {\n    switch (type) {\n      case 'VIDEO': return <Video className=\"w-4 h-4\" />;\n      case 'AUDIO': return <Mic className=\"w-4 h-4\" />;\n      case 'TEXT': return <MessageSquare className=\"w-4 h-4\" />;\n      default: return <Users className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getSessionStatusBadge = (status) => {\n    switch (status) {\n      case 'SCHEDULED':\n        return <span className=\"px-2 py-1 bg-[#4285F4] text-white text-[12px] rounded-full\">예정</span>;\n      case 'ONGOING':\n        return <span className=\"px-2 py-1 bg-[#00C471] text-white text-[12px] rounded-full\">진행중</span>;\n      case 'COMPLETED':\n        return <span className=\"px-2 py-1 bg-[#606060] text-white text-[12px] rounded-full\">종료</span>;\n      case 'CANCELLED':\n        return <span className=\"px-2 py-1 bg-[#EA4335] text-white text-[12px] rounded-full\">취소</span>;\n      default:\n        return null;\n    }\n  };\n\n  const formatDateTime = (dateString) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diff = date - now;\n    \n    // 24시간 이내면 상대 시간 표시\n    if (diff > 0 && diff < 86400000) {\n      const hours = Math.floor(diff / 3600000);\n      const minutes = Math.floor((diff % 3600000) / 60000);\n      if (hours > 0) return `${hours}시간 ${minutes}분 후`;\n      return `${minutes}분 후`;\n    }\n    \n    // 그 외에는 날짜와 시간 표시\n    return date.toLocaleDateString('ko-KR', {\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n        <Header />\n        <div className=\"flex justify-center items-center h-[400px]\">\n          <div className=\"text-[#929292]\">로딩 중...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      \n      {/* 헤더 섹션 */}\n      <div className=\"bg-white p-6 border-b border-[#E7E7E7]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-[24px] font-bold text-[#111111]\">그룹 세션</h1>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setShowJoinModal(true)}\n              className=\"px-4 py-2 bg-[#F1F3F5] text-[#606060] rounded-full text-[14px] \n                font-medium hover:bg-[#E7E7E7] transition-colors flex items-center gap-2\"\n            >\n              <Code className=\"w-4 h-4\" />\n              코드로 참가\n            </button>\n            <button\n              onClick={() => setShowCreateModal(true)}\n              className=\"px-4 py-2 bg-[#00C471] text-white rounded-full text-[14px] \n                font-medium hover:bg-[#00B267] transition-colors flex items-center gap-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              새 세션\n            </button>\n          </div>\n        </div>\n\n        {/* 탭 */}\n        <div className=\"flex gap-2 mb-4\">\n          {[\n            { id: 'PUBLIC', label: '공개 세션', icon: <Globe className=\"w-4 h-4\" /> },\n            { id: 'MY', label: '내 세션', icon: <Users className=\"w-4 h-4\" /> },\n            { id: 'UPCOMING', label: '예정', icon: <Calendar className=\"w-4 h-4\" /> },\n            { id: 'ONGOING', label: '진행중', icon: <Play className=\"w-4 h-4\" /> }\n          ].map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`px-4 py-2 rounded-full text-[14px] font-medium transition-colors\n                flex items-center gap-2\n                ${activeTab === tab.id\n                  ? 'bg-[#111111] text-white'\n                  : 'bg-[#F1F3F5] text-[#606060] hover:bg-[#E7E7E7]'\n                }`}\n            >\n              {tab.icon}\n              {tab.label}\n            </button>\n          ))}\n        </div>\n\n        {/* 필터 (공개 세션 탭에서만 표시) */}\n        {activeTab === 'PUBLIC' && (\n          <div className=\"flex gap-2\">\n            <select\n              value={filters.language}\n              onChange={(e) => setFilters({ ...filters, language: e.target.value })}\n              className=\"px-3 py-2 bg-[#F1F3F5] text-[#606060] rounded-[6px] text-[14px]\n                border border-transparent focus:border-[#111111] outline-none\"\n            >\n              <option value=\"\">모든 언어</option>\n              <option value=\"English\">영어</option>\n              <option value=\"Korean\">한국어</option>\n              <option value=\"Japanese\">일본어</option>\n              <option value=\"Chinese\">중국어</option>\n            </select>\n            <select\n              value={filters.level}\n              onChange={(e) => setFilters({ ...filters, level: e.target.value })}\n              className=\"px-3 py-2 bg-[#F1F3F5] text-[#606060] rounded-[6px] text-[14px]\n                border border-transparent focus:border-[#111111] outline-none\"\n            >\n              <option value=\"\">모든 레벨</option>\n              <option value=\"Beginner\">초급</option>\n              <option value=\"Intermediate\">중급</option>\n              <option value=\"Advanced\">고급</option>\n            </select>\n          </div>\n        )}\n      </div>\n\n      {/* 세션 리스트 */}\n      <div className=\"p-6\">\n        {sessions.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Users className=\"w-12 h-12 text-[#B5B5B5] mx-auto mb-4\" />\n            <p className=\"text-[#929292]\">\n              {activeTab === 'MY' ? '참가한 세션이 없습니다' : '세션이 없습니다'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {sessions.map((session) => (\n              <div\n                key={session.id}\n                onClick={() => navigate(`/group-session/${session.id}`)}\n                className=\"bg-white rounded-[10px] p-4 border border-[#E7E7E7] \n                  hover:border-[#00C471] transition-all cursor-pointer\"\n              >\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      {getSessionStatusBadge(session.status)}\n                      {session.isPublic ? (\n                        <Globe className=\"w-4 h-4 text-[#606060]\" />\n                      ) : (\n                        <Lock className=\"w-4 h-4 text-[#606060]\" />\n                      )}\n                      {getSessionTypeIcon(session.sessionType)}\n                    </div>\n                    <h3 className=\"font-medium text-[16px] text-[#111111] mb-1\">\n                      {session.title}\n                    </h3>\n                    {session.description && (\n                      <p className=\"text-[14px] text-[#606060] line-clamp-2\">\n                        {session.description}\n                      </p>\n                    )}\n                  </div>\n                  <ChevronRight className=\"w-5 h-5 text-[#B5B5B5] ml-3\" />\n                </div>\n\n                <div className=\"flex items-center gap-4 text-[12px] text-[#929292]\">\n                  <div className=\"flex items-center gap-1\">\n                    <BookOpen className=\"w-3.5 h-3.5\" />\n                    {session.language}\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Target className=\"w-3.5 h-3.5\" />\n                    {session.targetLevel}\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"w-3.5 h-3.5\" />\n                    {session.currentParticipants || 0}/{session.maxParticipants}\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"w-3.5 h-3.5\" />\n                    {session.durationMinutes}분\n                  </div>\n                </div>\n\n                {session.scheduledStartTime && (\n                  <div className=\"mt-3 pt-3 border-t border-[#F1F3F5]\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-[12px] text-[#606060]\">\n                        {formatDateTime(session.scheduledStartTime)}\n                      </span>\n                      {session.hostName && (\n                        <span className=\"text-[12px] text-[#929292]\">\n                          호스트: {session.hostName}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {session.tags && session.tags.length > 0 && (\n                  <div className=\"mt-2 flex flex-wrap gap-1\">\n                    {session.tags.map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"px-2 py-1 bg-[#F1F3F5] text-[#606060] text-[11px] rounded-full\"\n                      >\n                        #{tag}\n                      </span>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 세션 생성 모달 */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 p-4 overlay-strong\">\n          <div className=\"bg-white rounded-[20px] w-full max-w-[500px] max-h-[80vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-[#E7E7E7]\">\n              <h2 className=\"text-[20px] font-bold text-[#111111]\">새 그룹 세션 만들기</h2>\n            </div>\n            \n            <div className=\"p-6 space-y-4\">\n              <div>\n                <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                  세션 제목 *\n                </label>\n                <input\n                  type=\"text\"\n                  value={newSession.title}\n                  onChange={(e) => setNewSession({ ...newSession, title: e.target.value })}\n                  placeholder=\"예: 영어 프리토킹 모임\"\n                  className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                    focus:border-[#111111] outline-none\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                  설명\n                </label>\n                <textarea\n                  value={newSession.description}\n                  onChange={(e) => setNewSession({ ...newSession, description: e.target.value })}\n                  placeholder=\"세션에 대한 간단한 설명을 입력하세요\"\n                  rows={3}\n                  className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                    focus:border-[#111111] outline-none resize-none\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    학습 언어\n                  </label>\n                  <select\n                    value={newSession.language}\n                    onChange={(e) => setNewSession({ ...newSession, language: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  >\n                    <option value=\"English\">영어</option>\n                    <option value=\"Korean\">한국어</option>\n                    <option value=\"Japanese\">일본어</option>\n                    <option value=\"Chinese\">중국어</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    목표 레벨\n                  </label>\n                  <select\n                    value={newSession.targetLevel}\n                    onChange={(e) => setNewSession({ ...newSession, targetLevel: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  >\n                    <option value=\"Beginner\">초급</option>\n                    <option value=\"Intermediate\">중급</option>\n                    <option value=\"Advanced\">고급</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    세션 유형\n                  </label>\n                  <select\n                    value={newSession.sessionType}\n                    onChange={(e) => setNewSession({ ...newSession, sessionType: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  >\n                    <option value=\"VIDEO\">화상 통화</option>\n                    <option value=\"AUDIO\">음성 통화</option>\n                    <option value=\"TEXT\">텍스트 채팅</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    최대 참가자\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={newSession.maxParticipants}\n                    onChange={(e) => setNewSession({ ...newSession, maxParticipants: parseInt(e.target.value) })}\n                    min=\"2\"\n                    max=\"10\"\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    시작 시간 *\n                  </label>\n                  <input\n                    type=\"datetime-local\"\n                    value={newSession.scheduledStartTime}\n                    onChange={(e) => setNewSession({ ...newSession, scheduledStartTime: e.target.value })}\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                    진행 시간 (분)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={newSession.durationMinutes}\n                    onChange={(e) => setNewSession({ ...newSession, durationMinutes: parseInt(e.target.value) })}\n                    min=\"30\"\n                    max=\"180\"\n                    step=\"30\"\n                    className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#111111] outline-none\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                  주제\n                </label>\n                <input\n                  type=\"text\"\n                  value={newSession.topic}\n                  onChange={(e) => setNewSession({ ...newSession, topic: e.target.value })}\n                  placeholder=\"예: 일상 대화, 비즈니스 영어, 여행 회화\"\n                  className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                    focus:border-[#111111] outline-none\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-[14px] font-medium text-[#606060] mb-2\">\n                  공개 설정\n                </label>\n                <div className=\"flex gap-4\">\n                  <label className=\"flex items-center gap-2 cursor-pointer\">\n                    <input\n                      type=\"radio\"\n                      checked={newSession.isPublic}\n                      onChange={() => setNewSession({ ...newSession, isPublic: true })}\n                      className=\"w-4 h-4 text-[#00C471]\"\n                    />\n                    <span className=\"text-[14px] text-[#606060]\">공개 (누구나 참가 가능)</span>\n                  </label>\n                  <label className=\"flex items-center gap-2 cursor-pointer\">\n                    <input\n                      type=\"radio\"\n                      checked={!newSession.isPublic}\n                      onChange={() => setNewSession({ ...newSession, isPublic: false })}\n                      className=\"w-4 h-4 text-[#00C471]\"\n                    />\n                    <span className=\"text-[14px] text-[#606060]\">비공개 (초대만 가능)</span>\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-6 border-t border-[#E7E7E7] flex gap-3\">\n              <button\n                onClick={() => setShowCreateModal(false)}\n                className=\"flex-1 py-3 bg-[#F1F3F5] text-[#606060] rounded-[6px] \n                  font-medium hover:bg-[#E7E7E7] transition-colors\"\n              >\n                취소\n              </button>\n              <button\n                onClick={handleCreateSession}\n                className=\"flex-1 py-3 bg-[#00C471] text-white rounded-[6px] \n                  font-medium hover:bg-[#00B267] transition-colors\"\n              >\n                생성하기\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 참가 코드 입력 모달 */}\n      {showJoinModal && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-50 p-4 overlay-strong\">\n          <div className=\"bg-white rounded-[20px] w-full max-w-[400px]\">\n            <div className=\"p-6 border-b border-[#E7E7E7]\">\n              <h2 className=\"text-[20px] font-bold text-[#111111]\">참가 코드 입력</h2>\n            </div>\n            \n            <div className=\"p-6\">\n              <p className=\"text-[14px] text-[#606060] mb-4\">\n                호스트로부터 받은 6자리 참가 코드를 입력하세요\n              </p>\n              <input\n                type=\"text\"\n                value={joinCode}\n                onChange={(e) => setJoinCode(e.target.value.toUpperCase())}\n                placeholder=\"예: ABC123\"\n                maxLength={6}\n                className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                  focus:border-[#111111] outline-none text-center text-[20px] font-mono\n                  uppercase tracking-wider\"\n              />\n            </div>\n\n            <div className=\"p-6 border-t border-[#E7E7E7] flex gap-3\">\n              <button\n                onClick={() => {\n                  setShowJoinModal(false);\n                  setJoinCode('');\n                }}\n                className=\"flex-1 py-3 bg-[#F1F3F5] text-[#606060] rounded-[6px] \n                  font-medium hover:bg-[#E7E7E7] transition-colors\"\n              >\n                취소\n              </button>\n              <button\n                onClick={handleJoinByCode}\n                disabled={joinCode.length !== 6}\n                className={`flex-1 py-3 rounded-[6px] font-medium transition-colors\n                  ${joinCode.length === 6\n                    ? 'bg-[#00C471] text-white hover:bg-[#00B267]'\n                    : 'bg-[#F1F3F5] text-[#929292] cursor-not-allowed'\n                  }`}\n              >\n                참가하기\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/GroupSession/GroupSessionRoomPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'selectedParticipant' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":50,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedParticipant"},"fix":{"range":[1734,1753],"text":""},"desc":"Remove unused variable 'selectedParticipant'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setSelectedParticipant' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":50,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":53,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSelectedParticipant"},"fix":{"range":[1753,1777],"text":""},"desc":"Remove unused variable 'setSelectedParticipant'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadSessionAndJoin' and 'startTime'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSessionDuration' needs the current value of 'startTime'.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadSessionAndJoin, sessionId, startTime]","fix":{"range":[3200,3211],"text":"[loadSessionAndJoin, sessionId, startTime]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'screenStream' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":280,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"screenStream"},"fix":{"range":[8243,8368],"text":""},"desc":"Remove unused variable 'screenStream'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  getGroupSessionDetails,\n  getSessionParticipants,\n  endGroupSession,\n  leaveGroupSession,\n  submitSessionFeedback\n} from '../../api/groupSession';\nimport {\n  getIcebreakers,\n  analyzeConversation,\n  generateSessionSummary,\n  translateExpression,\n  transcribeAudio,\n  saveSessionFeedback\n} from '../../api/groupSessionAI';\nimport Header from '../../components/Header';\nimport { useAlert } from '../../hooks/useAlert';\nimport { \n  Video, VideoOff, Mic, MicOff, MessageSquare, Users, \n  PhoneOff, Settings, Share, Grid, Maximize2, Volume2,\n  VolumeX, Camera, CameraOff, Monitor, Hand, Smile,\n  FileText, Clock, Star, ChevronLeft, Send, Bot,\n  Lightbulb, Languages, HelpCircle, BrainCircuit\n} from 'lucide-react';\n\nexport default function GroupSessionRoomPage() {\n  const { sessionId } = useParams();\n  const navigate = useNavigate();\n  const { showError, showSuccess, showInfo } = useAlert();\n  \n  // 비디오/오디오 상태\n  const [videoEnabled, setVideoEnabled] = useState(true);\n  const [audioEnabled, setAudioEnabled] = useState(true);\n  const [screenSharing, setScreenSharing] = useState(false);\n  const [handRaised, setHandRaised] = useState(false);\n  \n  // 세션 정보\n  const [session, setSession] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [isHost, setIsHost] = useState(false);\n  const [loading, setLoading] = useState(true);\n  \n  // UI 상태\n  const [showChat, setShowChat] = useState(false);\n  const [showParticipants, setShowParticipants] = useState(false);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [gridView, setGridView] = useState(true);\n  const [selectedParticipant, setSelectedParticipant] = useState(null);\n  \n  // 채팅\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const chatContainerRef = useRef(null);\n  \n  // 피드백\n  const [feedback, setFeedback] = useState({\n    rating: 0,\n    comment: '',\n    hostRating: 0,\n    wouldJoinAgain: true\n  });\n  \n  // 세션 시간 추적\n  const [sessionDuration, setSessionDuration] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  \n  // AI 기능 상태\n  const [showAIPanel, setShowAIPanel] = useState(false);\n  const [icebreakers, setIcebreakers] = useState([]);\n  const [conversationFeedback, setConversationFeedback] = useState(null);\n  const [sessionTranscript, setSessionTranscript] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [translationInput, setTranslationInput] = useState('');\n  const [translationResult, setTranslationResult] = useState(null);\n  \n  const currentUserId = localStorage.getItem('userId');\n  const localVideoRef = useRef(null);\n  const remoteVideoRefs = useRef({});\n  const mediaRecorderRef = useRef(null);\n  const recordedChunksRef = useRef([]);\n\n  useEffect(() => {\n    loadSessionAndJoin();\n    \n    // 세션 타이머 시작\n    setStartTime(Date.now());\n    const timer = setInterval(() => {\n      setSessionDuration(Math.floor((Date.now() - startTime) / 1000));\n    }, 1000);\n    \n    return () => {\n      clearInterval(timer);\n      handleCleanup();\n    };\n  }, [sessionId]);\n\n  const loadSessionAndJoin = async () => {\n    try {\n      setLoading(true);\n      \n      // 세션 정보 로드\n      const sessionResponse = await getGroupSessionDetails(sessionId);\n      const sessionData = sessionResponse.data;\n      setSession(sessionData);\n      \n      // 호스트 여부 확인\n      setIsHost(sessionData.hostId === currentUserId);\n      \n      // 참가자 목록 로드\n      const participantsResponse = await getSessionParticipants(sessionId);\n      setParticipants(participantsResponse.data || []);\n      \n      // WebRTC 초기화 (실제 구현 시)\n      initializeWebRTC();\n      \n      // AI 아이스브레이커 로드\n      loadIcebreakers();\n      \n    } catch (error) {\n      console.error('Failed to load session:', error);\n      showError('세션 입장에 실패했습니다.');\n      navigate('/group-session');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // AI 기능들\n  const loadIcebreakers = async () => {\n    try {\n      const response = await getIcebreakers(\n        session?.language || 'English',\n        session?.targetLevel || 'Intermediate',\n        session?.topic\n      );\n      if (response.success) {\n        setIcebreakers(response.data);\n      }\n    } catch (error) {\n      console.error('Failed to load icebreakers:', error);\n    }\n  };\n  \n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      recordedChunksRef.current = [];\n      \n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          recordedChunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorderRef.current.onstop = async () => {\n        const blob = new Blob(recordedChunksRef.current, { type: 'audio/webm' });\n        await processRecording(blob);\n      };\n      \n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      showInfo('녹음을 시작했습니다.');\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n      showError('녹음을 시작할 수 없습니다.');\n    }\n  };\n  \n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      showInfo('녹음을 종료했습니다.');\n    }\n  };\n  \n  const processRecording = async (audioBlob) => {\n    try {\n      // 음성을 텍스트로 변환\n      const transcriptionResponse = await transcribeAudio(audioBlob);\n      if (transcriptionResponse.success) {\n        const transcript = transcriptionResponse.data.transcript;\n        \n        // 대화 기록에 추가\n        setSessionTranscript(prev => [...prev, {\n          userId: currentUserId,\n          text: transcript,\n          timestamp: new Date().toISOString()\n        }]);\n        \n        // AI 피드백 받기\n        const feedbackResponse = await analyzeConversation(\n          transcript,\n          session?.language || 'English',\n          currentUserId\n        );\n        \n        if (feedbackResponse.success) {\n          setConversationFeedback(feedbackResponse.data);\n          saveSessionFeedback(sessionId, feedbackResponse.data);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to process recording:', error);\n    }\n  };\n  \n  const handleTranslate = async () => {\n    if (!translationInput.trim()) return;\n    \n    try {\n      const response = await translateExpression(\n        translationInput,\n        session?.language || 'English',\n        'Korean'\n      );\n      \n      if (response.success) {\n        setTranslationResult(response.data);\n      }\n    } catch (error) {\n      console.error('Translation failed:', error);\n      showError('번역에 실패했습니다.');\n    }\n  };\n\n  const initializeWebRTC = async () => {\n    // 실제 WebRTC 구현\n    // 여기서는 더미 구현\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoEnabled,\n        audio: audioEnabled\n      });\n      \n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error('Failed to access media devices:', error);\n      showError('카메라/마이크 접근에 실패했습니다.');\n    }\n  };\n\n  const handleCleanup = () => {\n    // WebRTC 정리\n    if (localVideoRef.current && localVideoRef.current.srcObject) {\n      localVideoRef.current.srcObject.getTracks().forEach(track => track.stop());\n    }\n  };\n\n  const toggleVideo = () => {\n    setVideoEnabled(!videoEnabled);\n    // WebRTC 비디오 트랙 토글\n    if (localVideoRef.current && localVideoRef.current.srcObject) {\n      const videoTrack = localVideoRef.current.srcObject.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !videoEnabled;\n      }\n    }\n  };\n\n  const toggleAudio = () => {\n    setAudioEnabled(!audioEnabled);\n    // WebRTC 오디오 트랙 토글\n    if (localVideoRef.current && localVideoRef.current.srcObject) {\n      const audioTrack = localVideoRef.current.srcObject.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !audioEnabled;\n      }\n    }\n  };\n\n  const toggleScreenShare = async () => {\n    if (!screenSharing) {\n      try {\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({\n          video: true,\n          audio: false\n        });\n        setScreenSharing(true);\n        showSuccess('화면 공유를 시작했습니다.');\n      } catch (error) {\n        console.error('Screen share failed:', error);\n        showError('화면 공유에 실패했습니다.');\n      }\n    } else {\n      setScreenSharing(false);\n      showInfo('화면 공유를 종료했습니다.');\n    }\n  };\n\n  const toggleHandRaise = () => {\n    setHandRaised(!handRaised);\n    if (!handRaised) {\n      showInfo('손을 들었습니다.');\n      // WebSocket으로 손들기 알림 전송\n    } else {\n      showInfo('손을 내렸습니다.');\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) return;\n    \n    const message = {\n      id: Date.now(),\n      userId: currentUserId,\n      userName: '나',\n      content: newMessage,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages([...messages, message]);\n    setNewMessage('');\n    \n    // WebSocket으로 메시지 전송\n    \n    // 스크롤 최하단으로\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  };\n\n  const handleEndSession = async () => {\n    if (!confirm('정말 세션을 종료하시겠습니까?')) return;\n    \n    try {\n      // AI 세션 요약 생성\n      if (sessionTranscript.length > 0) {\n        const transcriptText = sessionTranscript.map(t => t.text).join(' ');\n        const duration = Math.floor(sessionDuration / 60);\n        \n        try {\n          const summaryResponse = await generateSessionSummary(\n            sessionId,\n            transcriptText,\n            duration,\n            participants.length\n          );\n          \n          if (summaryResponse.success) {\n            // 요약을 로컬 스토리지에 저장\n            localStorage.setItem(`session_summary_${sessionId}`, JSON.stringify(summaryResponse.data));\n          }\n        } catch (summaryError) {\n          console.error('Failed to generate summary:', summaryError);\n        }\n      }\n      \n      if (isHost) {\n        await endGroupSession(sessionId);\n        showSuccess('세션이 종료되었습니다.');\n      } else {\n        await leaveGroupSession(sessionId);\n        showInfo('세션에서 나갔습니다.');\n      }\n      \n      setShowFeedback(true);\n    } catch (error) {\n      showError('세션 종료에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleSubmitFeedback = async () => {\n    try {\n      await submitSessionFeedback(sessionId, feedback);\n      showSuccess('피드백이 제출되었습니다.');\n      navigate('/group-session');\n    } catch (error) {\n      console.error('Failed to submit feedback:', error);\n      // 피드백 실패해도 나가기\n      navigate('/group-session');\n    }\n  };\n\n  const formatDuration = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-black min-h-screen flex items-center justify-center\">\n        <div className=\"text-white\">세션 연결 중...</div>\n      </div>\n    );\n  }\n\n  // 피드백 화면\n  if (showFeedback) {\n    return (\n      <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n        <Header />\n        <div className=\"p-6\">\n          <h1 className=\"text-[24px] font-bold text-[#111111] mb-6\">세션 피드백</h1>\n          \n          <div className=\"bg-white rounded-[10px] p-6 space-y-6\">\n            <div>\n              <p className=\"text-[16px] font-medium text-[#111111] mb-3\">\n                세션은 어떠셨나요?\n              </p>\n              <div className=\"flex gap-2\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <button\n                    key={star}\n                    onClick={() => setFeedback({ ...feedback, rating: star })}\n                    className=\"p-2\"\n                  >\n                    <Star\n                      className={`w-8 h-8 ${\n                        star <= feedback.rating\n                          ? 'fill-[#FFD700] text-[#FFD700]'\n                          : 'text-[#E7E7E7]'\n                      }`}\n                    />\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {isHost === false && (\n              <div>\n                <p className=\"text-[16px] font-medium text-[#111111] mb-3\">\n                  호스트 평가\n                </p>\n                <div className=\"flex gap-2\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <button\n                      key={star}\n                      onClick={() => setFeedback({ ...feedback, hostRating: star })}\n                      className=\"p-2\"\n                    >\n                      <Star\n                        className={`w-8 h-8 ${\n                          star <= feedback.hostRating\n                            ? 'fill-[#FFD700] text-[#FFD700]'\n                            : 'text-[#E7E7E7]'\n                        }`}\n                      />\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <div>\n              <label className=\"block text-[16px] font-medium text-[#111111] mb-2\">\n                추가 의견\n              </label>\n              <textarea\n                value={feedback.comment}\n                onChange={(e) => setFeedback({ ...feedback, comment: e.target.value })}\n                placeholder=\"세션에 대한 의견을 남겨주세요\"\n                rows={4}\n                className=\"w-full px-4 py-3 border border-[#E7E7E7] rounded-[6px]\n                  focus:border-[#111111] outline-none resize-none\"\n              />\n            </div>\n\n            <div>\n              <label className=\"flex items-center gap-3 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={feedback.wouldJoinAgain}\n                  onChange={(e) => setFeedback({ ...feedback, wouldJoinAgain: e.target.checked })}\n                  className=\"w-5 h-5 text-[#00C471] rounded\"\n                />\n                <span className=\"text-[14px] text-[#606060]\">\n                  다음에도 이 호스트의 세션에 참가하고 싶습니다\n                </span>\n              </label>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={() => navigate('/group-session')}\n                className=\"flex-1 py-3 bg-[#F1F3F5] text-[#606060] rounded-[6px]\n                  font-medium hover:bg-[#E7E7E7] transition-colors\"\n              >\n                건너뛰기\n              </button>\n              <button\n                onClick={handleSubmitFeedback}\n                className=\"flex-1 py-3 bg-[#00C471] text-white rounded-[6px]\n                  font-medium hover:bg-[#00B267] transition-colors\"\n              >\n                제출하기\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // 메인 세션 룸\n  return (\n    <div className=\"bg-black min-h-screen relative\">\n      {/* 상단 바 */}\n      <div className=\"absolute top-0 left-0 right-0 z-20 bg-gradient-to-b from-black/80 to-transparent p-4\">\n        <div className=\"max-w-[1440px] mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={() => navigate(`/group-session/${sessionId}`)}\n              className=\"p-2 text-white/80 hover:text-white\"\n            >\n              <ChevronLeft className=\"w-6 h-6\" />\n            </button>\n            <div>\n              <h1 className=\"text-white font-medium\">{session?.title}</h1>\n              <div className=\"flex items-center gap-3 text-white/60 text-[14px]\">\n                <span className=\"flex items-center gap-1\">\n                  <Users className=\"w-4 h-4\" />\n                  {participants.length}\n                </span>\n                <span className=\"flex items-center gap-1\">\n                  <Clock className=\"w-4 h-4\" />\n                  {formatDuration(sessionDuration)}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setGridView(!gridView)}\n              className=\"p-2 text-white/80 hover:text-white\"\n            >\n              <Grid className=\"w-5 h-5\" />\n            </button>\n            <button className=\"p-2 text-white/80 hover:text-white\">\n              <Settings className=\"w-5 h-5\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* 비디오 그리드 */}\n      <div className=\"h-screen flex items-center justify-center px-4 py-20\">\n        <div className={`grid gap-4 w-full max-w-[1440px] ${\n          gridView \n            ? participants.length <= 2 \n              ? 'grid-cols-1 md:grid-cols-2' \n              : 'grid-cols-2 md:grid-cols-3'\n            : 'grid-cols-1'\n        }`}>\n          {/* 본인 비디오 */}\n          <div className=\"relative bg-gray-900 rounded-lg overflow-hidden aspect-video\">\n            <video\n              ref={localVideoRef}\n              autoPlay\n              muted\n              playsInline\n              className=\"w-full h-full object-cover\"\n            />\n            {!videoEnabled && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-gray-800\">\n                <CameraOff className=\"w-12 h-12 text-gray-500\" />\n              </div>\n            )}\n            <div className=\"absolute bottom-2 left-2 px-2 py-1 bg-black/50 rounded text-white text-[12px]\">\n              나 {isHost && '(호스트)'}\n            </div>\n            {!audioEnabled && (\n              <div className=\"absolute top-2 right-2 p-1 bg-red-500 rounded\">\n                <MicOff className=\"w-4 h-4 text-white\" />\n              </div>\n            )}\n            {handRaised && (\n              <div className=\"absolute top-2 left-2 p-1 bg-yellow-500 rounded\">\n                <Hand className=\"w-4 h-4 text-white\" />\n              </div>\n            )}\n          </div>\n\n          {/* 다른 참가자 비디오 */}\n          {participants.filter(p => p.id !== currentUserId).map((participant) => (\n            <div key={participant.id} className=\"relative bg-gray-900 rounded-lg overflow-hidden aspect-video\">\n              <video\n                ref={(el) => remoteVideoRefs.current[participant.id] = el}\n                autoPlay\n                playsInline\n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute bottom-2 left-2 px-2 py-1 bg-black/50 rounded text-white text-[12px]\">\n                {participant.name} {participant.id === session?.hostId && '(호스트)'}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* 하단 컨트롤 바 */}\n      <div className=\"absolute bottom-0 left-0 right-0 z-20 bg-gradient-to-t from-black/80 to-transparent p-4\">\n        <div className=\"max-w-[1440px] mx-auto flex items-center justify-between\">\n          <div className=\"flex gap-2\">\n            <button\n              onClick={toggleAudio}\n              className={`p-3 rounded-full transition-colors ${\n                audioEnabled \n                  ? 'bg-gray-700 hover:bg-gray-600 text-white' \n                  : 'bg-red-500 hover:bg-red-600 text-white'\n              }`}\n            >\n              {audioEnabled ? <Mic className=\"w-5 h-5\" /> : <MicOff className=\"w-5 h-5\" />}\n            </button>\n            \n            <button\n              onClick={toggleVideo}\n              className={`p-3 rounded-full transition-colors ${\n                videoEnabled \n                  ? 'bg-gray-700 hover:bg-gray-600 text-white' \n                  : 'bg-red-500 hover:bg-red-600 text-white'\n              }`}\n            >\n              {videoEnabled ? <Video className=\"w-5 h-5\" /> : <VideoOff className=\"w-5 h-5\" />}\n            </button>\n            \n            <button\n              onClick={toggleScreenShare}\n              className={`p-3 rounded-full transition-colors ${\n                screenSharing \n                  ? 'bg-[#00C471] text-white' \n                  : 'bg-gray-700 hover:bg-gray-600 text-white'\n              }`}\n            >\n              <Monitor className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          <button\n            onClick={handleEndSession}\n            className=\"px-6 py-3 bg-red-500 hover:bg-red-600 text-white rounded-full\n              font-medium transition-colors flex items-center gap-2\"\n          >\n            <PhoneOff className=\"w-5 h-5\" />\n            세션 나가기\n          </button>\n\n          <div className=\"flex gap-2\">\n            <button\n              onClick={toggleHandRaise}\n              className={`p-3 rounded-full transition-colors ${\n                handRaised \n                  ? 'bg-yellow-500 text-white' \n                  : 'bg-gray-700 hover:bg-gray-600 text-white'\n              }`}\n            >\n              <Hand className=\"w-5 h-5\" />\n            </button>\n            \n            <button\n              onClick={() => setShowChat(!showChat)}\n              className=\"p-3 bg-gray-700 hover:bg-gray-600 text-white rounded-full relative\"\n            >\n              <MessageSquare className=\"w-5 h-5\" />\n              {messages.length > 0 && (\n                <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white \n                  text-[10px] rounded-full flex items-center justify-center\">\n                  {messages.length}\n                </span>\n              )}\n            </button>\n            \n            <button\n              onClick={() => setShowParticipants(!showParticipants)}\n              className=\"p-3 bg-gray-700 hover:bg-gray-600 text-white rounded-full\"\n            >\n              <Users className=\"w-5 h-5\" />\n            </button>\n            \n            <button\n              onClick={() => setShowAIPanel(!showAIPanel)}\n              className={`p-3 rounded-full transition-colors ${\n                showAIPanel \n                  ? 'bg-[#00C471] text-white' \n                  : 'bg-gray-700 hover:bg-gray-600 text-white'\n              }`}\n              title=\"AI 도우미\"\n            >\n              <Bot className=\"w-5 h-5\" />\n            </button>\n            \n            <button\n              onClick={isRecording ? stopRecording : startRecording}\n              className={`p-3 rounded-full transition-colors ${\n                isRecording \n                  ? 'bg-red-500 animate-pulse text-white' \n                  : 'bg-gray-700 hover:bg-gray-600 text-white'\n              }`}\n              title={isRecording ? \"녹음 중지\" : \"AI 피드백 녹음\"}\n            >\n              <BrainCircuit className=\"w-5 h-5\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* 채팅 패널 */}\n      {showChat && (\n        <div className=\"absolute right-0 top-0 bottom-0 w-[320px] bg-white shadow-xl z-30\">\n          <div className=\"flex flex-col h-full\">\n            <div className=\"p-4 border-b border-[#E7E7E7] flex items-center justify-between\">\n              <h2 className=\"font-medium text-[#111111]\">채팅</h2>\n              <button\n                onClick={() => setShowChat(false)}\n                className=\"text-[#606060] hover:text-[#111111]\"\n              >\n                ✕\n              </button>\n            </div>\n            \n            <div \n              ref={chatContainerRef}\n              className=\"flex-1 overflow-y-auto p-4 space-y-3\"\n            >\n              {messages.map((msg) => (\n                <div key={msg.id} className={`${msg.userId === currentUserId ? 'text-right' : ''}`}>\n                  <p className=\"text-[12px] text-[#929292] mb-1\">{msg.userName}</p>\n                  <div className={`inline-block px-3 py-2 rounded-lg max-w-[80%] ${\n                    msg.userId === currentUserId \n                      ? 'bg-[#00C471] text-white' \n                      : 'bg-[#F1F3F5] text-[#111111]'\n                  }`}>\n                    <p className=\"text-[14px]\">{msg.content}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"p-4 border-t border-[#E7E7E7]\">\n              <div className=\"flex gap-2\">\n                <input\n                  type=\"text\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  placeholder=\"메시지 입력...\"\n                  className=\"flex-1 px-3 py-2 border border-[#E7E7E7] rounded-[6px]\n                    focus:border-[#111111] outline-none text-[14px]\"\n                />\n                <button\n                  onClick={handleSendMessage}\n                  className=\"p-2 bg-[#00C471] text-white rounded-[6px] hover:bg-[#00B267]\"\n                >\n                  <Send className=\"w-5 h-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 참가자 패널 */}\n      {showParticipants && (\n        <div className=\"absolute right-0 top-0 bottom-0 w-[320px] bg-white shadow-xl z-30\">\n          <div className=\"flex flex-col h-full\">\n            <div className=\"p-4 border-b border-[#E7E7E7] flex items-center justify-between\">\n              <h2 className=\"font-medium text-[#111111]\">\n                참가자 ({participants.length})\n              </h2>\n              <button\n                onClick={() => setShowParticipants(false)}\n                className=\"text-[#606060] hover:text-[#111111]\"\n              >\n                ✕\n              </button>\n            </div>\n            \n            <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\n              {participants.map((participant) => (\n                <div \n                  key={participant.id}\n                  className=\"flex items-center justify-between p-3 bg-[#F1F3F5] rounded-[6px]\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {participant.profileImage ? (\n                      <img\n                        src={participant.profileImage}\n                        alt={participant.name}\n                        className=\"w-8 h-8 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-8 h-8 rounded-full bg-[#E7E7E7] \n                        flex items-center justify-center\">\n                        <Users className=\"w-4 h-4 text-[#929292]\" />\n                      </div>\n                    )}\n                    <div>\n                      <p className=\"text-[14px] font-medium text-[#111111]\">\n                        {participant.name}\n                        {participant.id === currentUserId && ' (나)'}\n                      </p>\n                      {participant.id === session?.hostId && (\n                        <span className=\"text-[11px] text-[#00C471]\">호스트</span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    {participant.audioMuted && (\n                      <MicOff className=\"w-4 h-4 text-[#929292]\" />\n                    )}\n                    {participant.videoMuted && (\n                      <VideoOff className=\"w-4 h-4 text-[#929292]\" />\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* AI 도우미 패널 */}\n      {showAIPanel && (\n        <div className=\"absolute left-0 top-0 bottom-0 w-[380px] bg-white shadow-xl z-30\">\n          <div className=\"flex flex-col h-full\">\n            <div className=\"p-4 border-b border-[#E7E7E7] flex items-center justify-between bg-[#00C471]\">\n              <h2 className=\"font-medium text-white flex items-center gap-2\">\n                <Bot className=\"w-5 h-5\" />\n                AI 학습 도우미\n              </h2>\n              <button\n                onClick={() => setShowAIPanel(false)}\n                className=\"text-white hover:text-gray-200\"\n              >\n                ✕\n              </button>\n            </div>\n            \n            <div className=\"flex-1 overflow-y-auto\">\n              {/* 아이스브레이커 */}\n              <div className=\"p-4 border-b border-[#E7E7E7]\">\n                <h3 className=\"text-[14px] font-medium text-[#111111] mb-3 flex items-center gap-2\">\n                  <Lightbulb className=\"w-4 h-4 text-[#00C471]\" />\n                  대화 시작하기\n                </h3>\n                <div className=\"space-y-2\">\n                  {icebreakers.length > 0 ? (\n                    icebreakers.map((question, index) => (\n                      <div\n                        key={index}\n                        className=\"p-3 bg-[#F1F3F5] rounded-[6px] text-[13px] text-[#606060]\n                          hover:bg-[#E7E7E7] cursor-pointer transition-colors\"\n                        onClick={() => {\n                          setNewMessage(question);\n                          setShowChat(true);\n                        }}\n                      >\n                        {question}\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-[12px] text-[#929292]\">아이스브레이커 로딩 중...</p>\n                  )}\n                </div>\n              </div>\n\n              {/* 실시간 피드백 */}\n              {conversationFeedback && (\n                <div className=\"p-4 border-b border-[#E7E7E7]\">\n                  <h3 className=\"text-[14px] font-medium text-[#111111] mb-3 flex items-center gap-2\">\n                    <BrainCircuit className=\"w-4 h-4 text-[#00C471]\" />\n                    AI 피드백\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {conversationFeedback.grammar && (\n                      <div className=\"p-2 bg-blue-50 rounded text-[12px]\">\n                        <strong>문법:</strong> {conversationFeedback.grammar}\n                      </div>\n                    )}\n                    {conversationFeedback.vocabulary && (\n                      <div className=\"p-2 bg-green-50 rounded text-[12px]\">\n                        <strong>어휘:</strong> {conversationFeedback.vocabulary}\n                      </div>\n                    )}\n                    {conversationFeedback.pronunciation && (\n                      <div className=\"p-2 bg-yellow-50 rounded text-[12px]\">\n                        <strong>발음:</strong> {conversationFeedback.pronunciation}\n                      </div>\n                    )}\n                    {conversationFeedback.suggestions && (\n                      <div className=\"p-2 bg-purple-50 rounded text-[12px]\">\n                        <strong>제안:</strong>\n                        <ul className=\"mt-1 ml-4 list-disc\">\n                          {conversationFeedback.suggestions.map((suggestion, i) => (\n                            <li key={i}>{suggestion}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* 번역 도구 */}\n              <div className=\"p-4 border-b border-[#E7E7E7]\">\n                <h3 className=\"text-[14px] font-medium text-[#111111] mb-3 flex items-center gap-2\">\n                  <Languages className=\"w-4 h-4 text-[#00C471]\" />\n                  실시간 번역\n                </h3>\n                <div className=\"space-y-2\">\n                  <input\n                    type=\"text\"\n                    value={translationInput}\n                    onChange={(e) => setTranslationInput(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleTranslate()}\n                    placeholder=\"번역할 문장을 입력하세요...\"\n                    className=\"w-full px-3 py-2 border border-[#E7E7E7] rounded-[6px]\n                      focus:border-[#00C471] outline-none text-[13px]\"\n                  />\n                  <button\n                    onClick={handleTranslate}\n                    className=\"w-full py-2 bg-[#00C471] text-white rounded-[6px]\n                      text-[13px] font-medium hover:bg-[#00B267] transition-colors\"\n                  >\n                    번역하기\n                  </button>\n                  {translationResult && (\n                    <div className=\"mt-2 p-3 bg-[#E6F9F1] rounded-[6px] text-[12px]\">\n                      <p className=\"font-medium text-[#111111]\">{translationResult.translation}</p>\n                      {translationResult.literal && (\n                        <p className=\"text-[#606060] mt-1\">직역: {translationResult.literal}</p>\n                      )}\n                      {translationResult.context && (\n                        <p className=\"text-[#929292] mt-1\">{translationResult.context}</p>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* 대화 기록 */}\n              {sessionTranscript.length > 0 && (\n                <div className=\"p-4\">\n                  <h3 className=\"text-[14px] font-medium text-[#111111] mb-3 flex items-center gap-2\">\n                    <FileText className=\"w-4 h-4 text-[#00C471]\" />\n                    대화 기록\n                  </h3>\n                  <div className=\"space-y-2 max-h-[200px] overflow-y-auto\">\n                    {sessionTranscript.map((entry, index) => (\n                      <div key={index} className=\"p-2 bg-[#F1F3F5] rounded text-[12px]\">\n                        <p className=\"text-[#606060]\">{entry.text}</p>\n                        <p className=\"text-[#929292] text-[10px] mt-1\">\n                          {new Date(entry.timestamp).toLocaleTimeString()}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 녹음 상태 표시 */}\n            {isRecording && (\n              <div className=\"p-4 bg-red-50 border-t border-red-200\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n                  <span className=\"text-[13px] text-red-600 font-medium\">\n                    녹음 중... AI가 분석 중입니다\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/AudioQuestion.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/ConnectionCheck.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/LevelTestCheck.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkPermissions' and 'mediaStream'. Either include them or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkPermissions, mediaStream]","fix":{"range":[961,963],"text":"[checkPermissions, mediaStream]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":37,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport CommonButton from '../../components/CommonButton';\nimport { Mic, Wifi, CheckCircle, XCircle, Loader2 } from 'lucide-react';\nimport useLevelTestStore from '../../store/levelTestStore';\n\nexport default function LevelTestCheck() {\n  const navigate = useNavigate();\n  const [micPermission, setMicPermission] = useState('checking');\n  const [internetConnection, setInternetConnection] = useState('checking');\n  const [isChecking, setIsChecking] = useState(true);\n  const [audioLevel, setAudioLevel] = useState(0);\n  const [mediaStream, setMediaStream] = useState(null);\n\n  const { setConnectionStatus, setTestStatus, setAudioLevel: setStoreAudioLevel } = useLevelTestStore();\n\n  useEffect(() => {\n    checkPermissions();\n    return () => {\n      // Cleanup\n      if (mediaStream) {\n        mediaStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const checkPermissions = async () => {\n    // Check microphone permission\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      setMediaStream(stream);\n      setMicPermission('granted');\n      setConnectionStatus({ microphone: true });\n\n      // Start audio level monitoring\n      startAudioLevelMonitoring(stream);\n    } catch (error) {\n      setMicPermission('denied');\n      setConnectionStatus({ microphone: false });\n    }\n\n    // Check internet connection\n    if (navigator.onLine) {\n      setInternetConnection('connected');\n      setConnectionStatus({ internet: true });\n    } else {\n      setInternetConnection('disconnected');\n      setConnectionStatus({ internet: false });\n    }\n\n    setTimeout(() => {\n      setIsChecking(false);\n    }, 1500);\n  };\n\n  const handleContinue = () => {\n    if (micPermission === 'granted' && internetConnection === 'connected') {\n      setTestStatus('recording');\n      navigate('/level-test/recording');\n    }\n  };\n\n  const startAudioLevelMonitoring = (stream) => {\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioContext.createAnalyser();\n    const microphone = audioContext.createMediaStreamSource(stream);\n    const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n\n    analyser.smoothingTimeConstant = 0.8;\n    analyser.fftSize = 1024;\n\n    microphone.connect(analyser);\n    analyser.connect(scriptProcessor);\n    scriptProcessor.connect(audioContext.destination);\n\n    scriptProcessor.onaudioprocess = () => {\n      const array = new Uint8Array(analyser.frequencyBinCount);\n      analyser.getByteFrequencyData(array);\n      const arraySum = array.reduce((a, value) => a + value, 0);\n      const average = arraySum / array.length;\n      const normalizedLevel = Math.min(100, Math.round(average));\n\n      setAudioLevel(normalizedLevel);\n      setStoreAudioLevel(normalizedLevel);\n    };\n  };\n\n  const handleRetry = () => {\n    setIsChecking(true);\n    setMicPermission('checking');\n    setInternetConnection('checking');\n    setAudioLevel(0);\n    if (mediaStream) {\n      mediaStream.getTracks().forEach(track => track.stop());\n    }\n    checkPermissions();\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'checking':\n        return <Loader2 className=\"w-5 h-5 text-[#929292] animate-spin\" />;\n      case 'granted':\n      case 'connected':\n        return <CheckCircle className=\"w-5 h-5 text-[#00C471]\" />;\n      case 'denied':\n      case 'disconnected':\n        return <XCircle className=\"w-5 h-5 text-[#EA4335]\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusText = (type, status) => {\n    if (type === 'mic') {\n      switch (status) {\n        case 'checking':\n          return '확인 중...';\n        case 'granted':\n          return '마이크 사용 가능';\n        case 'denied':\n          return '마이크 권한이 필요합니다';\n        default:\n          return '';\n      }\n    } else {\n      switch (status) {\n        case 'checking':\n          return '확인 중...';\n        case 'connected':\n          return '인터넷 연결됨';\n        case 'disconnected':\n          return '인터넷 연결을 확인해주세요';\n        default:\n          return '';\n      }\n    }\n  };\n\n  const canContinue = micPermission === 'granted' && internetConnection === 'connected';\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA] flex flex-col\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-[#E7E7E7] px-6 py-4\">\n        <div className=\"flex items-center\">\n          <button\n            onClick={() => navigate(-1)}\n            className=\"p-2 -ml-2\"\n          >\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n              <path d=\"M15 18L9 12L15 6\" stroke=\"#111111\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            </svg>\n          </button>\n          <h1 className=\"text-[18px] font-bold text-[#111111] flex-1 text-center mr-6\">\n            연결 확인\n          </h1>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 flex flex-col items-center justify-center px-6 py-8\">\n        <div className=\"w-full max-w-[400px]\">\n          {/* Title */}\n          <h2 className=\"text-[24px] font-bold text-[#111111] mb-3 text-center\">\n            테스트 환경을 확인하고 있어요\n          </h2>\n\n          {/* Description */}\n          <p className=\"text-[16px] text-[#929292] mb-8 text-center\">\n            원활한 테스트를 위해 필요한 권한을 확인합니다\n          </p>\n\n          {/* Check Items */}\n          <div className=\"space-y-4 mb-8\">\n            {/* Microphone Check */}\n            <div className=\"bg-white rounded-[10px] p-4 border border-[#E7E7E7]\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-[#E6F9F1] rounded-full flex items-center justify-center\">\n                    <Mic className=\"w-5 h-5 text-[#00C471]\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-[14px] font-medium text-[#111111]\">마이크</p>\n                    <p className=\"text-[12px] text-[#929292]\">\n                      {getStatusText('mic', micPermission)}\n                    </p>\n                    {micPermission === 'granted' && (\n                      <div className=\"mt-2\">\n                        <div className=\"w-full bg-[#F1F3F5] rounded-full h-2\">\n                          <div\n                            className=\"bg-[#00C471] h-2 rounded-full transition-all duration-200\"\n                            style={{ width: `${audioLevel}%` }}\n                          />\n                        </div>\n                        <p className=\"text-[10px] text-[#929292] mt-1\">오디오 레벨: {audioLevel}%</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                {getStatusIcon(micPermission)}\n              </div>\n            </div>\n\n            {/* Internet Check */}\n            <div className=\"bg-white rounded-[10px] p-4 border border-[#E7E7E7]\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-[#E6F9F1] rounded-full flex items-center justify-center\">\n                    <Wifi className=\"w-5 h-5 text-[#00C471]\" />\n                  </div>\n                  <div>\n                    <p className=\"text-[14px] font-medium text-[#111111]\">인터넷</p>\n                    <p className=\"text-[12px] text-[#929292]\">\n                      {getStatusText('internet', internetConnection)}\n                    </p>\n                  </div>\n                </div>\n                {getStatusIcon(internetConnection)}\n              </div>\n            </div>\n          </div>\n\n          {/* Notice */}\n          {micPermission === 'denied' && (\n            <div className=\"bg-[#FFF9E6] rounded-[10px] p-4 mb-6\">\n              <p className=\"text-[12px] text-[#8B7A00]\">\n                💡 브라우저 설정에서 마이크 권한을 허용해주세요\n              </p>\n            </div>\n          )}\n\n          {!isChecking && !canContinue && (\n            <CommonButton\n              onClick={handleRetry}\n              variant=\"secondary\"\n              className=\"w-full mb-3\"\n            >\n              다시 확인\n            </CommonButton>\n          )}\n        </div>\n      </div>\n\n      {/* Bottom Button */}\n      <div className=\"px-6 pb-6 bg-white pt-4 border-t border-[#E7E7E7]\">\n        <CommonButton\n          onClick={handleContinue}\n          variant=\"primary\"\n          className=\"w-full\"\n          disabled={!canContinue || isChecking}\n        >\n          {isChecking ? '확인 중...' : '계속하기'}\n        </CommonButton>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/LevelTestComplete.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/LevelTestIntro.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/LevelTestRecording.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/LevelTestResult.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/LevelTest/LevelTestStart.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Login/Agreement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Login/GoogleCallback.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'navigateAfterLogin'. Either include it or remove the dependency array.","line":167,"column":6,"nodeType":"ArrayExpression","endLine":167,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [navigate, navigateAfterLogin]","fix":{"range":[6111,6121],"text":"[navigate, navigateAfterLogin]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../../api/index\";\nimport useProfileStore from \"../../store/profileStore\";\nimport { getOnboardingStatus } from \"../../api/user\";\nimport { resolveNextOnboardingStep } from \"../../utils/onboardingStatus\";\n\n// JWT 토큰 형식 검증 함수\nconst isValidJWT = (token) => {\n  if (!token || typeof token !== 'string') return false;\n  const parts = token.split('.');\n  return parts.length === 3 && parts.every(part => part.length > 0);\n};\n\nexport default function GoogleCallback() {\n  const [message, setMessage] = useState(\"Google 로그인 처리 중...\");\n  const navigate = useNavigate();\n\n  const navigateAfterLogin = useCallback(async () => {\n    try {\n      if (localStorage.getItem('isNewUser') === 'true') {\n        navigate(\"/agreement\", { replace: true });\n        return;\n      }\n\n      const onboardingStatus = await getOnboardingStatus();\n      if (!onboardingStatus.isCompleted) {\n        const nextStep = resolveNextOnboardingStep(onboardingStatus);\n        navigate(`/onboarding-info/${nextStep}`, { replace: true });\n        return;\n      }\n\n      const redirectPath = sessionStorage.getItem(\"redirectPath\");\n      if (redirectPath) {\n        sessionStorage.removeItem(\"redirectPath\");\n        navigate(redirectPath, { replace: true });\n      } else {\n        navigate(\"/main\", { replace: true });\n      }\n    } catch (error) {\n      console.error(\"사용자 상태 확인 실패:\", error);\n      navigate(\"/agreement\", { replace: true });\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const accessToken = params.get(\"accessToken\");\n    const refreshToken = params.get(\"refreshToken\");\n    const code = params.get(\"code\");\n    const state = params.get(\"state\");\n    const error = params.get(\"error\");\n    const errorDescription = params.get(\"error_description\");\n\n    // 콘솔로 토큰과 기타 파라미터들 찍기\n    console.log(\"Google 콜백 accessToken:\", accessToken);\n    console.log(\"Google 콜백 refreshToken:\", refreshToken);\n    console.log(\"Google 콜백 code:\", code);\n    console.log(\"Google 콜백 state:\", state);\n    \n    if (error) {\n      console.log(\"Google 콜백 error:\", error, errorDescription);\n      setMessage(\"Google 로그인 실패: \" + (errorDescription || error));\n    } else if (accessToken && refreshToken) {\n      // 토큰 형식 검증\n      if (!isValidJWT(accessToken)) {\n        console.error(\"🔍 ❌ Invalid accessToken format from URL params\");\n        setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n        setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n        return;\n      }\n\n      if (!isValidJWT(refreshToken)) {\n        console.error(\"🔍 ❌ Invalid refreshToken format from URL params\");\n        setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n        setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n        return;\n      }\n\n      // 백엔드에서 토큰을 직접 전달받은 경우\n      localStorage.setItem(\"accessToken\", accessToken);\n      localStorage.setItem(\"refreshToken\", refreshToken);\n      setMessage(\"Google 로그인 성공! 사용자 정보를 가져오는 중...\");\n      \n      const fetchUserInfo = async () => {\n        try {\n          const nameRes = await api.get(\"/user/name\");\n          const setName = useProfileStore.getState().setName;\n          setName(nameRes.data.name);\n          localStorage.setItem(\"userName\", nameRes.data.name);\n          console.log(\"유저 이름 저장 완료:\", nameRes.data.name);\n          \n          setMessage(\"Google 로그인 성공! 이동 중...\");\n          setTimeout(() => {\n            void navigateAfterLogin();\n          }, 2000);\n        } catch (e) {\n          console.error(\"유저 정보 불러오기 실패:\", e);\n          setMessage(\"로그인 완료되었지만 사용자 정보를 가져오지 못했습니다.\");\n          setTimeout(() => {\n            navigate(\"/agreement\", { replace: true });\n          }, 2000);\n        }\n      };\n      fetchUserInfo();\n    } else if (code && state) {\n      // 기존 방식 (code를 통한 토큰 교환)\n      const fetchTokens = async () => { \n        try {\n          const url = `/login/oauth2/code/google?code=${code}&state=${state}`;\n          console.log(\"백엔드 요청 URL:\", url);\n\n          const res = await api.get(url);\n          console.log(\"백엔드 응답:\", res.data);\n\n          if (res.data && res.data.accessToken && res.data.refreshToken) {\n            // 서버 응답 토큰 형식 검증\n            if (!isValidJWT(res.data.accessToken)) {\n              console.error(\"🔍 ❌ Invalid accessToken format from server response\");\n              setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n              setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n              return;\n            }\n\n            if (!isValidJWT(res.data.refreshToken)) {\n              console.error(\"🔍 ❌ Invalid refreshToken format from server response\");\n              setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n              setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n              return;\n            }\n\n            localStorage.setItem(\"accessToken\", res.data.accessToken);\n            localStorage.setItem(\"refreshToken\", res.data.refreshToken);\n            if (res.data.name) {\n              localStorage.setItem(\"userName\", res.data.name);\n            }\n            if (typeof res.data.isNewUser !== 'undefined') {\n              localStorage.setItem('isNewUser', String(res.data.isNewUser));\n            }\n            \n            try {\n              const nameRes = await api.get(\"/user/name\");\n              const setName = useProfileStore.getState().setName;\n              setName(nameRes.data.name);\n              console.log(\"유저 이름 저장 완료:\", nameRes.data.name);\n            } catch (e) {\n              console.error(\"유저 이름 불러오기 실패:\", e);\n            }\n\n            setMessage(\"Google 로그인 성공! 이동 중...\");\n            setTimeout(() => {\n              void navigateAfterLogin();\n            }, 2000);\n          } else {\n            setMessage(\"토큰을 받아오지 못했습니다.\");\n          }\n        } catch (e) {\n          console.error(\"토큰 요청 실패:\", e);\n          setMessage(\"토큰 요청 실패: \" + (e.response?.data?.message || e.message));\n          setTimeout(() => {\n            navigate(\"/\", { replace: true });\n          }, 3000);\n        }\n      };\n      fetchTokens();\n    }\n  }, [navigate]);\n\n  return (\n    <div className=\"flex flex-col items-center justify-center h-screen bg-white max-w-[768px] w-full mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-4\">{message}</h2>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Login/Login.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Login/Navercallback.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'navigateAfterLogin'. Either include it or remove the dependency array.","line":184,"column":6,"nodeType":"ArrayExpression","endLine":184,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [navigate, navigateAfterLogin]","fix":{"range":[6790,6800],"text":"[navigate, navigateAfterLogin]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../../api/index\";\nimport useProfileStore from \"../../store/profileStore\";\nimport { getOnboardingStatus } from \"../../api/user\";\nimport { resolveNextOnboardingStep } from \"../../utils/onboardingStatus\";\n\n// JWT 토큰 형식 검증 함수\nconst isValidJWT = (token) => {\n  if (!token || typeof token !== 'string') return false;\n  const parts = token.split('.');\n  return parts.length === 3 && parts.every(part => part.length > 0);\n};\n\nexport default function Navercallback() {\n  const [message, setMessage] = useState(\"네이버 로그인 처리 중...\");\n  const navigate = useNavigate();\n\n  const navigateAfterLogin = useCallback(async () => {\n    try {\n      if (localStorage.getItem('isNewUser') === 'true') {\n        navigate(\"/agreement\", { replace: true });\n        return;\n      }\n\n      const onboardingStatus = await getOnboardingStatus();\n      if (!onboardingStatus.isCompleted) {\n        const nextStep = resolveNextOnboardingStep(onboardingStatus);\n        navigate(`/onboarding-info/${nextStep}`, { replace: true });\n        return;\n      }\n\n      const redirectPath = sessionStorage.getItem(\"redirectPath\");\n      if (redirectPath) {\n        sessionStorage.removeItem(\"redirectPath\");\n        navigate(redirectPath, { replace: true });\n      } else {\n        navigate(\"/main\", { replace: true });\n      }\n    } catch (error) {\n      console.error(\"사용자 상태 확인 실패:\", error);\n      navigate(\"/agreement\", { replace: true });\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    console.log(\"🔍 네이버 콜백 페이지 로드됨\");\n    console.log(\"🔍 현재 URL:\", window.location.href);\n    \n    const params = new URLSearchParams(window.location.search);\n    const accessToken = params.get(\"accessToken\");\n    const refreshToken = params.get(\"refreshToken\");\n    const code = params.get(\"code\");\n    const state = params.get(\"state\");\n    const error = params.get(\"error\");\n    const errorDescription = params.get(\"error_description\");\n\n    // 콘솔로 토큰과 기타 파라미터들 찍기\n    console.log(\"🔍 네이버 콜백 accessToken:\", accessToken);\n    console.log(\"🔍 네이버 콜백 refreshToken:\", refreshToken);\n    console.log(\"🔍 네이버 콜백 code:\", code);\n    console.log(\"🔍 네이버 콜백 state:\", state);\n    \n    if (error) {\n      console.log(\"🔍 네이버 콜백 error:\", error, errorDescription);\n      setMessage(\"네이버 로그인 실패: \" + (errorDescription || error));\n    } else if (accessToken && refreshToken) {\n      console.log(\"🔍 토큰이 URL 파라미터로 전달됨, 처리 시작\");\n\n      // 토큰 형식 검증\n      if (!isValidJWT(accessToken)) {\n        console.error(\"🔍 ❌ Invalid accessToken format from URL params\");\n        setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n        setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n        return;\n      }\n\n      if (!isValidJWT(refreshToken)) {\n        console.error(\"🔍 ❌ Invalid refreshToken format from URL params\");\n        setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n        setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n        return;\n      }\n\n      // 백엔드에서 토큰을 직접 전달받은 경우\n      localStorage.setItem(\"accessToken\", accessToken);\n      localStorage.setItem(\"refreshToken\", refreshToken);\n      setMessage(\"네이버 로그인 성공! 사용자 정보를 가져오는 중...\");\n      \n      const fetchUserInfo = async () => {\n        try {\n          const nameRes = await api.get(\"/user/name\");\n          const setName = useProfileStore.getState().setName;\n          setName(nameRes.data.name);\n          localStorage.setItem(\"userName\", nameRes.data.name);\n          console.log(\"유저 이름 저장 완료:\", nameRes.data.name);\n          \n          setMessage(\"네이버 로그인 성공! 이동 중...\");\n          setTimeout(() => {\n            void navigateAfterLogin();\n          }, 2000);\n        } catch (e) {\n          console.error(\"🔍 유저 정보 불러오기 실패:\", e);\n          console.error(\"🔍 에러 상세:\", e.response?.data, e.message);\n          setMessage(\"로그인 완료되었지만 사용자 정보를 가져오지 못했습니다.\");\n          setTimeout(() => {\n            navigate(\"/agreement\", { replace: true });\n          }, 2000);\n        }\n      };\n      fetchUserInfo();\n    } else if (code && state) {\n      const fetchTokens = async () => { \n        try {\n          // 백엔드 요청 URL도 콘솔에 찍기\n          const url = `/login/oauth2/code/naver?code=${code}&state=${state}`;\n          console.log(\"백엔드 요청 URL:\", url);\n\n          const res = await api.get(url);\n          // 백엔드 응답 전체 콘솔에 찍기\n          console.log(\"백엔드 응답:\", res.data);\n\n          if (res.data && res.data.accessToken && res.data.refreshToken) {\n            // 서버 응답 토큰 형식 검증\n            if (!isValidJWT(res.data.accessToken)) {\n              console.error(\"🔍 ❌ Invalid accessToken format from server response\");\n              setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n              setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n              return;\n            }\n\n            if (!isValidJWT(res.data.refreshToken)) {\n              console.error(\"🔍 ❌ Invalid refreshToken format from server response\");\n              setMessage(\"토큰 형식 오류: 다시 로그인해주세요.\");\n              setTimeout(() => navigate(\"/\", { replace: true }), 3000);\n              return;\n            }\n\n            localStorage.setItem(\"accessToken\", res.data.accessToken);\n            localStorage.setItem(\"refreshToken\", res.data.refreshToken);\n            if (res.data.name) {\n              localStorage.setItem(\"userName\", res.data.name);\n            }\n            if (typeof res.data.isNewUser !== 'undefined') {\n              localStorage.setItem('isNewUser', String(res.data.isNewUser));\n            }\n            // 유저 이름을 zustand에 저장 (동기화)\n            try {\n              const nameRes = await api.get(\"/user/name\");\n              const setName = useProfileStore.getState().setName;\n              setName(nameRes.data.name);\n              console.log(\"유저 이름 저장 완료:\", nameRes.data.name);\n            } catch (e) {\n              console.error(\"유저 이름 불러오기 실패:\", e);\n            }\n            setMessage(\"네이버 로그인 성공! 이동 중...\");\n            setTimeout(() => {\n              void navigateAfterLogin();\n            }, 2000);\n          } else {\n            setMessage(\"토큰을 받아오지 못했습니다.\");\n          }\n        } catch (e) {\n          // 에러 객체도 콘솔에 찍기\n          console.error(\"토큰 요청 실패:\", e);\n          setMessage(\"토큰 요청 실패: \" + (e.response?.data?.message || e.message));\n          setTimeout(() => {\n            navigate(\"/\", { replace: true });\n          }, 3000);\n        }\n      };\n      fetchTokens();\n    } else {\n      console.log(\"🔍 어떤 조건도 만족하지 않음\");\n      console.log(\"🔍 조건 체크:\");\n      console.log(\"  error:\", !!error);\n      console.log(\"  accessToken && refreshToken:\", !!(accessToken && refreshToken));\n      console.log(\"  code && state:\", !!(code && state));\n      setMessage(\"오류가 발생했습니다. 다시 시도해주세요.\");\n      setTimeout(() => {\n        navigate(\"/\", { replace: true });\n      }, 3000);\n    }\n  }, [navigate]);\n\n  return (\n    <div className=\"flex flex-col items-center justify-center h-screen bg-white max-w-[768px] w-full mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-4\">{message}</h2>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Login/ObInfoGoogle.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Login/SignupComplete.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Matching/MatchingMain.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'showSuccess' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":23,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"showSuccess"},"fix":{"range":[689,702],"text":""},"desc":"Remove unused variable 'showSuccess'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRecommendedPartners'. Either include it or remove the dependency array.","line":43,"column":8,"nodeType":"ArrayExpression","endLine":43,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRecommendedPartners, loadRecommendedPartners]","fix":{"range":[1306,1332],"text":"[fetchRecommendedPartners, loadRecommendedPartners]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n    Search,\n    Users,\n    Settings,\n    Heart,\n    Star,\n    Globe,\n    Target,\n    ChevronRight,\n    Filter\n} from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport MatchingProfileCard from '../../components/MatchingProfileCard';\nimport FilterPanel from '../../components/FilterPanel';\nimport useMatchingStore from '../../store/matchingStore';\nimport useToast from '../../hooks/useToast.js';\n\nexport default function MatchingMain() {\n    const navigate = useNavigate();\n    const [activeTab, setActiveTab] = useState('recommended');\n    const { showError, showSuccess, ToastContainer } = useToast();\n    const [showFilters, setShowFilters] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n\n    const {\n        matchedUsers,\n        matchingStatus,\n        isSearching,\n        matchingFilters,\n        startMatching,\n        fetchRecommendedPartners,\n        setMatchingFilters,\n        searchPartners,\n    } = useMatchingStore();\n\n    useEffect(() => {\n        // 컴포넌트 마운트 시 추천 파트너 가져오기\n        loadRecommendedPartners();\n    }, [fetchRecommendedPartners]);\n\n    const loadRecommendedPartners = async () => {\n        setIsLoading(true);\n        try {\n            await fetchRecommendedPartners();\n        } catch (error) {\n            console.error('Failed to load recommended partners:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleStartMatching = async () => {\n        setIsLoading(true);\n        try {\n            await startMatching();\n        } catch (error) {\n            console.error('Failed to start matching:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleFilterChange = async (filters) => {\n        setMatchingFilters(filters);\n        \n        setIsLoading(true);\n        try {\n            if (activeTab === 'recommended') {\n                await loadRecommendedPartners();\n            } else if (activeTab === 'search' && searchQuery.trim()) {\n                // 검색 중인 경우 필터를 적용하여 재검색\n                const results = await searchPartners(searchQuery, filters);\n                setSearchResults(results);\n            }\n        } catch (error) {\n            console.error('Failed to apply filters:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleViewProfile = (userId) => {\n        navigate(`/matching/profile/${userId}`);\n    };\n\n    const handleSearch = async () => {\n        if (!searchQuery.trim()) return;\n        \n        setIsLoading(true);\n        try {\n            // Spring Boot API를 통한 파트너 검색\n            const results = await searchPartners(searchQuery, matchingFilters);\n            setSearchResults(results);\n        } catch (error) {\n            console.error('Search error:', error);\n            // API 실패 시 빈 배열로 설정\n            setSearchResults([]);\n            // 사용자에게 에러 메시지 표시\n            showError('매칭 파트너 검색 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen bg-[#FAFAFA]\">\n            {/* Header */}\n            <div className=\"bg-white border-b border-[#E7E7E7] px-6 py-4\">\n                <div className=\"flex items-center justify-between\">\n                    <h1 className=\"text-[20px] font-bold text-[#111111]\">매칭</h1>\n                    <div className=\"flex items-center space-x-2\">\n                        <button\n                            onClick={() => setShowFilters(!showFilters)}\n                            className=\"p-2 rounded-lg hover:bg-[#F1F3F5] transition-colors\"\n                        >\n                            <Filter className=\"w-5 h-5 text-[#666666]\" />\n                        </button>\n                        <button\n                            onClick={() => navigate('/matching/settings')}\n                            className=\"p-2 rounded-lg hover:bg-[#F1F3F5] transition-colors\"\n                        >\n                            <Settings className=\"w-5 h-5 text-[#666666]\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            {/* Filter Panel */}\n            {showFilters && (\n                <FilterPanel\n                    filters={matchingFilters}\n                    onFiltersChange={handleFilterChange}\n                    onClose={() => setShowFilters(false)}\n                    showLocation={true}\n                    showAge={true}\n                    showAvailability={true}\n                    showSessionPreferences={true}\n                />\n            )}\n\n            {/* Tabs */}\n            <div className=\"bg-white border-b border-[#E7E7E7]\">\n                <div className=\"flex\">\n                    <button\n                        onClick={() => setActiveTab('recommended')}\n                        className={`flex-1 py-3 text-[14px] font-medium border-b-2 transition-colors ${\n                            activeTab === 'recommended'\n                                ? 'text-[#00C471] border-[#00C471]'\n                                : 'text-[#929292] border-transparent'\n                        }`}\n                    >\n                        <div className=\"flex items-center justify-center space-x-1\">\n                            <Heart className=\"w-4 h-4\" />\n                            <span>추천</span>\n                        </div>\n                    </button>\n                    <button\n                        onClick={() => setActiveTab('search')}\n                        className={`flex-1 py-3 text-[14px] font-medium border-b-2 transition-colors ${\n                            activeTab === 'search'\n                                ? 'text-[#00C471] border-[#00C471]'\n                                : 'text-[#929292] border-transparent'\n                        }`}\n                    >\n                        <div className=\"flex items-center justify-center space-x-1\">\n                            <Search className=\"w-4 h-4\" />\n                            <span>검색</span>\n                        </div>\n                    </button>\n                </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"p-6\">\n                {activeTab === 'recommended' ? (\n                    <>\n                        {/* Quick Actions */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7] mb-6\">\n                            <h2 className=\"text-[18px] font-bold text-[#111111] mb-4\">빠른 매칭</h2>\n                            <p className=\"text-[14px] text-[#666666] mb-4\">\n                                AI가 당신에게 맞는 완벽한 언어 교환 파트너를 찾아드려요.\n                            </p>\n                            <CommonButton\n                                onClick={handleStartMatching}\n                                variant=\"primary\"\n                                className=\"w-full\"\n                                disabled={isLoading || isSearching}\n                            >\n                                {isSearching ? (\n                                    <>\n                                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                                        매칭 중...\n                                    </>\n                                ) : (\n                                    <>\n                                        <Search className=\"w-5 h-5 mr-2\" />\n                                        AI 매칭 시작\n                                    </>\n                                )}\n                            </CommonButton>\n                        </div>\n\n                        {/* Recommended Partners */}\n                        <div className=\"mb-6\">\n                            <div className=\"flex items-center justify-between mb-4\">\n                                <h2 className=\"text-[18px] font-bold text-[#111111]\">추천 파트너</h2>\n                                <button\n                                    onClick={loadRecommendedPartners}\n                                    className=\"text-[14px] text-[#00C471] font-medium\"\n                                    disabled={isLoading}\n                                >\n                                    새로고침\n                                </button>\n                            </div>\n\n                            {isLoading ? (\n                                <div className=\"text-center py-8\">\n                                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#00C471] mx-auto mb-4\"></div>\n                                    <p className=\"text-[14px] text-[#666666]\">파트너를 찾고 있어요...</p>\n                                </div>\n                            ) : matchedUsers.length > 0 ? (\n                                <div className=\"space-y-4\">\n                                    {matchedUsers.map((user) => (\n                                        <MatchingProfileCard\n                                            key={user.id}\n                                            user={user}\n                                            onViewProfile={() => handleViewProfile(user.id)}\n                                        />\n                                    ))}\n                                </div>\n                            ) : (\n                                <div className=\"bg-white rounded-[20px] p-8 border border-[#E7E7E7] text-center\">\n                                    <Users className=\"w-12 h-12 text-[#929292] mx-auto mb-4\" />\n                                    <h3 className=\"text-[16px] font-bold text-[#111111] mb-2\">\n                                        아직 추천할 파트너가 없어요\n                                    </h3>\n                                    <p className=\"text-[14px] text-[#666666] mb-4\">\n                                        프로필을 완성하고 매칭을 시작해보세요!\n                                    </p>\n                                    <CommonButton\n                                        onClick={() => navigate('/profile')}\n                                        variant=\"secondary\"\n                                    >\n                                        프로필 완성하기\n                                    </CommonButton>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                ) : (\n                    /* Search Tab */\n                    <>\n                        {/* Search Form */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7] mb-6\">\n                            <h2 className=\"text-[18px] font-bold text-[#111111] mb-4\">파트너 검색</h2>\n                            <p className=\"text-[14px] text-[#666666] mb-6\">\n                                이름이나 관심사로 언어 교환 파트너를 직접 찾아보세요.\n                            </p>\n\n                            <div className=\"space-y-4\">\n                                <div>\n                                    <label className=\"block text-[14px] font-medium text-[#111111] mb-2\">\n                                        검색어\n                                    </label>\n                                    <div className=\"flex space-x-2\">\n                                        <input\n                                            type=\"text\"\n                                            value={searchQuery}\n                                            onChange={(e) => setSearchQuery(e.target.value)}\n                                            placeholder=\"이름, 관심사, 학습 목표로 검색하세요\"\n                                            className=\"flex-1 h-12 px-4 border border-[#E7E7E7] rounded-lg focus:border-[#00C471] focus:outline-none\"\n                                            onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                                        />\n                                        <CommonButton\n                                            onClick={handleSearch}\n                                            variant=\"primary\"\n                                            disabled={isLoading || !searchQuery.trim()}\n                                            className=\"px-6\"\n                                        >\n                                            <Search className=\"w-5 h-5\" />\n                                        </CommonButton>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* Search Results */}\n                        <div className=\"mb-6\">\n                            <div className=\"flex items-center justify-between mb-4\">\n                                <h3 className=\"text-[16px] font-bold text-[#111111]\">\n                                    검색 결과 ({searchResults.length})\n                                </h3>\n                                {searchResults.length > 0 && (\n                                    <button\n                                        onClick={() => setShowFilters(!showFilters)}\n                                        className=\"flex items-center space-x-1 text-[14px] text-[#00C471] font-medium\"\n                                    >\n                                        <Filter className=\"w-4 h-4\" />\n                                        <span>필터</span>\n                                    </button>\n                                )}\n                            </div>\n\n                            {isLoading ? (\n                                <div className=\"text-center py-8\">\n                                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#00C471] mx-auto mb-4\"></div>\n                                    <p className=\"text-[14px] text-[#666666]\">검색 중...</p>\n                                </div>\n                            ) : searchQuery && searchResults.length === 0 ? (\n                                <div className=\"bg-white rounded-[20px] p-8 border border-[#E7E7E7] text-center\">\n                                    <Search className=\"w-12 h-12 text-[#929292] mx-auto mb-4\" />\n                                    <h4 className=\"text-[16px] font-bold text-[#111111] mb-2\">\n                                        검색 결과가 없습니다\n                                    </h4>\n                                    <p className=\"text-[14px] text-[#666666] mb-4\">\n                                        다른 검색어나 필터를 시도해보세요.\n                                    </p>\n                                </div>\n                            ) : searchResults.length > 0 ? (\n                                <div className=\"space-y-4\">\n                                    {searchResults.map((user) => (\n                                        <MatchingProfileCard\n                                            key={user.id}\n                                            user={user}\n                                            onViewProfile={() => handleViewProfile(user.id)}\n                                        />\n                                    ))}\n                                </div>\n                            ) : (\n                                <div className=\"bg-white rounded-[20px] p-8 border border-[#E7E7E7] text-center\">\n                                    <Search className=\"w-12 h-12 text-[#929292] mx-auto mb-4\" />\n                                    <h4 className=\"text-[16px] font-bold text-[#111111] mb-2\">\n                                        파트너 검색\n                                    </h4>\n                                    <p className=\"text-[14px] text-[#666666]\">\n                                        위의 검색창에서 원하는 파트너를 찾아보세요.\n                                    </p>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </div>\n\n            {/* Matching Status */}\n            {matchingStatus === 'searching' && (\n                <div className=\"fixed bottom-6 left-6 right-6\">\n                    <div className=\"bg-[#00C471] rounded-[20px] p-4 text-white text-center\">\n                        <div className=\"flex items-center justify-center space-x-2\">\n                            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                            <span className=\"text-[14px] font-medium\">완벽한 파트너를 찾고 있어요...</span>\n                        </div>\n                    </div>\n                </div>\n            )}\n            \n            <ToastContainer />\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Matching/MatchingProfile.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[17,28],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'selectPartner' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":29,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectPartner"},"fix":{"range":[790,813],"text":""},"desc":"Remove unused variable 'selectPartner'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'scheduleSession' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":34,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"scheduleSession"},"fix":{"range":[889,935],"text":""},"desc":"Remove unused variable 'scheduleSession'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n    ChevronLeft,\n    Globe,\n    Clock,\n    Target,\n    Calendar,\n    MessageCircle,\n    Video,\n    CheckCircle,\n    XCircle\n} from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport useMatchingStore from '../../store/matchingStore';\nimport useSessionStore from '../../store/sessionStore';\nimport { useAlert } from '../../hooks/useAlert';\n\nexport default function MatchingProfile() {\n    const navigate = useNavigate();\n    const { userId } = useParams();\n    const { showError } = useAlert();\n\n    const [activeTab, setActiveTab] = useState('profile');\n    const [isScheduling, setIsScheduling] = useState(false);\n\n    const {\n        matchedUsers,\n        selectPartner,\n        acceptMatch,\n        rejectMatch\n    } = useMatchingStore();\n\n    const { scheduleSession } = useSessionStore();\n\n    // 실제로는 userId로 사용자 정보를 가져와야 함\n    const user = matchedUsers.find(u => u.id === userId) || {\n        id: userId,\n        name: \"Emma Wilson\",\n        englishName: \"Emma\",\n        profileImage: \"/assets/basicProfilePic.png\",\n        age: 28,\n        nationality: \"United States\",\n        nativeLanguage: \"English\",\n        learningLanguage: \"Korean\",\n        level: \"Intermediate\",\n        bio: \"Hi! I'm Emma from California. I've been learning Korean for 2 years and I'm really excited to practice with native speakers. I love K-dramas and K-pop!\",\n        interests: [\"K-pop\", \"Travel\", \"Cooking\", \"Photography\", \"Movies\"],\n        learningGoals: [\"일상 대화 능력 향상\", \"한국 문화 이해\", \"비즈니스 한국어\"],\n        availability: [\n            { day: \"Monday\", times: [\"19:00-21:00\"] },\n            { day: \"Wednesday\", times: [\"19:00-21:00\"] },\n            { day: \"Friday\", times: [\"19:00-21:00\"] },\n            { day: \"Saturday\", times: [\"10:00-12:00\", \"14:00-16:00\"] }\n        ],\n        timezone: \"PST (UTC-8)\",\n        sessionPreference: \"1on1\",\n        isOnline: true,\n        lastActive: \"2분 전\",\n        matchScore: 92,\n        completedSessions: 45,\n        rating: 4.8,\n        responseRate: 95\n    };\n\n    const handleAcceptMatch = async () => {\n        try {\n            await acceptMatch(user.id);\n            setIsScheduling(true);\n        } catch (error) {\n            console.error('Failed to accept match:', error);\n            showError('매칭 수락 중 오류가 발생했습니다.');\n        }\n    };\n\n    const handleRejectMatch = async () => {\n        if (window.confirm('이 매칭을 거절하시겠습니까?')) {\n            try {\n                await rejectMatch(user.id);\n                navigate('/matching');\n            } catch (error) {\n                console.error('Failed to reject match:', error);\n                showError('매칭 거절 중 오류가 발생했습니다.');\n            }\n        }\n    };\n\n    const handleScheduleSession = () => {\n        // 세션 예약 로직\n        navigate(`/schedule/new?partnerId=${user.id}`);\n    };\n\n    const handleStartChat = () => {\n        navigate(`/chat/${user.id}`);\n    };\n\n    return (\n        <div className=\"min-h-screen bg-[#FAFAFA]\">\n            {/* Header */}\n            <div className=\"bg-white border-b border-[#E7E7E7] px-6 py-4\">\n                <div className=\"flex items-center justify-between\">\n                    <button\n                        onClick={() => navigate(-1)}\n                        className=\"p-2 -ml-2\"\n                    >\n                        <ChevronLeft className=\"w-6 h-6 text-[#111111]\" />\n                    </button>\n                    <h1 className=\"text-[18px] font-bold text-[#111111]\">매칭 프로필</h1>\n                    <div className=\"w-10\" />\n                </div>\n            </div>\n\n            {/* Profile Header */}\n            <div className=\"bg-white p-6 border-b border-[#E7E7E7]\">\n                <div className=\"flex items-start space-x-4\">\n                    <div className=\"relative\">\n                        <img\n                            src={user.profileImage}\n                            alt={user.name}\n                            className=\"w-24 h-24 rounded-full object-cover\"\n                        />\n                        {user.isOnline && (\n                            <div className=\"absolute bottom-0 right-0 w-6 h-6 bg-[#00C471] \n              border-2 border-white rounded-full\" />\n                        )}\n                    </div>\n\n                    <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                            <h2 className=\"text-[20px] font-bold text-[#111111]\">{user.name}</h2>\n                            <span className=\"px-2 py-1 bg-[#00C471] text-white text-[12px] \n              font-medium rounded-full\">\n                                매칭 {user.matchScore}%\n                            </span>\n                        </div>\n                        <p className=\"text-[14px] text-[#606060] mb-2\">\n                            {user.age}세 • {user.nationality}\n                        </p>\n                        <div className=\"flex items-center space-x-4 text-[14px] text-[#929292]\">\n                            <span className=\"flex items-center space-x-1\">\n                                <Globe className=\"w-4 h-4\" />\n                                <span>{user.nativeLanguage} → {user.learningLanguage}</span>\n                            </span>\n                            <span className=\"flex items-center space-x-1\">\n                                <Target className=\"w-4 h-4\" />\n                                <span>{user.level}</span>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Stats */}\n                <div className=\"grid grid-cols-3 gap-4 mt-6\">\n                    <div className=\"text-center\">\n                        <p className=\"text-[20px] font-bold text-[#111111]\">{user.completedSessions}</p>\n                        <p className=\"text-[12px] text-[#929292]\">완료 세션</p>\n                    </div>\n                    <div className=\"text-center\">\n                        <p className=\"text-[20px] font-bold text-[#111111]\">{user.rating}</p>\n                        <p className=\"text-[12px] text-[#929292]\">평점</p>\n                    </div>\n                    <div className=\"text-center\">\n                        <p className=\"text-[20px] font-bold text-[#111111]\">{user.responseRate}%</p>\n                        <p className=\"text-[12px] text-[#929292]\">응답률</p>\n                    </div>\n                </div>\n            </div>\n\n            {/* Tabs */}\n            <div className=\"bg-white border-b border-[#E7E7E7]\">\n                <div className=\"flex\">\n                    <button\n                        onClick={() => setActiveTab('profile')}\n                        className={`flex-1 py-3 text-[14px] font-medium border-b-2 transition-colors ${activeTab === 'profile'\n                                ? 'text-[#00C471] border-[#00C471]'\n                                : 'text-[#929292] border-transparent'\n                            }`}\n                    >\n                        프로필\n                    </button>\n                    <button\n                        onClick={() => setActiveTab('schedule')}\n                        className={`flex-1 py-3 text-[14px] font-medium border-b-2 transition-colors ${activeTab === 'schedule'\n                                ? 'text-[#00C471] border-[#00C471]'\n                                : 'text-[#929292] border-transparent'\n                            }`}\n                    >\n                        스케줄\n                    </button>\n                </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"p-6 space-y-6\">\n                {activeTab === 'profile' ? (\n                    <>\n                        {/* Bio */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n                            <h3 className=\"text-[16px] font-bold text-[#111111] mb-3\">자기소개</h3>\n                            <p className=\"text-[14px] text-[#606060] leading-relaxed\">\n                                {user.bio}\n                            </p>\n                        </div>\n\n                        {/* Interests */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n                            <h3 className=\"text-[16px] font-bold text-[#111111] mb-3\">관심사</h3>\n                            <div className=\"flex flex-wrap gap-2\">\n                                {user.interests.map((interest, index) => (\n                                    <span\n                                        key={index}\n                                        className=\"px-3 py-1.5 bg-[#F1F3F5] text-[#606060] \n                    text-[14px] rounded-full\"\n                                    >\n                                        #{interest}\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n\n                        {/* Learning Goals */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n                            <h3 className=\"text-[16px] font-bold text-[#111111] mb-3\">학습 목표</h3>\n                            <ul className=\"space-y-2\">\n                                {user.learningGoals.map((goal, index) => (\n                                    <li key={index} className=\"flex items-start space-x-2\">\n                                        <CheckCircle className=\"w-5 h-5 text-[#00C471] flex-shrink-0 mt-0.5\" />\n                                        <span className=\"text-[14px] text-[#606060]\">{goal}</span>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    </>\n                ) : (\n                    /* Schedule Tab */\n                    <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n                        <div className=\"flex items-center justify-between mb-4\">\n                            <h3 className=\"text-[16px] font-bold text-[#111111]\">가능한 시간</h3>\n                            <span className=\"text-[12px] text-[#929292]\">{user.timezone}</span>\n                        </div>\n                        <div className=\"space-y-3\">\n                            {user.availability.map((slot, index) => (\n                                <div key={index} className=\"flex items-center justify-between\">\n                                    <span className=\"text-[14px] font-medium text-[#111111]\">\n                                        {slot.day}\n                                    </span>\n                                    <div className=\"flex flex-wrap gap-2\">\n                                        {slot.times.map((time, timeIndex) => (\n                                            <span\n                                                key={timeIndex}\n                                                className=\"px-3 py-1 bg-[#F1F3F5] text-[#606060] \n                        text-[12px] rounded-lg\"\n                                            >\n                                                {time}\n                                            </span>\n                                        ))}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {/* Bottom Actions */}\n            <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-[#E7E7E7] p-6\">\n                {!isScheduling ? (\n                    <div className=\"flex space-x-3\">\n                        <CommonButton\n                            onClick={handleRejectMatch}\n                            variant=\"secondary\"\n                            className=\"flex-1\"\n                        >\n                            <XCircle className=\"w-5 h-5 mr-2\" />\n                            거절\n                        </CommonButton>\n                        <CommonButton\n                            onClick={handleAcceptMatch}\n                            variant=\"primary\"\n                            className=\"flex-1\"\n                        >\n                            <CheckCircle className=\"w-5 h-5 mr-2\" />\n                            수락\n                        </CommonButton>\n                    </div>\n                ) : (\n                    <div className=\"space-y-3\">\n                        <CommonButton\n                            onClick={handleScheduleSession}\n                            variant=\"primary\"\n                            className=\"w-full\"\n                        >\n                            <Calendar className=\"w-5 h-5 mr-2\" />\n                            세션 예약하기\n                        </CommonButton>\n                        <CommonButton\n                            onClick={handleStartChat}\n                            variant=\"secondary\"\n                            className=\"w-full\"\n                        >\n                            <MessageCircle className=\"w-5 h-5 mr-2\" />\n                            채팅 시작하기\n                        </CommonButton>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Mates/MatesPage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Notification/NotificationPage.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNotifications'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [filter, loadNotifications]","fix":{"range":[927,935],"text":"[filter, loadNotifications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  getMyNotifications,\n  getUnreadNotifications,\n  markNotificationAsRead,\n  markAllNotificationsAsRead,\n  deleteNotification,\n  getUnreadNotificationCount\n} from '../../api/notifications';\nimport Header from '../../components/Header';\nimport { useAlert } from '../../hooks/useAlert';\nimport { Bell, Check, Trash2, MessageCircle, Users, Calendar, Award, AlertCircle } from 'lucide-react';\n\nexport default function NotificationPage() {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState('ALL'); // ALL, UNREAD\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const { showError, showSuccess } = useAlert();\n\n  useEffect(() => {\n    loadNotifications();\n    loadUnreadCount();\n  }, [filter]);\n\n  const loadNotifications = async () => {\n    try {\n      setLoading(true);\n      let data;\n      \n      if (filter === 'UNREAD') {\n        const response = await getUnreadNotifications();\n        data = response.data || [];\n        setNotifications(data);\n        setHasMore(false); // 읽지 않은 알림은 페이징 없이 전체 로드\n      } else {\n        const response = await getMyNotifications(page, 20);\n        data = response.data || response;\n        \n        if (data.content) {\n          setNotifications(prev => page === 0 ? data.content : [...prev, ...data.content]);\n          setHasMore(!data.last);\n        } else if (Array.isArray(data)) {\n          setNotifications(data);\n          setHasMore(false);\n        }\n      }\n    } catch (error) {\n      showError('알림을 불러오는데 실패했습니다.');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadUnreadCount = async () => {\n    try {\n      const response = await getUnreadNotificationCount();\n      setUnreadCount(response.data || 0);\n    } catch (error) {\n      console.error('Failed to load unread count:', error);\n    }\n  };\n\n  const handleMarkAsRead = async (notificationId) => {\n    try {\n      await markNotificationAsRead(notificationId);\n      setNotifications(prev => \n        prev.map(n => \n          n.id === notificationId ? { ...n, isRead: true } : n\n        )\n      );\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      showError('읽음 처리에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleMarkAllAsRead = async () => {\n    try {\n      await markAllNotificationsAsRead();\n      setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));\n      setUnreadCount(0);\n      showSuccess('모든 알림을 읽음 처리했습니다.');\n    } catch (error) {\n      showError('읽음 처리에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const handleDelete = async (notificationId) => {\n    try {\n      await deleteNotification(notificationId);\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\n      showSuccess('알림을 삭제했습니다.');\n    } catch (error) {\n      showError('삭제에 실패했습니다.');\n      console.error(error);\n    }\n  };\n\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case 'CHAT': return <MessageCircle className=\"w-5 h-5\" />;\n      case 'MATCH': return <Users className=\"w-5 h-5\" />;\n      case 'SESSION': return <Calendar className=\"w-5 h-5\" />;\n      case 'ACHIEVEMENT': return <Award className=\"w-5 h-5\" />;\n      case 'SYSTEM': return <AlertCircle className=\"w-5 h-5\" />;\n      default: return <Bell className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getNotificationColor = (type) => {\n    switch (type) {\n      case 'CHAT': return 'text-[#4285F4]';\n      case 'MATCH': return 'text-[#00C471]';\n      case 'SESSION': return 'text-[#FFA500]';\n      case 'ACHIEVEMENT': return 'text-[#FFD700]';\n      case 'SYSTEM': return 'text-[#EA4335]';\n      default: return 'text-[#606060]';\n    }\n  };\n\n  const formatTime = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now - date;\n    \n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n    \n    if (minutes < 1) return '방금 전';\n    if (minutes < 60) return `${minutes}분 전`;\n    if (hours < 24) return `${hours}시간 전`;\n    if (days < 7) return `${days}일 전`;\n    \n    return date.toLocaleDateString();\n  };\n\n  const handleLoadMore = () => {\n    if (!loading && hasMore) {\n      setPage(prev => prev + 1);\n    }\n  };\n\n  if (loading && notifications.length === 0) {\n    return (\n      <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n        <Header />\n        <div className=\"flex justify-center items-center h-[400px]\">\n          <div className=\"text-[#929292]\">로딩 중...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-[#FAFAFA] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      \n      {/* 헤더 섹션 */}\n      <div className=\"bg-white p-6 border-b border-[#E7E7E7]\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-[24px] font-bold text-[#111111]\">알림</h1>\n            {unreadCount > 0 && (\n              <span className=\"px-2 py-1 bg-[#EA4335] text-white text-[12px] rounded-full\">\n                {unreadCount}\n              </span>\n            )}\n          </div>\n          \n          {unreadCount > 0 && (\n            <button\n              onClick={handleMarkAllAsRead}\n              className=\"text-[14px] text-[#00C471] font-medium hover:text-[#00B267]\"\n            >\n              모두 읽음\n            </button>\n          )}\n        </div>\n\n        {/* 필터 */}\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => { setFilter('ALL'); setPage(0); }}\n            className={`px-4 py-2 rounded-full text-[14px] font-medium transition-colors\n              ${filter === 'ALL' \n                ? 'bg-[#111111] text-white' \n                : 'bg-[#F1F3F5] text-[#606060] hover:bg-[#E7E7E7]'\n              }`}\n          >\n            전체\n          </button>\n          <button\n            onClick={() => { setFilter('UNREAD'); setPage(0); }}\n            className={`px-4 py-2 rounded-full text-[14px] font-medium transition-colors\n              ${filter === 'UNREAD' \n                ? 'bg-[#111111] text-white' \n                : 'bg-[#F1F3F5] text-[#606060] hover:bg-[#E7E7E7]'\n              }`}\n          >\n            읽지 않음\n          </button>\n        </div>\n      </div>\n\n      {/* 알림 리스트 */}\n      <div className=\"p-6\">\n        {notifications.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Bell className=\"w-12 h-12 text-[#B5B5B5] mx-auto mb-4\" />\n            <p className=\"text-[#929292]\">알림이 없습니다</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`bg-white rounded-[10px] p-4 border transition-all cursor-pointer\n                  ${notification.isRead \n                    ? 'border-[#E7E7E7]' \n                    : 'border-[#00C471] shadow-sm'\n                  }`}\n                onClick={() => !notification.isRead && handleMarkAsRead(notification.id)}\n              >\n                <div className=\"flex items-start gap-3\">\n                  {/* 아이콘 */}\n                  <div className={`mt-1 ${getNotificationColor(notification.type)}`}>\n                    {getNotificationIcon(notification.type)}\n                  </div>\n\n                  {/* 내용 */}\n                  <div className=\"flex-1\">\n                    <h3 className={`font-medium text-[14px] mb-1\n                      ${notification.isRead ? 'text-[#606060]' : 'text-[#111111]'}`}\n                    >\n                      {notification.title}\n                    </h3>\n                    <p className={`text-[14px] mb-2\n                      ${notification.isRead ? 'text-[#929292]' : 'text-[#606060]'}`}\n                    >\n                      {notification.content || notification.message}\n                    </p>\n                    <div className=\"text-[12px] text-[#B5B5B5]\">\n                      {formatTime(notification.createdAt)}\n                    </div>\n                  </div>\n\n                  {/* 액션 버튼 */}\n                  <div className=\"flex items-center gap-2\">\n                    {!notification.isRead && (\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleMarkAsRead(notification.id);\n                        }}\n                        className=\"p-1.5 text-[#00C471] hover:bg-[#E6F9F1] rounded-full transition-colors\"\n                        title=\"읽음 처리\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete(notification.id);\n                      }}\n                      className=\"p-1.5 text-[#929292] hover:text-[#EA4335] hover:bg-[#FFF5F5] rounded-full transition-colors\"\n                      title=\"삭제\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* 액션 링크 */}\n                {notification.actionUrl && (\n                  <div className=\"mt-3 pt-3 border-t border-[#F1F3F5]\">\n                    <a\n                      href={notification.actionUrl}\n                      className=\"text-[14px] text-[#00C471] font-medium hover:text-[#00B267]\"\n                      onClick={(e) => e.stopPropagation()}\n                    >\n                      자세히 보기 →\n                    </a>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* 더보기 버튼 */}\n        {hasMore && filter === 'ALL' && notifications.length > 0 && (\n          <div className=\"mt-6 text-center\">\n            <button\n              onClick={handleLoadMore}\n              disabled={loading}\n              className=\"px-6 py-2 bg-[#F1F3F5] text-[#606060] rounded-full text-[14px] \n                font-medium hover:bg-[#E7E7E7] transition-colors disabled:opacity-50\"\n            >\n              {loading ? '로딩 중...' : '더보기'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Notifications/NotificationCenter.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"useCallback"},"fix":{"range":[35,48],"text":""},"desc":"Remove unused variable 'useCallback'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNotifications'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [filter, loadNotifications]","fix":{"range":[1201,1209],"text":"[filter, loadNotifications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ChevronRight, \n  Bell, \n  MessageSquare, \n  Users, \n  Video, \n  Award, \n  Settings, \n  Trash2,\n  Check,\n  Filter,\n  Search,\n  RefreshCw\n} from 'lucide-react';\nimport { \n  getNotifications, \n  markNotificationAsRead, \n  markAllNotificationsAsRead,\n  deleteNotification,\n  getUnreadNotificationCount\n} from '../../api/notifications';\n\nconst NotificationCenter = () => {\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [selectedIds, setSelectedIds] = useState(new Set());\n  const [isSelectionMode, setIsSelectionMode] = useState(false);\n  const [filter, setFilter] = useState('all'); // all, unread, chat, matching, session, system\n  const [searchTerm, setSearchTerm] = useState('');\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    totalPages: 1,\n    hasMore: false\n  });\n\n  useEffect(() => {\n    loadNotifications();\n    loadUnreadCount();\n  }, [filter]);\n\n  const loadNotifications = async (page = 1, refresh = false) => {\n    try {\n      if (refresh) setRefreshing(true);\n      else setLoading(true);\n\n      const params = {\n        page,\n        size: 20\n      };\n\n      if (filter === 'unread') {\n        params.unreadOnly = true;\n      } else if (filter !== 'all') {\n        params.category = filter;\n      }\n\n      const response = await getNotifications(params);\n      const notificationItems = response?.notifications || [];\n\n      if (page === 1) {\n        setNotifications(notificationItems);\n      } else {\n        setNotifications(prev => [...prev, ...notificationItems]);\n      }\n\n      setPagination({\n        currentPage: response?.pagination?.page || page,\n        totalPages: response?.pagination?.totalPages || 1,\n        hasMore: response?.pagination?.hasNext || false\n      });\n      if (response?.unreadCount !== undefined) {\n        setUnreadCount(response.unreadCount);\n      }\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  const loadUnreadCount = async () => {\n    try {\n      const response = await getUnreadNotificationCount();\n      setUnreadCount(Number.isFinite(response) ? response : 0);\n    } catch (error) {\n      console.error('Failed to load unread count:', error);\n    }\n  };\n\n  const handleNotificationClick = async (notification) => {\n    if (isSelectionMode) {\n      toggleSelection(notification.id);\n      return;\n    }\n\n    // 읽지 않은 알림인 경우 읽음 처리\n    if (!notification.isRead) {\n      try {\n        await markNotificationAsRead(notification.id);\n        setNotifications(prev =>\n          prev.map(n => \n            n.id === notification.id \n              ? { ...n, isRead: true }\n              : n\n          )\n        );\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      } catch (error) {\n        console.error('Failed to mark as read:', error);\n      }\n    }\n\n    // 알림 타입에 따른 네비게이션\n    handleNavigationFromNotification(notification);\n  };\n\n  const handleNavigationFromNotification = (notification) => {\n    const { type, data } = notification;\n    \n    switch (type) {\n      case 'chat':\n        if (data?.roomId) {\n          navigate(`/chat/${data.roomId}`);\n        } else {\n          navigate('/chat');\n        }\n        break;\n      case 'match_request':\n      case 'match_accepted':\n        if (data?.userId) {\n          navigate(`/matching/profile/${data.userId}`);\n        } else {\n          navigate('/matching');\n        }\n        break;\n      case 'session_invitation':\n      case 'session_reminder':\n        if (data?.sessionId) {\n          navigate(`/sessions/${data.sessionId}`);\n        } else {\n          navigate('/sessions');\n        }\n        break;\n      case 'level_test_result':\n        navigate('/level-test/result');\n        break;\n      case 'achievement':\n        navigate('/profile');\n        break;\n      default:\n        // 기본적으로 상세 페이지로 이동하지 않고 그냥 읽음 처리만\n        break;\n    }\n  };\n\n  const handleMarkAllRead = async () => {\n    try {\n      await markAllNotificationsAsRead();\n      setNotifications(prev => \n        prev.map(n => ({ ...n, isRead: true }))\n      );\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Failed to mark all as read:', error);\n    }\n  };\n\n  const toggleSelection = (id) => {\n    const newSelected = new Set(selectedIds);\n    if (newSelected.has(id)) {\n      newSelected.delete(id);\n    } else {\n      newSelected.add(id);\n    }\n    setSelectedIds(newSelected);\n  };\n\n  const handleDeleteSelected = async () => {\n    if (selectedIds.size === 0) return;\n\n    if (!window.confirm(`선택한 ${selectedIds.size}개의 알림을 삭제하시겠습니까?`)) {\n      return;\n    }\n\n    try {\n      await Promise.all([...selectedIds].map(id => deleteNotification(id)));\n      setNotifications(prev => \n        prev.filter(n => !selectedIds.has(n.id))\n      );\n      setSelectedIds(new Set());\n      setIsSelectionMode(false);\n    } catch (error) {\n      console.error('Failed to delete notifications:', error);\n    }\n  };\n\n  const handleRefresh = () => {\n    loadNotifications(1, true);\n    loadUnreadCount();\n  };\n\n  const handleLoadMore = () => {\n    if (pagination.hasMore && !loading) {\n      loadNotifications(pagination.currentPage + 1);\n    }\n  };\n\n  const getNotificationIcon = (type) => {\n    switch (type) {\n      case 'chat':\n      case 'new_message':\n      case 'chat_invitation':\n        return <MessageSquare className=\"w-5 h-5 text-blue-500\" />;\n      case 'match_request':\n      case 'match_accepted':\n      case 'match_rejected':\n      case 'match_found':\n      case 'matching':\n        return <Users className=\"w-5 h-5 text-green-500\" />;\n      case 'session_invitation':\n      case 'session_reminder':\n      case 'session_cancelled':\n      case 'session_started':\n      case 'session_completed':\n      case 'session':\n        return <Video className=\"w-5 h-5 text-purple-500\" />;\n      case 'achievement':\n      case 'level_test_result':\n      case 'level_test_available':\n      case 'level_test_reminder':\n        return <Award className=\"w-5 h-5 text-yellow-500\" />;\n      case 'system':\n      case 'system_maintenance':\n      case 'system_update':\n      case 'account_security':\n      case 'password_changed':\n        return <Bell className=\"w-5 h-5 text-gray-500\" />;\n      default:\n        return <Bell className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const getNotificationTime = (createdAt) => {\n    const date = new Date(createdAt);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    const diffInDays = Math.floor(diffInHours / 24);\n\n    if (diffInMinutes < 1) return '방금 전';\n    if (diffInMinutes < 60) return `${diffInMinutes}분 전`;\n    if (diffInHours < 24) return `${diffInHours}시간 전`;\n    if (diffInDays < 7) return `${diffInDays}일 전`;\n    \n    return date.toLocaleDateString('ko-KR', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const filteredNotifications = notifications.filter(notification => {\n    if (searchTerm) {\n      const lowerTerm = searchTerm.toLowerCase();\n      return (\n        notification.title?.toLowerCase().includes(lowerTerm) ||\n        notification.message?.toLowerCase().includes(lowerTerm) ||\n        notification.content?.toLowerCase().includes(lowerTerm)\n      );\n    }\n    return true;\n  });\n\n  const filterTabs = [\n    { id: 'all', label: '전체', count: notifications.length },\n    { id: 'unread', label: '읽지 않음', count: unreadCount },\n    { id: 'chat', label: '채팅', count: notifications.filter(n => n.category === 'chat').length },\n    { id: 'matching', label: '매칭', count: notifications.filter(n => n.category === 'matching' || n.type?.includes('match')).length },\n    { id: 'session', label: '세션', count: notifications.filter(n => n.category === 'session' || n.type?.includes('session')).length },\n    { id: 'system', label: '시스템', count: notifications.filter(n => n.category === 'system').length }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA]\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <button \n                onClick={() => navigate(-1)}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <ChevronRight className=\"w-6 h-6 text-[#111111] rotate-180\" />\n              </button>\n              <div>\n                <h1 className=\"text-xl font-bold text-[#111111]\">알림</h1>\n                {unreadCount > 0 && (\n                  <p className=\"text-sm text-[#929292]\">\n                    {unreadCount}개의 읽지 않은 알림\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleRefresh}\n                disabled={refreshing}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <RefreshCw className={`w-5 h-5 text-[#929292] ${refreshing ? 'animate-spin' : ''}`} />\n              </button>\n              \n              <button\n                onClick={() => setIsSelectionMode(!isSelectionMode)}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <Check className=\"w-5 h-5 text-[#929292]\" />\n              </button>\n              \n              <button\n                onClick={() => navigate('/settings/notifications')}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <Settings className=\"w-5 h-5 text-[#929292]\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"mt-4 relative\">\n            <Search className=\"absolute left-3 top-3.5 w-4 h-4 text-[#929292]\" />\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"알림 검색...\"\n              className=\"w-full pl-10 pr-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471] transition-colors\"\n            />\n          </div>\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"px-6 pb-4\">\n          <div className=\"flex space-x-1 bg-gray-100 rounded-lg p-1 overflow-x-auto\">\n            {filterTabs.map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setFilter(tab.id)}\n                className={`flex-shrink-0 px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n                  filter === tab.id\n                    ? 'bg-white text-[#111111] shadow-sm'\n                    : 'text-[#929292] hover:text-[#111111] hover:bg-gray-50'\n                }`}\n              >\n                {tab.label}\n                {tab.count > 0 && (\n                  <span className={`ml-2 px-2 py-0.5 rounded-full text-xs ${\n                    filter === tab.id ? 'bg-[#00C471] text-white' : 'bg-gray-200 text-gray-600'\n                  }`}>\n                    {tab.count}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Selection Mode Actions */}\n        {isSelectionMode && (\n          <div className=\"px-6 pb-4\">\n            <div className=\"flex items-center justify-between bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <span className=\"text-sm text-blue-800\">\n                {selectedIds.size}개 선택됨\n              </span>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={handleDeleteSelected}\n                  disabled={selectedIds.size === 0}\n                  className=\"px-3 py-1 text-sm text-red-600 hover:text-red-700 disabled:text-gray-400 transition-colors\"\n                >\n                  삭제\n                </button>\n                <button\n                  onClick={() => {\n                    setSelectedIds(new Set());\n                    setIsSelectionMode(false);\n                  }}\n                  className=\"px-3 py-1 text-sm text-gray-600 hover:text-gray-700 transition-colors\"\n                >\n                  취소\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        {!isSelectionMode && unreadCount > 0 && (\n          <div className=\"px-6 pb-4\">\n            <button\n              onClick={handleMarkAllRead}\n              className=\"text-sm text-[#00C471] hover:text-[#00B267] font-medium transition-colors\"\n            >\n              모든 알림 읽음 처리\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Notifications List */}\n      <div className=\"px-6 py-4\">\n        {loading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto\"></div>\n            <p className=\"text-[#929292] mt-2\">알림을 불러오는 중...</p>\n          </div>\n        ) : filteredNotifications.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Bell className=\"w-16 h-16 text-[#929292] mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-[#111111] mb-2\">알림이 없습니다</h3>\n            <p className=\"text-[#929292]\">\n              {filter === 'unread' \n                ? '모든 알림을 확인했습니다.' \n                : '새로운 알림이 도착하면 여기에 표시됩니다.'\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {filteredNotifications.map((notification) => (\n              <div\n                key={notification.id}\n                onClick={() => handleNotificationClick(notification)}\n                className={`bg-white rounded-lg p-4 cursor-pointer hover:bg-gray-50 transition-colors ${\n                  !notification.isRead ? 'border-l-4 border-[#00C471]' : 'border border-gray-200'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  {isSelectionMode && (\n                    <div className=\"mt-1\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedIds.has(notification.id)}\n                        onChange={() => toggleSelection(notification.id)}\n                        className=\"w-4 h-4 text-[#00C471] border-gray-300 rounded focus:ring-[#00C471]\"\n                      />\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-1\">\n                    {getNotificationIcon(notification.category || notification.type)}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className={`text-sm font-medium ${\n                          notification.isRead ? 'text-[#111111]' : 'text-[#111111] font-semibold'\n                        }`}>\n                          {notification.title}\n                        </h4>\n                        <p className=\"text-sm text-[#929292] mt-1 line-clamp-2\">\n                          {notification.message}\n                        </p>\n                      </div>\n                      <div className=\"flex-shrink-0 ml-4\">\n                        <span className=\"text-xs text-[#929292]\">\n                          {getNotificationTime(notification.createdAt)}\n                        </span>\n                        {!notification.isRead && (\n                          <div className=\"w-2 h-2 bg-[#00C471] rounded-full mt-1 ml-auto\"></div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {/* Load More Button */}\n            {pagination.hasMore && (\n              <div className=\"text-center py-4\">\n                <button\n                  onClick={handleLoadMore}\n                  disabled={loading}\n                  className=\"px-6 py-2 text-sm text-[#00C471] hover:text-[#00B267] font-medium transition-colors\"\n                >\n                  {loading ? '로딩 중...' : '더 보기'}\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationCenter;\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Notifications/NotificationList.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadNotifications' and 'loadUnreadCount'. Either include them or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [filter, loadNotifications, loadUnreadCount]","fix":{"range":[1276,1284],"text":"[filter, loadNotifications, loadUnreadCount]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ChevronLeft, \n  Filter, \n  MoreVertical, \n  Check, \n  CheckCheck, \n  Trash2, \n  Search,\n  Bell,\n  MessageSquare,\n  Users,\n  Calendar,\n  Award,\n  AlertCircle,\n  Info,\n  RefreshCw\n} from 'lucide-react';\nimport useNotificationStore from '../../store/notificationStore';\nimport CommonButton from '../../components/CommonButton';\n\nconst NotificationList = () => {\n  const navigate = useNavigate();\n  const {\n    notifications,\n    unreadCount,\n    loading,\n    error,\n    filter,\n    pagination,\n    loadNotifications,\n    loadUnreadCount,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    deleteSelectedNotifications,\n    setFilter,\n    clearFilter,\n    clearError,\n    getGroupedNotifications,\n    searchNotifications\n  } = useNotificationStore();\n\n  const [selectedNotifications, setSelectedNotifications] = useState([]);\n  const [showFilters, setShowFilters] = useState(false);\n  const [showActions, setShowActions] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSelectionMode, setIsSelectionMode] = useState(false);\n\n  useEffect(() => {\n    loadNotifications(1, 20, true);\n    loadUnreadCount();\n  }, [filter]);\n\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        clearError();\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error, clearError]);\n\n  const handleLoadMore = useCallback(() => {\n    if (pagination.hasNext && !loading) {\n      loadNotifications(pagination.page + 1, 20, false);\n    }\n  }, [pagination.hasNext, pagination.page, loading, loadNotifications]);\n\n  const handleNotificationClick = async (notification) => {\n    if (!notification.isRead) {\n      await markAsRead(notification.id);\n    }\n\n    if (notification.clickUrl) {\n      navigate(notification.clickUrl);\n    } else {\n      // 기본 액션 처리\n      const baseType = notification.category || notification.type;\n      switch (baseType) {\n        case 'chat':\n          navigate('/chat');\n          break;\n        case 'matching':\n        case 'match_request':\n        case 'match_accepted':\n          navigate('/matching');\n          break;\n        case 'session':\n        case 'session_reminder':\n        case 'session_invitation':\n          navigate('/main');\n          break;\n        case 'achievement':\n        case 'level_test_result':\n          navigate('/profile');\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  const handleMarkAsRead = async (notificationId, event) => {\n    event.stopPropagation();\n    await markAsRead(notificationId);\n  };\n\n  const handleDeleteNotification = async (notificationId, event) => {\n    event.stopPropagation();\n    if (window.confirm('이 알림을 삭제하시겠습니까?')) {\n      await deleteNotification(notificationId);\n    }\n  };\n\n  const handleSelectNotification = (notificationId) => {\n    setSelectedNotifications(prev => {\n      if (prev.includes(notificationId)) {\n        return prev.filter(id => id !== notificationId);\n      } else {\n        return [...prev, notificationId];\n      }\n    });\n  };\n\n  const handleSelectAll = () => {\n    if (selectedNotifications.length === notifications.length) {\n      setSelectedNotifications([]);\n    } else {\n      setSelectedNotifications(notifications.map(n => n.id));\n    }\n  };\n\n  const handleBulkAction = async (action) => {\n    if (selectedNotifications.length === 0) return;\n\n    switch (action) {\n      case 'markAsRead':\n        for (const id of selectedNotifications) {\n          await markAsRead(id);\n        }\n        break;\n      case 'delete':\n        if (window.confirm(`선택된 ${selectedNotifications.length}개의 알림을 삭제하시겠습니까?`)) {\n          await deleteSelectedNotifications(selectedNotifications);\n        }\n        break;\n    }\n    \n    setSelectedNotifications([]);\n    setIsSelectionMode(false);\n  };\n\n  const getTypeIcon = (type) => {\n    if (!type) return <Bell className=\"w-5 h-5\" />;\n    const normalized = type.toLowerCase();\n\n    if (normalized.includes('chat')) {\n      return <MessageSquare className=\"w-5 h-5\" />;\n    }\n    if (normalized.includes('match')) {\n      return <Users className=\"w-5 h-5\" />;\n    }\n    if (normalized.includes('session')) {\n      return <Calendar className=\"w-5 h-5\" />;\n    }\n    if (normalized.includes('achieve') || normalized.includes('level_test')) {\n      return <Award className=\"w-5 h-5\" />;\n    }\n    if (normalized.includes('system')) {\n      return <Info className=\"w-5 h-5\" />;\n    }\n    if (normalized.includes('urgent')) {\n      return <AlertCircle className=\"w-5 h-5\" />;\n    }\n    return <Bell className=\"w-5 h-5\" />;\n  };\n\n  const getTypeColor = (type) => {\n    if (!type) return 'text-indigo-600';\n    const normalized = type.toLowerCase();\n\n    if (normalized.includes('chat')) return 'text-blue-600';\n    if (normalized.includes('match')) return 'text-green-600';\n    if (normalized.includes('session')) return 'text-purple-600';\n    if (normalized.includes('achieve') || normalized.includes('level_test')) return 'text-yellow-600';\n    if (normalized.includes('system')) return 'text-gray-600';\n    if (normalized.includes('urgent')) return 'text-red-600';\n    return 'text-indigo-600';\n  };\n\n  const formatTime = (timestamp) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now - date) / (1000 * 60 * 60);\n\n    if (diffInHours < 24) {\n      return date.toLocaleTimeString('ko-KR', { \n        hour: '2-digit', \n        minute: '2-digit' \n      });\n    } else {\n      return date.toLocaleDateString('ko-KR', { \n        month: 'short', \n        day: 'numeric' \n      });\n    }\n  };\n\n  const filteredNotifications = searchQuery \n    ? searchNotifications(searchQuery)\n    : notifications;\n\n  const groupedNotifications = getGroupedNotifications();\n\n  const FilterButton = ({ type, label, count }) => (\n    <button\n      onClick={() => {\n        if (filter.type === type) {\n          clearFilter();\n        } else {\n          setFilter({ type });\n        }\n      }}\n      className={`\n        px-3 py-2 rounded-lg text-sm font-medium transition-colors flex items-center space-x-2\n        ${filter.type === type \n          ? 'bg-[#00C471] text-white' \n          : 'bg-gray-100 text-[#111111] hover:bg-gray-200'\n        }\n      `}\n    >\n      <span>{label}</span>\n      {count > 0 && (\n        <span className={`\n          px-2 py-0.5 rounded-full text-xs font-bold\n          ${filter.type === type \n            ? 'bg-white text-[#00C471]' \n            : 'bg-[#00C471] text-white'\n          }\n        `}>\n          {count}\n        </span>\n      )}\n    </button>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA]\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-10\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <button \n                onClick={() => navigate(-1)}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <ChevronLeft className=\"w-6 h-6 text-[#111111]\" />\n              </button>\n              <div>\n                <h1 className=\"text-xl font-bold text-[#111111]\">알림</h1>\n                {unreadCount > 0 && (\n                  <p className=\"text-sm text-[#929292]\">\n                    읽지 않은 알림 {unreadCount}개\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setShowFilters(!showFilters)}\n                className={`\n                  p-2 rounded-lg transition-colors\n                  ${showFilters ? 'bg-[#00C471] text-white' : 'hover:bg-gray-100 text-[#111111]'}\n                `}\n              >\n                <Filter className=\"w-5 h-5\" />\n              </button>\n              \n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowActions(!showActions)}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                >\n                  <MoreVertical className=\"w-5 h-5 text-[#111111]\" />\n                </button>\n                \n                {showActions && (\n                  <div className=\"absolute right-0 top-full mt-2 bg-white border border-gray-200 rounded-lg shadow-lg py-1 min-w-[160px] z-20\">\n                    <button\n                      onClick={async () => {\n                        await markAllAsRead();\n                        setShowActions(false);\n                      }}\n                      className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center space-x-2\"\n                    >\n                      <CheckCheck className=\"w-4 h-4\" />\n                      <span>모두 읽음</span>\n                    </button>\n                    <button\n                      onClick={() => {\n                        setIsSelectionMode(!isSelectionMode);\n                        setSelectedNotifications([]);\n                        setShowActions(false);\n                      }}\n                      className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center space-x-2\"\n                    >\n                      <Check className=\"w-4 h-4\" />\n                      <span>선택 모드</span>\n                    </button>\n                    <button\n                      onClick={() => {\n                        loadNotifications(1, 20, true);\n                        loadUnreadCount();\n                        setShowActions(false);\n                      }}\n                      className=\"w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center space-x-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4\" />\n                      <span>새로고침</span>\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"mt-4 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-[#929292]\" />\n            <input\n              type=\"text\"\n              placeholder=\"알림 검색...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471]\"\n            />\n          </div>\n\n          {/* Filters */}\n          {showFilters && (\n            <div className=\"mt-4 flex flex-wrap gap-2\">\n              <FilterButton type={null} label=\"전체\" count={notifications.length} />\n              <FilterButton type=\"chat\" label=\"채팅\" count={notifications.filter(n => (n.category || n.type) === 'chat').length} />\n              <FilterButton type=\"matching\" label=\"매칭\" count={notifications.filter(n => (n.category || '').includes('matching') || n.type?.includes('match')).length} />\n              <FilterButton type=\"session\" label=\"세션\" count={notifications.filter(n => (n.category || '').includes('session') || n.type?.includes('session')).length} />\n              <FilterButton type=\"achievement\" label=\"성취\" count={notifications.filter(n => (n.category || n.type) === 'achievement').length} />\n              <FilterButton type=\"system\" label=\"시스템\" count={notifications.filter(n => (n.category || n.type) === 'system').length} />\n            </div>\n          )}\n\n          {/* Selection Mode Actions */}\n          {isSelectionMode && (\n            <div className=\"mt-4 flex items-center justify-between bg-blue-50 px-4 py-2 rounded-lg\">\n              <div className=\"flex items-center space-x-4\">\n                <button\n                  onClick={handleSelectAll}\n                  className=\"text-sm text-blue-600 font-medium\"\n                >\n                  {selectedNotifications.length === notifications.length ? '전체 해제' : '전체 선택'}\n                </button>\n                <span className=\"text-sm text-[#929292]\">\n                  {selectedNotifications.length}개 선택됨\n                </span>\n              </div>\n              \n              {selectedNotifications.length > 0 && (\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => handleBulkAction('markAsRead')}\n                    className=\"px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700\"\n                  >\n                    읽음 처리\n                  </button>\n                  <button\n                    onClick={() => handleBulkAction('delete')}\n                    className=\"px-3 py-1 bg-red-600 text-white text-sm rounded-md hover:bg-red-700\"\n                  >\n                    삭제\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"mx-6 mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <p className=\"text-red-600 text-sm\">{error}</p>\n        </div>\n      )}\n\n      {/* Notifications List */}\n      <div className=\"px-6 py-4\">\n        {loading && notifications.length === 0 ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto\"></div>\n              <p className=\"text-[#929292] mt-2\">알림을 불러오는 중...</p>\n            </div>\n          </div>\n        ) : filteredNotifications.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Bell className=\"w-16 h-16 text-[#929292] mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-[#111111] mb-2\">알림이 없습니다</h3>\n            <p className=\"text-[#929292]\">새로운 알림이 오면 여기에 표시됩니다.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(groupedNotifications).map(([dateGroup, groupNotifications]) => (\n              <div key={dateGroup}>\n                <h3 className=\"text-sm font-medium text-[#929292] mb-2 sticky top-16 bg-[#FAFAFA] py-1\">\n                  {dateGroup}\n                </h3>\n                \n                <div className=\"space-y-2\">\n                  {groupNotifications.map((notification) => (\n                    <div\n                      key={notification.id}\n                      onClick={() => !isSelectionMode && handleNotificationClick(notification)}\n                      className={`\n                        bg-white rounded-lg p-4 transition-all duration-200 border-l-4\n                        ${!notification.isRead \n                          ? 'border-l-[#00C471] shadow-md' \n                          : 'border-l-gray-200 shadow-sm'\n                        }\n                        ${!isSelectionMode ? 'cursor-pointer hover:shadow-lg' : ''}\n                        ${selectedNotifications.includes(notification.id) \n                          ? 'bg-blue-50 border-l-blue-500' \n                          : ''\n                        }\n                      `}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        {isSelectionMode && (\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedNotifications.includes(notification.id)}\n                            onChange={() => handleSelectNotification(notification.id)}\n                            className=\"mt-1\"\n                          />\n                        )}\n                        \n                        <div className={`${getTypeColor(notification.category || notification.type)} mt-1`}>\n                          {getTypeIcon(notification.category || notification.type)}\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"text-xs text-[#929292] font-medium\">\n                              {notification.category || '알림'}\n                            </span>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-xs text-[#929292]\">\n                                {formatTime(notification.createdAt)}\n                              </span>\n                              {!isSelectionMode && (\n                                <div className=\"flex space-x-1\">\n                                  {!notification.isRead && (\n                                    <button\n                                      onClick={(e) => handleMarkAsRead(notification.id, e)}\n                                      className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n                                      title=\"읽음 처리\"\n                                    >\n                                      <Check className=\"w-3 h-3 text-[#929292]\" />\n                                    </button>\n                                  )}\n                                  <button\n                                    onClick={(e) => handleDeleteNotification(notification.id, e)}\n                                    className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n                                    title=\"삭제\"\n                                  >\n                                    <Trash2 className=\"w-3 h-3 text-[#929292]\" />\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          \n                          {notification.title && (\n                            <h4 className={`font-medium text-sm mb-1 ${\n                              !notification.isRead ? 'text-[#111111]' : 'text-[#606060]'\n                            }`}>\n                              {notification.title}\n                            </h4>\n                          )}\n                          \n                          <p className={`text-sm leading-relaxed ${\n                            !notification.isRead ? 'text-[#414141]' : 'text-[#929292]'\n                          }`}>\n                            {notification.message || notification.content}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n            \n            {/* Load More Button */}\n            {pagination.hasNext && (\n              <div className=\"text-center mt-6\">\n                <CommonButton\n                  onClick={handleLoadMore}\n                  disabled={loading}\n                  variant=\"secondary\"\n                  className=\"px-8\"\n                >\n                  {loading ? '로딩 중...' : '더 보기'}\n                </CommonButton>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Bottom Safe Area for Mobile */}\n      <div className=\"h-20\" />\n    </div>\n  );\n};\n\nexport default NotificationList;\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInfo/ObInfo1.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'saveEnglishName' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"saveEnglishName"},"fix":{"range":[152,168],"text":""},"desc":"Remove unused variable 'saveEnglishName'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport ProgressBar from \"../../components/PrograssBar\";\nimport { saveEnglishName,saveOnboardingStep1} from \"../../api/onboarding\";\nimport CommonButton from \"../../components/CommonButton\";\nimport useProfileStore from \"../../store/profileStore\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAlert } from \"../../hooks/useAlert.jsx\";\n\nexport default function OnboardingInfo() {\n  const setEnglishName = useProfileStore((state) => state.setEnglishName);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [hasInvalidInput, setHasInvalidInput] = useState(false);\n  const navigate = useNavigate();\n  const { showError } = useAlert();\n\n  // 영어만 입력 허용 (공백 포함)\n  const handleChange = (e) => {\n    const value = e.target.value;\n    if (/^[a-zA-Z\\s]*$/.test(value)) {\n      setInputValue(value);\n      setHasInvalidInput(false);\n    } else {\n      // 유효하지 않은 문자 입력 시 경고 표시\n      setHasInvalidInput(true);\n      setTimeout(() => setHasInvalidInput(false), 2000); // 2초 후 자동 사라짐\n    }\n  };\n\n  // 영어 1자 이상 입력 시 버튼 활성화 (공백 제거 후 체크)\n  const isButtonEnabled = inputValue.trim().length > 0;\n\n  // 버튼 클릭 시만 저장\n  const handleNext = async () => {\n    const trimmedName = inputValue.trim();\n\n    // 🔍 디버깅 로그 추가\n    console.log(\"🔍 [OnboardingInfo1] handleNext 시작\");\n    console.log(\"🔍 입력된 이름:\", trimmedName);\n    console.log(\"🔍 LocalStorage 토큰 확인:\");\n    console.log(\"🔍 - accessToken:\", localStorage.getItem(\"accessToken\") ? \"존재\" : \"없음\");\n    console.log(\"🔍 - refreshToken:\", localStorage.getItem(\"refreshToken\") ? \"존재\" : \"없음\");\n\n    // 추가 유효성 검사\n    if (trimmedName.length < 2) {\n      showError(\"이름은 최소 2글자 이상 입력해주세요.\");\n      return;\n    }\n\n    if (trimmedName.length > 50) {\n      showError(\"이름은 50글자를 초과할 수 없습니다.\");\n      return;\n    }\n\n    try {\n      console.log(\"🔍 saveOnboardingStep1 호출 시작\");\n      await saveOnboardingStep1({\n        englishName: trimmedName,\n        residence: '',\n        profileImage: null,\n        intro: ''\n      });\n      console.log(\"🔍 saveOnboardingStep1 성공\");\n      setEnglishName(trimmedName);\n      navigate(\"/onboarding-info/2\");\n      console.log(\"🔍 온보딩 1단계 저장 완료:\", trimmedName);\n    } catch (e) {\n      console.log(\"🔍 ❌ saveOnboardingStep1 실패:\", e);\n      console.log(\"🔍 ❌ Error response:\", e.response);\n      console.log(\"🔍 ❌ Error status:\", e.response?.status);\n      console.log(\"🔍 ❌ Error data:\", e.response?.data);\n      showError(\"영어 이름 저장에 실패했습니다.\");\n      console.error(e);\n    }\n  };\n\n  return (\n    <div className=\"bg-[#FFFFFF] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      <ProgressBar total={5} value={1} className=\"mt-[19px]\" />\n      <div className=\"mx-auto mt-[19px] max-w-[720px] w-full px-6\">\n        <h1 className=\"text-[32px] font-bold leading-[42px] text-[#111111]\">\n          파트너가 편하게 부를 수 있는 이름을 입력해주세요!\n        </h1>\n      </div>\n      {/* Figma nickname input section */}\n      <div className=\"mx-auto mt-[32px] max-w-[720px] w-full px-6\">\n        <label className=\"block text-[16px] font-medium leading-[24px] text-[#343a40] mb-[8px]\">\n          영어 이름\n        </label>\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            placeholder=\"예: John, Sarah, Alex\"\n            value={inputValue}\n            onChange={handleChange}\n            maxLength={50}\n            className={`w-full h-[56px] px-[16px] border rounded-[6px] bg-[#ffffff] text-[16px] font-medium text-[#111111] placeholder-[#929292] outline-none transition-colors duration-200 ${\n              hasInvalidInput \n                ? 'border-[#EA4335] focus:border-[#EA4335]' \n                : 'border-[#ced4da] focus:border-[#111111]'\n            }`}\n          />\n          {/* 글자수 표시 */}\n          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[12px] text-[#929292]\">\n            {inputValue.length}/50\n          </div>\n        </div>\n        \n        {/* 실시간 피드백 메시지 */}\n        {hasInvalidInput && (\n          <div className=\"flex items-center mt-2 text-[#EA4335] text-[14px]\">\n            <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            영어 알파벳과 공백만 입력 가능합니다\n          </div>\n        )}\n        \n        {/* 입력 가이드 */}\n        <div className=\"mt-2 text-[12px] text-[#606060]\">\n          • 영어 알파벳과 공백만 사용 가능\n          • 최소 2글자 이상, 최대 50글자\n          • 예시: John, Sarah Kim, Alex Johnson\n        </div>\n        \n        {/* 글자수 부족 경고 */}\n        {inputValue.trim().length > 0 && inputValue.trim().length < 2 && (\n          <div className=\"flex items-center mt-2 text-[#FFA500] text-[14px]\">\n            <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            최소 2글자 이상 입력해주세요\n          </div>\n        )}\n        \n        <div className=\"mb-[500px]\">\n          <CommonButton text=\"다음\" disabled={!isButtonEnabled} onClick={handleNext} />\n        </div>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInfo/ObInfo2.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[321,326],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from \"react\";\nimport Header from \"../../components/Header\";\nimport ProgressBar from \"../../components/PrograssBar\";\nimport CommonButton from \"../../components/CommonButton\";\nimport Select from \"react-select\";\nimport useProfileStore from \"../../store/profileStore\";\nimport { data, useNavigate } from \"react-router-dom\";\nimport commonSelectStyles from \"../../components/SelectStyles\";\nimport api from \"../../api\";\nimport { useAlert } from \"../../hooks/useAlert.jsx\";\n\nexport default function OnboardingInfo2() {\n  const { showError } = useAlert();\n  const [locations, setLocations] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const setResidence = useProfileStore((state) => state.setResidence);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // 거주지 데이터를 로드하는 함수\n    const loadLocations = async () => {\n      try {\n        console.log(\"🔍 [ObInfo2] Loading locations...\");\n        console.log(\"🔍 [ObInfo2] API Base URL:\", api.defaults.baseURL);\n        console.log(\"🔍 [ObInfo2] Environment:\", import.meta.env.MODE);\n        console.log(\"🔍 [ObInfo2] VITE_API_URL:\", import.meta.env.VITE_API_URL);\n\n        const response = await api.get(\"/user/locations\");\n        console.log(\"🔍 [ObInfo2] Raw API Response:\", response);\n        console.log(\"🔍 [ObInfo2] Response status:\", response.status);\n        console.log(\"🔍 [ObInfo2] Response headers:\", response.headers);\n        console.log(\"🔍 [ObInfo2] Response data:\", response.data);\n\n        // 서버 응답 구조 확인\n        let locationData = [];\n\n        // 응답이 HTML 형태인지 확인 (에러 페이지일 수 있음)\n        if (typeof response.data === 'string' && response.data.includes('<html>')) {\n          console.error(\"🔍 [ObInfo2] ❌ Received HTML instead of JSON - likely server error\");\n          throw new Error(\"서버에서 HTML 응답을 받았습니다. API 엔드포인트를 확인하세요.\");\n        }\n\n        // 정상적인 JSON 응답 처리\n        if (response.data && response.data.success && Array.isArray(response.data.data)) {\n          // 새로운 응답 구조: { success: true, data: [...], message: null }\n          locationData = response.data.data;\n          console.log(\"🔍 [ObInfo2] ✅ Using nested response structure\");\n        } else if (Array.isArray(response.data)) {\n          // 기존 응답 구조: [...]\n          locationData = response.data;\n          console.log(\"🔍 [ObInfo2] ✅ Using direct array structure\");\n        } else {\n          console.warn(\"🔍 [ObInfo2] ⚠️ Unexpected response structure:\", response.data);\n          locationData = [];\n        }\n\n        setLocations(locationData);\n        console.log(\"🔍 [ObInfo2] ✅ Processed locations:\", locationData.length, \"items\");\n\n        // 첫 번째 아이템 로그 (디버깅용)\n        if (locationData.length > 0) {\n          console.log(\"🔍 [ObInfo2] Sample location:\", locationData[0]);\n        }\n\n      } catch (err) {\n        console.error(\"🔍 [ObInfo2] ❌ API Error:\", err);\n        console.error(\"🔍 [ObInfo2] Error message:\", err.message);\n        console.error(\"🔍 [ObInfo2] Error response status:\", err.response?.status);\n        console.error(\"🔍 [ObInfo2] Error response data:\", err.response?.data);\n        console.error(\"🔍 [ObInfo2] Request URL:\", err.config?.url);\n        console.error(\"🔍 [ObInfo2] Full request config:\", err.config);\n\n        // 더 상세한 에러 메시지 제공\n        let errorMessage = \"거주지 리스트를 불러오지 못했습니다.\";\n        if (err.response?.status === 404) {\n          errorMessage = \"거주지 API를 찾을 수 없습니다. (404)\";\n        } else if (err.response?.status === 500) {\n          errorMessage = \"서버 내부 오류입니다. (500)\";\n        } else if (err.message.includes('Network Error')) {\n          errorMessage = \"네트워크 연결을 확인해주세요.\";\n        } else if (err.message.includes('HTML')) {\n          errorMessage = \"서버 설정 오류입니다. 관리자에게 문의하세요.\";\n        }\n\n        showError(errorMessage);\n        setLocations([]);\n      }\n    };\n\n    loadLocations();\n  }, [showError]);\n\n  // API 데이터를 react-select 옵션으로 변환\n  const residenceOptions = useMemo(() => {\n    // locations가 배열인지 다시 한번 확인\n    if (!Array.isArray(locations)) {\n      console.warn(\"Locations is not an array:\", locations);\n      return [];\n    }\n    \n    return locations.map(loc => ({\n      value: loc.locationId,\n      label: `${loc.city}, ${loc.country} (${loc.timezone})`\n    }));\n  }, [locations]);\n\n  const isButtonEnabled = !!selected;\n\n  const handleNext = async () => {\n    try {\n      await api.post(\"/user/location\", { locationId: selected.value });\n      setResidence(selected.value);\n      navigate(\"/onboarding-info/3\");\n    } catch (e) {\n      showError(\"거주지 저장에 실패했습니다.\");\n      console.error(e);\n    }\n  };\n\n  return (\n    <div className=\"bg-[#FFFFFF] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      <ProgressBar total={5} value={2} className=\"mt-[19px]\" />\n      <div className=\"mx-auto mt-[19px] max-w-[720px] w-full px-6\">\n        <h1 className=\"text-[32px] font-bold leading-[42px] text-[#111111]\">\n          현재 거주지와 시간대를 선택해주세요.\n        </h1>\n      </div>\n      <div className=\"mx-auto mt-[32px] max-w-[720px] w-full px-6\">\n        <label className=\"block text-[16px] font-medium leading-[24px] text-[#343a40] mb-[8px]\">\n          거주지 & 시간대\n        </label>\n        <Select\n          options={residenceOptions}\n          value={selected}\n          onChange={setSelected}\n          placeholder=\"거주지&시간대를 선택해주세요\"\n          className=\"mb-[576px]\"\n          styles={commonSelectStyles}\n          isSearchable={false}\n        />\n        <CommonButton text=\"다음\" disabled={!isButtonEnabled} onClick={handleNext} />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInfo/ObInfo3.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'saveProfileToServer' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"saveProfileToServer"},"fix":{"range":[771,792],"text":""},"desc":"Remove unused variable 'saveProfileToServer'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'showError'. Either include it or remove the dependency array.","line":210,"column":6,"nodeType":"ArrayExpression","endLine":210,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [stream, isCameraOpen, showError]","fix":{"range":[6570,6592],"text":"[stream, isCameraOpen, showError]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState } from \"react\";\nimport Header from \"../../components/Header\";\nimport ProgressBar from \"../../components/PrograssBar\";\nimport CommonButton from \"../../components/CommonButton\";\nimport useProfileStore from \"../../store/profileStore\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../../api\";\nimport { useAlert } from \"../../hooks/useAlert.jsx\";\n\nexport default function OnboardingInfo3() {\n  const [image, setImage] = useState(null);\n  const [imageFile, setImageFile] = useState(null); // 실제 파일 저장용\n  const [isCameraOpen, setIsCameraOpen] = useState(false);\n  const [stream, setStream] = useState(null);\n  const fileInputRef = useRef();\n  const videoRef = useRef();\n  const canvasRef = useRef();\n  const { setProfileImage, saveProfileToServer } = useProfileStore();\n  const navigate = useNavigate();\n  const { showError, showSuccess } = useAlert();\n\n  // 파일 선택\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      // 실제 파일 저장\n      setImageFile(file);\n      \n      // 미리보기용 URL 생성 (압축 없이)\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // 카메라 열기\n  const handleCameraClick = async () => {\n    try {\n      console.log('카메라 접근 시도...');\n      // 더 호환성 좋은 설정으로 시작\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: { min: 320, ideal: 640, max: 1280 },\n          height: { min: 240, ideal: 480, max: 720 },\n          facingMode: 'user' // 전면 카메라 사용\n        },\n        audio: false\n      });\n      \n      console.log('카메라 스트림 획득 성공:', mediaStream);\n      setStream(mediaStream);\n      setIsCameraOpen(true);\n    } catch (error) {\n      console.error('카메라 접근 실패:', error);\n      if (error.name === 'NotAllowedError') {\n        showError('카메라 권한을 허용해주세요. 브라우저 설정에서 카메라 접근을 허용해야 합니다.');\n      } else if (error.name === 'NotFoundError') {\n        showError('카메라를 찾을 수 없습니다. 카메라가 연결되어 있는지 확인해주세요.');\n      } else if (error.name === 'NotReadableError') {\n        showError('카메라가 다른 앱에서 사용 중입니다.');\n      } else {\n        showError('카메라를 열 수 없습니다: ' + error.message);\n      }\n    }\n  };\n\n  // 사진 캡처\n  const handleCapture = () => {\n    console.log('📸 캡처 버튼 클릭됨');\n    \n    if (!videoRef.current || !canvasRef.current) {\n      console.error('❌ 비디오 또는 캔버스 요소를 찾을 수 없음');\n      showError('카메라 화면을 찾을 수 없습니다.');\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    \n    console.log('🔍 비디오 상태 체크:', {\n      readyState: video.readyState,\n      videoWidth: video.videoWidth,\n      videoHeight: video.videoHeight,\n      paused: video.paused,\n      ended: video.ended\n    });\n    \n    // 더 관대한 조건으로 변경 - 최소한의 데이터만 있으면 캡처 시도\n    if (video.readyState < 2) { // HAVE_CURRENT_DATA (2) 이상이면 캡처 가능\n      console.warn('⚠️ 비디오가 아직 준비되지 않음, readyState:', video.readyState);\n      \n      // 짧은 시간 후 재시도\n      setTimeout(() => {\n        if (video.readyState >= 2) {\n          console.log('🔄 재시도로 캡처 진행');\n          handleCapture();\n        } else {\n          showError('카메라가 아직 준비되지 않았습니다. 잠시 후 다시 시도해주세요.');\n        }\n      }, 500);\n      return;\n    }\n\n    const context = canvas.getContext('2d');\n    \n    // 캔버스 크기를 비디오와 동일하게 설정\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    \n    console.log('캔버스 크기:', canvas.width, 'x', canvas.height);\n    console.log('비디오 크기:', video.videoWidth, 'x', video.videoHeight);\n    \n    // 비디오 프레임을 캔버스에 그리기\n    try {\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      console.log('비디오 프레임 캔버스에 그리기 성공');\n      \n      // 캔버스를 Blob으로 변환\n      canvas.toBlob((blob) => {\n        if (blob) {\n          console.log('Blob 생성 성공, 크기:', blob.size);\n          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n          const file = new File([blob], `camera-photo-${timestamp}.jpg`, { type: 'image/jpeg' });\n          setImageFile(file);\n          \n          // 미리보기용 URL 생성\n          const imageUrl = URL.createObjectURL(blob);\n          setImage(imageUrl);\n          \n          // 카메라 스트림 정리\n          handleCameraClose();\n          showSuccess('사진이 캡처되었습니다!');\n        } else {\n          console.error('Blob 생성 실패');\n          showError('사진 캡처에 실패했습니다.');\n        }\n      }, 'image/jpeg', 0.9);\n    } catch (error) {\n      console.error('캔버스 그리기 오류:', error);\n      showError('사진 캡처 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 카메라 닫기\n  const handleCameraClose = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    setIsCameraOpen(false);\n  };\n\n  // 스트림이 설정되면 비디오 요소에 연결\n  React.useEffect(() => {\n    if (stream && videoRef.current && isCameraOpen) {\n      console.log('🔍 useEffect에서 비디오 스트림 연결 시작');\n      console.log('🔍 비디오 요소 존재:', !!videoRef.current);\n      console.log('🔍 비디오 요소 크기:', videoRef.current.clientWidth, 'x', videoRef.current.clientHeight);\n      \n      videoRef.current.srcObject = stream;\n      console.log('🔍 스트림 할당 완료, srcObject:', videoRef.current.srcObject);\n      \n      // 즉시 재생 시도\n      const attemptPlay = async () => {\n        try {\n          console.log('🔍 즉시 재생 시도');\n          await videoRef.current.play();\n          console.log('🔍 즉시 재생 성공');\n        } catch (err) {\n          console.log('🔍 즉시 재생 실패, 메타데이터 로드 대기:', err.message);\n        }\n      };\n      \n      attemptPlay();\n      \n      // 메타데이터 로드 후 재생 시작\n      videoRef.current.onloadedmetadata = () => {\n        console.log('🔍 비디오 메타데이터 로드 완료');\n        console.log('🔍 비디오 크기:', videoRef.current.videoWidth, 'x', videoRef.current.videoHeight);\n        console.log('🔍 비디오 readyState:', videoRef.current.readyState);\n        \n        if (videoRef.current.paused) {\n          videoRef.current.play().then(() => {\n            console.log('🔍 메타데이터 로드 후 비디오 재생 시작');\n            console.log('🔍 비디오 paused:', videoRef.current.paused);\n            console.log('🔍 비디오 muted:', videoRef.current.muted);\n          }).catch(err => {\n            console.error('🔍 비디오 재생 오류:', err);\n            showError('비디오 재생에 실패했습니다.');\n          });\n        }\n      };\n      \n      // loadstart 이벤트도 추가\n      videoRef.current.onloadstart = () => {\n        console.log('🔍 비디오 로드 시작 (loadstart)');\n      };\n      \n      // 추가 이벤트 리스너들\n      videoRef.current.oncanplay = () => {\n        console.log('🔍 비디오 재생 준비 완료 (canplay)');\n      };\n      \n      videoRef.current.onplaying = () => {\n        console.log('🔍 비디오 재생 중 (playing)');\n      };\n    }\n  }, [stream, isCameraOpen]);\n\n  // 컴포넌트 언마운트 시 스트림 정리\n  React.useEffect(() => {\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [stream]);\n\n  // 사진 선택\n  const handleSelectPhoto = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.removeAttribute('capture');\n      fileInputRef.current.click();\n    }\n  };\n\n  // 건너뛰기\n  const handleSkip = () => {\n    navigate(\"/onboarding-info/4\");\n  };\n\n  // 사진 저장 후 다음 단계로 이동\n  const handleNext = async () => {\n    if (!imageFile) {\n      showError(\"이미지 파일을 선택해주세요.\");\n      return;\n    }\n\n    try {\n      console.log('📤 프로필 이미지 업로드 시작, 파일 정보:', {\n        name: imageFile.name,\n        size: imageFile.size,\n        type: imageFile.type\n      });\n\n      // FormData를 사용하여 파일 업로드\n      const formData = new FormData();\n      formData.append('file', imageFile);\n\n      const response = await api.post(\"/user/profile-image\", formData);\n      \n      console.log('📥 서버 응답:', response.data);\n      \n      // 서버에서 반환된 URL 사용\n      const profileImageUrl = \n      response?.data?.data?.url ??\n      response?.data?.url ??\n      response?.url;\n      \n      if (profileImageUrl) {\n        // 로컬 스토어 업데이트 (서버에서 받은 URL 사용)\n        setProfileImage(profileImageUrl);\n        console.log('✅ 프로필 이미지 업로드 및 로컬 저장 성공:', profileImageUrl);\n        \n        showSuccess(\"사진이 저장되었습니다. 다음 단계로 이동합니다.\");\n        navigate(\"/onboarding-info/4\");\n      } else {\n        console.error('❌ 서버 응답에서 이미지 URL을 찾을 수 없음:', response.data);\n        showError(\"이미지 업로드는 성공했지만 URL을 받지 못했습니다.\");\n      }\n    } catch (e) {\n      console.error('❌ 프로필 이미지 업로드 실패:', e);\n      showError(\"프로필 이미지 저장에 실패했습니다: \" + (e.response?.data?.message || e.message));\n    }\n  };\n\n  return (\n    <div className=\"bg-[#FFFFFF] h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      <ProgressBar total={5} value={3} className=\"mt-[19px]\" />\n      <div className=\"mx-auto mt-[19px] max-w-[720px] w-full\">\n        <h1 className=\"text-[32px] font-bold leading-[42px] text-[#111111]\">\n          프로필 사진을 업로드 해주세요.\n        </h1>\n        <p className=\"text-[16px] font-medium text-[#343a40] mt-[24px]\">\n          (선택) 얼굴이 보이는 사진을 올리면 첫 만남이 더 편해집니다.\n        </p>\n      </div>\n      <div className=\"mx-auto mt-[70px] max-w-[720px] w-full flex flex-col items-center\">\n        <div className=\"relative w-[300px] h-[300px] mb-[114px]\">   \n          <div className=\"w-full h-full rounded-full bg-[#e7e7e7] flex items-center justify-center overflow-hidden cursor-pointer\" onClick={handleSelectPhoto}>\n            {image ? (\n              <img src={image} alt=\"프로필 미리보기\" className=\"object-cover w-full h-full\" />\n            ) : (\n                <div>\n                    <div className=\"bg-[url('/assets/photo.png')] bg-contain bg-center bg-no-repeat w-[38px] h-[30px] mx-auto\" ></div>\n                    <div className=\"text-[#343A40] text-[15px] font-regular leading-[24px] mt-[12px]\">사진 선택</div>\n                </div>\n            )}\n          </div>\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            ref={fileInputRef}\n            className=\"hidden\"\n            onChange={handleFileChange}\n          />\n        </div>\n        <div className=\"flex flex-col gap-[32px] w-full mt-8\">\n\n          <div className=\"flex items-center w-full my-2\">\n            <div className=\"flex-1 h-px bg-[#e8e8e8]\" />\n            <span className=\"mx-2 text-[#343a40] text-[16px] font-medium\">or</span>\n            <div className=\"flex-1 h-px bg-[#e8e8e8]\" />\n          </div>\n          <CommonButton\n            text=\"카메라로 사진 찍기\"\n            variant=\"success\"\n            onClick={handleCameraClick}\n          />\n          <CommonButton\n            text={image ? \"다음\" : \"건너뛰기\"}\n            variant={image ? \"primary\" : \"secondary\"}\n            onClick={image ? handleNext : handleSkip}\n          />\n        </div>\n      </div>\n\n      {/* 카메라 모달 */}\n      {isCameraOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 overlay-solid\">\n          <div className=\"bg-white rounded-[20px] w-full max-w-md mx-4 shadow-xl overflow-hidden\">\n            {/* 헤더 */}\n            <div className=\"flex items-center justify-between p-4 border-b border-[#E7E7E7]\">\n              <h3 className=\"text-[18px] font-bold text-[#111111]\">사진 촬영</h3>\n              <button\n                onClick={handleCameraClose}\n                className=\"p-2 hover:bg-[#F1F3F5] rounded-lg transition-colors\"\n              >\n                <svg className=\"w-5 h-5 text-[#929292]\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n\n            {/* 카메라 뷰 */}\n            <div className=\"relative\">\n              <video\n                ref={videoRef}\n                autoPlay\n                playsInline\n                muted\n                style={{ width: '100%', height: '256px', objectFit: 'cover', backgroundColor: 'black' }}\n                className=\"w-full h-64 object-cover bg-black\"\n              />\n              <canvas ref={canvasRef} className=\"hidden\" />\n            </div>\n\n            {/* 촬영 버튼 */}\n            <div className=\"p-4\">\n              <div className=\"flex justify-center space-x-4\">\n                <CommonButton\n                  text=\"취소\"\n                  variant=\"secondary\"\n                  onClick={handleCameraClose}\n                  className=\"flex-1\"\n                />\n                <CommonButton\n                  text=\"촬영\"\n                  variant=\"primary\"\n                  onClick={handleCapture}\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInfo/ObInfo4.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInfo/ObInfoComplete.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInfo/ObInfoRouter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInt/ObInt1.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInt/ObInt2.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInt/ObInt3.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInt/ObInt4.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInt/ObIntComplete.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObInt/ObIntRouter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObLang/ObLang1.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'saveOnboardingStep2' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"saveOnboardingStep2"},"fix":{"range":[417,476],"text":""},"desc":"Remove unused variable 'saveOnboardingStep2'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport Header from \"../../components/Header\";\nimport ProgressBar from \"../../components/PrograssBar\";\nimport CommonButton from \"../../components/CommonButton\";\nimport Select from \"react-select\";\nimport useLangInfoStore from \"../../store/langInfoStore\";\nimport { useNavigate } from \"react-router-dom\";\nimport commonSelectStyles from \"../../components/SelectStyles\";\nimport { saveOnboardingStep2 } from \"../../api/onboarding\";\nimport { saveLanguageInfo } from \"../../api/onboarding\";\n\nimport api from \"../../api\";\n\nexport default function ObLang1() {\n  // 언어 옵션 상태\n  const [languageOptions, setLanguageOptions] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const setNativeLanguage = useLangInfoStore((state) => state.setNativeLanguage); // zustand에 저장\n  const navigate = useNavigate();\n\n  // 언어 리스트 불러오기 (API)\n  useEffect(() => {\n    api.get(\"/onboarding/language/languages\")\n      .then(res => {\n        console.log(\"🔍 언어 API 응답:\", res.data);\n        // [{ id, name }, ...] 또는 [{ languageId, languageName }, ...] -> [{ value, label }, ...]\n        const options = (res.data || []).map(lang => ({\n          value: lang.id ?? lang.languageId,\n          label: lang.name ?? lang.languageName\n        }));\n        console.log(\"🔍 변환된 언어 옵션:\", options);\n        setLanguageOptions(options);\n      })\n      .catch(err => {\n        alert(\"언어 리스트를 불러오지 못했습니다.\");\n        console.error(err);\n      });\n  }, []);\n\n  const isButtonEnabled = !!selected;\n\n  const handleNext = async () => {\n    console.log(\"🔍 [ObLang1] handleNext 호출됨\");\n    console.log(\"🔍 선택된 언어:\", selected);\n    console.log(\"🔍 selected.value:\", selected?.value);\n    console.log(\"🔍 selected.value 타입:\", typeof selected?.value);\n\n    // 🔍 추가 디버깅 로그\n    console.log(\"🔍 LocalStorage 토큰 확인:\");\n    console.log(\"🔍 - accessToken:\", localStorage.getItem(\"accessToken\") ? \"존재\" : \"없음\");\n    console.log(\"🔍 - refreshToken:\", localStorage.getItem(\"refreshToken\") ? \"존재\" : \"없음\");\n\n    if (!selected || !selected.value || selected.value <= 0) {\n      alert(\"유효한 언어를 선택해주세요.\");\n      return;\n    }\n\n    try {\n      console.log(\"🔍 saveLanguageInfo 호출 시작 - nativeLanguageId:\", selected.value);\n      const result = await saveLanguageInfo({\n        nativeLanguageId: selected.value,\n      });\n      console.log(\"🔍 saveLanguageInfo 응답:\", result);\n      console.log(\"🔍 saveLanguageInfo 성공\");\n\n      // zustand에 언어 ID와 라벨 모두 저장 (서버 호출 없이)\n      if (typeof setNativeLanguage === \"function\") {\n        setNativeLanguage({\n          id: selected.value,\n          name: selected.label\n        });\n      } else {\n        console.warn(\"setNativeLanguage가 함수가 아니라 직접 상태를 설정합니다.\", setNativeLanguage);\n        useLangInfoStore.setState({\n          nativeLanguage: {\n            id: selected.value,\n            name: selected.label\n          }\n        });\n      }\n\n      console.log(\"🔍 페이지 이동 시도: /onboarding-lang/2\");\n      navigate(\"/onboarding-lang/2\"); // 다음 단계로 이동 (라우팅 구조에 맞게 수정)\n    } catch (e) {\n      console.log(\"🔍 ❌ saveLanguageInfo 실패:\", e);\n      console.log(\"🔍 ❌ Error response:\", e.response);\n      console.log(\"🔍 ❌ Error status:\", e.response?.status);\n      console.log(\"🔍 ❌ Error data:\", e.response?.data);\n      console.error(\"🔍 모국어 저장 실패:\", e);\n\n      // 더 자세한 에러 메시지 표시\n      let errorMessage = \"모국어 저장에 실패했습니다.\";\n      if (e.response) {\n        if (e.response.status === 401) {\n          errorMessage = \"로그인이 필요합니다. 다시 로그인해주세요.\";\n        } else if (e.response.status === 403) {\n          errorMessage = \"권한이 없습니다. 다시 로그인해주세요.\";\n        } else if (e.response.status === 400) {\n          errorMessage = e.response.data?.message || \"잘못된 요청입니다.\";\n        } else if (e.response.status === 500) {\n          errorMessage = \"서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\";\n        }\n      } else if (e.request) {\n        errorMessage = \"서버에 연결할 수 없습니다. 네트워크를 확인해주세요.\";\n      }\n\n      alert(errorMessage);\n    }\n  };\n     \n  return (\n    <div className=\"bg-[#FFFFFF] h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      <ProgressBar total={4} value={1} className=\"mt-[19px]\" />\n      <div className=\"mx-auto mt-[19px] max-w-[720px] w-full\">\n        <h1 className=\"text-[32px] font-bold leading-[42px] text-[#111111]\">\n          모국어를 선택해주세요.\n        </h1>\n      </div>\n      <div className=\"mx-auto mt-[32px] max-w-[720px] w-full\">\n        <label className=\"block text-[16px] font-medium leading-[24px] text-[#343a40] mb-[8px]\">\n          모국어 선택\n        </label>\n        <Select\n          options={languageOptions}\n          value={selected}\n          onChange={setSelected}\n          placeholder=\"모국어를 선택해주세요\"\n          className=\"mb-[576px]\"\n          styles={commonSelectStyles}\n          isSearchable={false}\n        />\n        <CommonButton text=\"다음\" disabled={!isButtonEnabled} onClick={handleNext} />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObLang/ObLang2.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'showError'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [showError]","fix":{"range":[1941,1943],"text":"[showError]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport Header from \"../../components/Header\";\nimport ProgressBar from \"../../components/PrograssBar\";\nimport CommonButton from \"../../components/CommonButton\";\nimport Select from \"react-select\";\nimport { useNavigate } from \"react-router-dom\";\nimport commonSelectStyles from \"../../components/SelectStyles\";\nimport useLangInfoStore from \"../../store/langInfoStore\";\nimport api from \"../../api\";\nimport { useAlert } from \"../../hooks/useAlert.jsx\";\n\nexport default function ObLang2() {\n  const navigate = useNavigate();\n  const { showError } = useAlert();\n  const setOtherLanguages = useLangInfoStore((state) => state.setOtherLanguages);\n  const [pairs, setPairs] = useState([{ language: null, level: null }]);\n  const [languageOptions, setLanguageOptions] = useState([]);\n  const [levelOptions, setLevelOptions] = useState([]);\n  const [loadingLang, setLoadingLang] = useState(true);\n  const [loadingLevel, setLoadingLevel] = useState(true);\n\n  useEffect(() => {\n    setLoadingLang(true);\n    api.get(\"/onboarding/language/languages\")\n      .then(res => {\n        const options = (res.data || []).map(lang => ({\n          value: lang.id ?? lang.languageId,\n          label: lang.name ?? lang.languageName\n        }));\n        setLanguageOptions(options);\n        setLoadingLang(false);\n      })\n      .catch(err => {\n        showError(\"언어 리스트를 불러오지 못했습니다.\");\n        setLoadingLang(false);\n        console.error(err);\n      });\n    setLoadingLevel(true);\n    api.get(\"/onboarding/language/level-types-language\")\n      .then(res => {\n        const options = (res.data || []).map(level => ({\n          value: level.langLevelId,\n          label: level.LangLevelName\n        }));\n        setLevelOptions(options);\n        setLoadingLevel(false);\n      })\n      .catch(err => {\n        showError(\"레벨 리스트를 불러오지 못했습니다.\");\n        setLoadingLevel(false);\n        console.error(err);\n      });\n  }, []);\n\n  const validPairs = pairs.filter((p) => p.language && p.level);\n  const isButtonEnabled = validPairs.length > 0;\n\n  const handleChange = (idx, field, value) => {\n    const newPairs = pairs.map((p, i) =>\n      i === idx ? { ...p, [field]: value } : p\n    );\n    if (\n      idx === pairs.length - 1 &&\n      field === \"level\" &&\n      value &&\n      newPairs[idx].language\n    ) {\n      newPairs.push({ language: null, level: null });\n    }\n    setPairs(newPairs);\n  };\n\n  const handleNext = async () => {\n    // API 호출을 위한 데이터 준비\n    const requestData = {\n      languages: validPairs.map(pair => ({\n        languageId: pair.language.value,\n        currentLevelId: pair.level.value,\n        targetLevelId: pair.level.value // 현재 레벨과 동일하게 설정\n      }))\n    };\n\n    console.log(\"🔍 [ObLang2] API 요청 데이터:\", requestData);\n    console.log(\"🔍 [ObLang2] 유효한 페어:\", validPairs);\n\n    try {\n      console.log(\"🔍 [ObLang2] 언어 레벨 API 호출 시작\");\n      const response = await api.post(\"/onboarding/language/language-level\", requestData);\n      console.log(\"🔍 [ObLang2] API 응답 성공:\", response.data);\n\n      // 로컬 상태만 업데이트 (서버 호출 없이)\n      setOtherLanguages(validPairs.map(pair => ({\n        id: pair.language.value,\n        name: pair.language.label,\n        level: pair.level.label\n      })));\n\n      navigate(\"/onboarding-lang/3\");\n    } catch (error) {\n      console.error(\"🔍 [ObLang2] ❌ 언어 레벨 데이터 전송 실패:\", error);\n      console.error(\"🔍 [ObLang2] Error status:\", error.response?.status);\n      console.error(\"🔍 [ObLang2] Error data:\", error.response?.data);\n      console.error(\"🔍 [ObLang2] Request config:\", error.config);\n\n      let errorMessage = \"데이터 전송에 실패했습니다. 다시 시도해주세요.\";\n      if (error.response?.status === 400) {\n        const serverError = error.response?.data;\n        if (serverError?.message) {\n          errorMessage = `입력 오류: ${serverError.message}`;\n        } else {\n          errorMessage = \"입력한 데이터를 확인해주세요. (400 Bad Request)\";\n        }\n      } else if (error.response?.status === 401) {\n        errorMessage = \"로그인이 필요합니다.\";\n      } else if (error.response?.status === 403) {\n        errorMessage = \"권한이 없습니다.\";\n      } else if (error.response?.status >= 500) {\n        errorMessage = \"서버 오류입니다. 잠시 후 다시 시도해주세요.\";\n      }\n\n      showError(errorMessage);\n    }\n  };\n\n  return (\n    <div className=\"relative bg-[#FFFFFF] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      <ProgressBar total={5} value={2} className=\"mt-[19px]\" />\n      <div className=\"mx-auto mt-[19px] max-w-[720px] w-full\">\n        <h1 className=\"text-[32px] font-bold leading-[42px] text-[#111111]\">\n          모국어 외에 할 줄 아는 언어와 레벨을 선택해 주세요.\n        </h1>\n      </div>\n      <div className=\"mx-auto mt-[32px] max-w-[720px] w-full flex flex-col gap-4 min-h-[620px] pb-[80px]\">\n        <div className=\"flex gap-4\">\n          <label className=\"block text-[16px] font-medium leading-[24px] text-[#343a40] mb-[8px] w-[300px]\">\n            사용하는 언어 (복수 선택 가능)\n          </label>\n          <label className=\"block text-[16px] font-medium leading-[24px] text-[#343a40] mb-[8px] w-[400px]\">\n            레벨\n          </label>\n        </div>\n        {pairs.map((pair, idx) => (\n          <div key={idx} className=\"flex gap-4 items-end\">\n            <div className=\"w-[300px]\">\n              <Select\n                options={languageOptions}\n                value={pair.language}\n                onChange={(val) => handleChange(idx, \"language\", val)}\n                placeholder={loadingLang ? \"로딩 중...\" : \"언어를 선택해주세요\"}\n                styles={commonSelectStyles}\n                isMulti={false}\n                isDisabled={loadingLang}\n              />\n            </div>\n            <div className=\"w-[400px]\">\n              <Select\n                options={levelOptions}\n                value={pair.level}\n                onChange={(val) => handleChange(idx, \"level\", val)}\n                placeholder={loadingLevel ? \"로딩 중...\" : \"현재 본인의 레벨을 선택해 주세요\"}\n                styles={commonSelectStyles}\n                isMulti={false}\n                isDisabled={loadingLevel || !pair.language}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className=\"mx-auto max-w-[720px] w-full mt-10\">\n        <CommonButton text=\"다음\" disabled={!isButtonEnabled} onClick={handleNext} />\n      </div>\n    </div>\n  );\n} \n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObLang/ObLang3.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObLang/ObLangComplete.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'wantedLanguages' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":9,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"wantedLanguages"},"fix":{"range":[339,414],"text":""},"desc":"Remove unused variable 'wantedLanguages'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useLangInfoStore from \"../../store/langInfoStore\";\nimport CompleteOnboarding from \"../../components/CompleteOnboarding\";\nimport useProfileStore from \"../../store/profileStore\";\n\nexport default function ObLangComplete() {\n  const navigate = useNavigate();\n  const wantedLanguages = useLangInfoStore((state) => state.wantedLanguages);\n  const userName = useProfileStore((state) => state.name) || \"회원\";\n\n  return (\n    <CompleteOnboarding\n      userName={userName}\n      onboarding=\"언어 설정\"\n      subText=\"두 번째 단계\"\n      step={2}\n      totalSteps={5}\n      onNext={() => navigate(\"/onboarding-int/1\")}\n    />\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObLang/ObLangRouter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObPartner/ObPartner1.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObPartner/ObPartner2.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObPartner/ObPartnerComplete.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObPartner/ObPartnerRouter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObSchadule/ObSchadule1.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'showError'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [showError]","fix":{"range":[1185,1187],"text":"[showError]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport Header from \"../../components/Header\";\nimport ProgressBar from \"../../components/PrograssBar\";\nimport CommonChecklistItem from \"../../components/CommonChecklist\";\nimport CommonButton from \"../../components/CommonButton\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../../api\";\nimport { useAlert } from \"../../hooks/useAlert\";\n\nexport default function ObSchadule1() {\n  const { showError } = useAlert();\n  const [selected, setSelected] = useState(null); // 단일 선택으로 변경\n  const [communicationMethods, setCommunicationMethods] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchCommunicationMethods = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get(\"/onboarding/schedule/communication-methods\");\n        setCommunicationMethods(response.data || []);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"소통 방식 데이터를 불러오지 못했습니다:\", error);\n        showError(\"소통 방식 데이터를 불러오지 못했습니다.\");\n        setLoading(false);\n      }\n    };\n\n    fetchCommunicationMethods();\n  }, []);\n\n  const handleSelect = (name) => {\n    setSelected(name);\n  };\n\n  const handleNext = async () => {\n    if (!selected) return;\n\n    const requestData = {\n      communicationMethodType: selected\n    };\n\n    try {\n      await api.post(\"/onboarding/schedule/communication-method\", requestData);\n      console.log(\"소통 방식 데이터 전송 성공\");\n      navigate(\"/onboarding-schedule/2\");\n    } catch (error) {\n      console.error(\"소통 방식 데이터 전송 실패:\", error);\n      showError(\"데이터 전송에 실패했습니다. 다시 시도해주세요.\");\n    }\n  };\n\n  return (\n    <div className=\"bg-[#FFFFFF] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      <ProgressBar total={5} value={1} className=\"mt-[19px]\" />\n      <div className=\"max-w-[720px] w-full mx-auto mt-[19px]\">\n        <h1 className=\"text-[32px] font-bold leading-[42px] text-[#111111] mb-[24px]\">\n          선호하는 소통 방식을 선택해 주세요.\n        </h1>\n        <div className=\"mb-[12px] text-[16px] font-medium text-[#343a40] leading-[24px]\">\n          소통 방식\n        </div>\n        {loading ? (\n          <div className=\"flex justify-center items-center py-8\">\n            <div className=\"text-[16px] text-[#6c757d]\">로딩 중...</div>\n          </div>\n        ) : (\n          <div className=\"flex flex-col gap-[12px]\">\n            {communicationMethods.map((item) => (\n              <CommonChecklistItem\n                key={item.name}\n                label={item.description}\n                checked={selected === item.name}\n                onChange={() => handleSelect(item.name)}\n                type=\"radio\"\n              />\n            ))}\n          </div>\n        )}\n        <CommonButton\n          text=\"다음\"\n          className=\"w-full mt-[440px]\"\n          disabled={!selected || loading}\n          onClick={handleNext}\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObSchadule/ObSchadule2.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObSchadule/ObSchadule3.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObSchadule/ObSchadule4.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[24,35],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":15,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setLoading"},"fix":{"range":[644,656],"text":""},"desc":"Remove unused variable 'setLoading'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":143,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"state"},"fix":{"range":[4576,4583],"text":""},"desc":"Remove unused variable 'state'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport Header from \"../../components/Header\";\nimport ProgressBar from \"../../components/PrograssBar\";\nimport CommonButton from \"../../components/CommonButton\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../../api\";\nimport Select from \"react-select\";\nimport commonSelectStyles from \"../../components/SelectStyles\";\nimport { useAlert } from \"../../hooks/useAlert\";\n\nexport default function ObSchadule4() {\n  const { showError } = useAlert();\n  const [selectedDays, setSelectedDays] = useState([]);\n  const [selectedTimes, setSelectedTimes] = useState({});\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const weekdays = [\n    { id: \"MONDAY\", name: \"월\" },\n    { id: \"TUESDAY\", name: \"화\" },\n    { id: \"WEDNESDAY\", name: \"수\" },\n    { id: \"THURSDAY\", name: \"목\" },\n    { id: \"FRIDAY\", name: \"금\" },\n    { id: \"SATURDAY\", name: \"토\" },\n    { id: \"SUNDAY\", name: \"일\" }\n  ];\n\n  // 30분 단위 시간 옵션 생성\n  const timeOptions = [\n    { value: \"00:00\", label: \"00:00\" },\n    { value: \"00:30\", label: \"00:30\" },\n    { value: \"01:00\", label: \"01:00\" },\n    { value: \"01:30\", label: \"01:30\" },\n    { value: \"02:00\", label: \"02:00\" },\n    { value: \"02:30\", label: \"02:30\" },\n    { value: \"03:00\", label: \"03:00\" },\n    { value: \"03:30\", label: \"03:30\" },\n    { value: \"04:00\", label: \"04:00\" },\n    { value: \"04:30\", label: \"04:30\" },\n    { value: \"05:00\", label: \"05:00\" },\n    { value: \"05:30\", label: \"05:30\" },\n    { value: \"06:00\", label: \"06:00\" },\n    { value: \"06:30\", label: \"06:30\" },\n    { value: \"07:00\", label: \"07:00\" },\n    { value: \"07:30\", label: \"07:30\" },\n    { value: \"08:00\", label: \"08:00\" },\n    { value: \"08:30\", label: \"08:30\" },\n    { value: \"09:00\", label: \"09:00\" },\n    { value: \"09:30\", label: \"09:30\" },\n    { value: \"10:00\", label: \"10:00\" },\n    { value: \"10:30\", label: \"10:30\" },\n    { value: \"11:00\", label: \"11:00\" },\n    { value: \"11:30\", label: \"11:30\" },\n    { value: \"12:00\", label: \"12:00\" },\n    { value: \"12:30\", label: \"12:30\" },\n    { value: \"13:00\", label: \"13:00\" },\n    { value: \"13:30\", label: \"13:30\" },\n    { value: \"14:00\", label: \"14:00\" },\n    { value: \"14:30\", label: \"14:30\" },\n    { value: \"15:00\", label: \"15:00\" },\n    { value: \"15:30\", label: \"15:30\" },\n    { value: \"16:00\", label: \"16:00\" },\n    { value: \"16:30\", label: \"16:30\" },\n    { value: \"17:00\", label: \"17:00\" },\n    { value: \"17:30\", label: \"17:30\" },\n    { value: \"18:00\", label: \"18:00\" },\n    { value: \"18:30\", label: \"18:30\" },\n    { value: \"19:00\", label: \"19:00\" },\n    { value: \"19:30\", label: \"19:30\" },\n    { value: \"20:00\", label: \"20:00\" },\n    { value: \"20:30\", label: \"20:30\" },\n    { value: \"21:00\", label: \"21:00\" },\n    { value: \"21:30\", label: \"21:30\" },\n    { value: \"22:00\", label: \"22:00\" },\n    { value: \"22:30\", label: \"22:30\" },\n    { value: \"23:00\", label: \"23:00\" },\n    { value: \"23:30\", label: \"23:30\" }\n  ];\n\n  const handleDaySelect = (dayId) => {\n    setSelectedDays(prev => {\n      if (prev.includes(dayId)) {\n        // 요일 해제 시 해당 요일의 시간도 제거\n        const newSelectedTimes = { ...selectedTimes };\n        delete newSelectedTimes[dayId];\n        setSelectedTimes(newSelectedTimes);\n        return prev.filter(id => id !== dayId);\n      } else {\n        return [...prev, dayId];\n      }\n    });\n  };\n\n  const handleTimeSelect = (dayId, time) => {\n    setSelectedTimes(prev => ({\n      ...prev,\n      [dayId]: time\n    }));\n  };\n\n  const handleNext = async () => {\n    if (selectedDays.length === 0) {\n      showError(\"최소 하나의 요일을 선택해주세요.\");\n      return;\n    }\n\n    // 모든 선택된 요일에 시간이 설정되었는지 확인\n    const hasAllTimes = selectedDays.every(day => selectedTimes[day]);\n    if (!hasAllTimes) {\n      showError(\"선택된 모든 요일에 시간을 설정해주세요.\");\n      return;\n    }\n\n    try {\n      const requestData = {\n        schedules: selectedDays.map(dayId => ({\n          dayOfWeek: dayId,\n          classTime: selectedTimes[dayId]\n        }))\n      };\n\n      await api.post(\"/onboarding/schedule\", requestData);\n      console.log(\"스케줄 선택 데이터 전송 성공\");\n      navigate(\"/onboarding-schedule/complete\");\n    } catch (error) {\n      console.error(\"스케줄 선택 데이터 전송 실패:\", error);\n      showError(\"데이터 전송에 실패했습니다. 다시 시도해주세요.\");\n    }\n  };\n\n  const getDayStyle = (dayId) => {\n    const isSelected = selectedDays.includes(dayId);\n    \n    return {\n      backgroundColor: isSelected ? \"#e6f9f1\" : \"#ffffff\",\n      fontWeight: isSelected ? \"700\" : \"500\"\n    };\n  };\n\n  // 시간 선택 드롭박스용 스타일 (border 제거)\n  const timeSelectStyles = {\n    ...commonSelectStyles,\n    control: (base, state) => ({\n      ...base,\n      minHeight: 40,\n      minWidth: 110,\n      width: 110,\n      borderRadius: 6,\n      border: \"none\",\n      boxShadow: \"none\",\n      paddingLeft: 8,\n      paddingRight: 0,\n      fontSize: 16,\n      fontWeight: 500,\n      \"&:hover\": {\n        border: \"none\",\n      },\n    }),\n    dropdownIndicator: (base) => ({\n      ...base,\n      color: \"#212529\",\n      paddingRight: 8,\n    }),\n  };\n\n  return (\n    <div className=\"bg-[#FFFFFF] min-h-screen max-w-[768px] w-full mx-auto\">\n      <Header />\n      <ProgressBar total={5} value={4} className=\"mt-[19px]\" />\n      <div className=\"max-w-[720px] w-full mx-auto mt-[19px]\">\n        <h1 className=\"text-[32px] font-bold leading-[42px] text-[#111111] mb-[24px]\">\n          원하는 수업 요일과 시간을 모두 선택해 주세요.\n        </h1>\n        <div className=\"mb-[12px] text-[16px] font-medium text-[#343a40] leading-[24px]\">\n          수업 요일 & 시간 (복수 선택 가능)\n        </div>\n        \n                 {/* 요일 선택 */}\n         <div className=\"bg-white rounded-xl border border-gray-200 p-4 mb-6 shadow-lg\">\n           <div className=\"flex gap-2\">\n             {weekdays.map((day) => (\n               <button\n                 key={day.id}\n                 onClick={() => handleDaySelect(day.id)}\n                 className=\"flex-1 h-10 rounded-full transition-all duration-200 flex items-center justify-center text-[16px] font-medium cursor-pointer\"\n                 style={getDayStyle(day.id)}\n               >\n                 {day.name}\n               </button>\n             ))}\n           </div>\n         </div>\n\n                                       {/* 선택된 요일들의 시간 선택 */}\n           {selectedDays.length > 0 && (\n             <div className=\"w-[292px] mx-auto bg-white rounded-lg border border-gray-200 shadow-lg \">\n               {weekdays\n                 .filter(day => selectedDays.includes(day.id))\n                 .map((day, index, filteredDays) => {\n                   return (\n                     <div key={day.id} className={`pl-[11px] py-[2px] ${index !== filteredDays.length - 1 ? '' : ''}`}>\n                       <div className=\"flex items-center justify-between\">\n                         <span className=\"text-[16px] font-medium text-[#111111]\">\n                           {day.name}요일\n                         </span>\n                                                    <div className=\"flex items-center gap-2\">\n                             <div className=\"w-[110px]\">\n                                                               <Select\n                                  options={timeOptions}\n                                  value={timeOptions.find(option => option.value === selectedTimes[day.id])}\n                                  onChange={(selectedOption) => handleTimeSelect(day.id, selectedOption?.value || \"\")}\n                                  styles={timeSelectStyles}\n                                  isSearchable={false}\n                                  placeholder=\"시간\"\n                                />\n                             </div>\n                           </div>\n                       </div>\n                     </div>\n                   );\n                 })}\n             </div>\n           )}\n        \n        <CommonButton\n          text=\"다음\"\n          className=\"w-full mt-[304px]\"\n          disabled={loading || selectedDays.length === 0 || !selectedDays.every(day => selectedTimes[day])}\n          onClick={handleNext}\n        />\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObSchadule/ObSchaduleComplete.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/ObSchadule/ObSchaduleRouter.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Profile/ProfilePage.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Profile/ProfileTestPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'loadProfileFromServer' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":33,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"loadProfileFromServer"},"fix":{"range":[1217,1245],"text":""},"desc":"Remove unused variable 'loadProfileFromServer'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { ArrowLeft } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\n\n// 개발한 컴포넌트들 import\nimport ProfileImageUpload from '../../components/ProfileImageUpload';\nimport ProfileEditor from '../../components/ProfileEditor';\nimport ProfileCard from '../../components/ProfileCard';\nimport ChatImageUpload from '../../components/ChatImageUpload';\nimport AudioUpload from '../../components/AudioUpload';\nimport FileManager from '../../components/FileManager';\nimport ProfileSearch from '../../components/ProfileSearch';\nimport { useImageUpload, useAudioUpload } from '../../hooks/useFileUpload';\n\n// 프로필 스토어 사용\nimport useProfileStore from '../../store/profileStore';\n\nexport default function ProfileTestPage() {\n  const navigate = useNavigate();\n  const [activeDemo, setActiveDemo] = useState('profile-card');\n  const [isProfileImageUploadOpen, setIsProfileImageUploadOpen] = useState(false);\n  const [isProfileEditorOpen, setIsProfileEditorOpen] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n\n  // 프로필 스토어에서 데이터 가져오기\n  const profile = useProfileStore();\n  const { \n    englishName, \n    name, \n    residence, \n    profileImage, \n    intro, \n    loadProfileFromServer \n  } = profile;\n\n  // 파일 업로드 훅 테스트\n  const imageUpload = useImageUpload({\n    onSuccess: (data) => {\n      console.log('이미지 업로드 성공:', data);\n      setUploadedFiles(prev => [...prev, { \n        ...data, \n        name: 'uploaded-image.jpg',\n        uploadedAt: new Date().toISOString()\n      }]);\n    }\n  });\n\n  const audioUpload = useAudioUpload({\n    onSuccess: (data) => {\n      console.log('오디오 업로드 성공:', data);\n      setUploadedFiles(prev => [...prev, { \n        ...data, \n        name: 'uploaded-audio.mp3',\n        uploadedAt: new Date().toISOString()\n      }]);\n    }\n  });\n\n  // 데모 컴포넌트 목록\n  const demos = [\n    {\n      id: 'profile-card',\n      title: '프로필 카드',\n      description: '사용자 프로필을 표시하는 카드 컴포넌트'\n    },\n    {\n      id: 'profile-editor',\n      title: '프로필 편집기',\n      description: '프로필 정보를 편집할 수 있는 모달'\n    },\n    {\n      id: 'image-upload',\n      title: '프로필 이미지 업로드',\n      description: 'Workers API를 사용한 이미지 업로드'\n    },\n    {\n      id: 'chat-image-upload',\n      title: '채팅 이미지 업로드',\n      description: '채팅용 이미지 업로드 컴포넌트'\n    },\n    {\n      id: 'audio-upload',\n      title: '오디오 업로드',\n      description: '레벨테스트용 오디오 파일 업로드'\n    },\n    {\n      id: 'file-manager',\n      title: '파일 관리자',\n      description: '업로드된 파일을 관리하는 컴포넌트'\n    },\n    {\n      id: 'profile-search',\n      title: '프로필 검색',\n      description: '다른 사용자를 검색하는 기능'\n    },\n    {\n      id: 'upload-hooks',\n      title: '업로드 훅 테스트',\n      description: '파일 업로드 커스텀 훅 테스트'\n    }\n  ];\n\n  const handleImageUploaded = (imageData) => {\n    console.log('채팅 이미지 업로드 완료:', imageData);\n    setUploadedFiles(prev => [...prev, { \n      ...imageData, \n      name: 'chat-image.jpg',\n      uploadedAt: new Date().toISOString()\n    }]);\n  };\n\n  const handleAudioUploaded = (audioData) => {\n    console.log('오디오 업로드 완료:', audioData);\n    setUploadedFiles(prev => [...prev, { \n      ...audioData, \n      name: 'level-test-audio.mp3',\n      uploadedAt: new Date().toISOString()\n    }]);\n  };\n\n  const handleFileDelete = async (deletedFile) => {\n    setUploadedFiles(prev => prev.filter(file => file.key !== deletedFile.key));\n  };\n\n  const handleProfileSelect = (selectedProfile) => {\n    console.log('선택된 프로필:', selectedProfile);\n    alert(`${selectedProfile.englishName} 프로필이 선택되었습니다.`);\n  };\n\n  const renderDemo = () => {\n    switch (activeDemo) {\n      case 'profile-card':\n        return (\n          <div className=\"space-y-6\">\n            <ProfileCard\n              profile={{\n                name,\n                englishName,\n                residence,\n                profileImage,\n                intro\n              }}\n              isOwner={true}\n              showEditButton={true}\n              onProfileUpdate={(data) => console.log('프로필 업데이트:', data)}\n            />\n          </div>\n        );\n\n      case 'profile-editor':\n        return (\n          <div>\n            <button\n              onClick={() => setIsProfileEditorOpen(true)}\n              className=\"px-4 py-2 bg-[#00C471] text-white rounded-[8px] hover:bg-[#00B267]\"\n            >\n              프로필 편집기 열기\n            </button>\n          </div>\n        );\n\n      case 'image-upload':\n        return (\n          <div>\n            <button\n              onClick={() => setIsProfileImageUploadOpen(true)}\n              className=\"px-4 py-2 bg-[#00C471] text-white rounded-[8px] hover:bg-[#00B267]\"\n            >\n              이미지 업로드 모달 열기\n            </button>\n          </div>\n        );\n\n      case 'chat-image-upload':\n        return (\n          <ChatImageUpload\n            onImageUploaded={handleImageUploaded}\n            className=\"max-w-md\"\n          />\n        );\n\n      case 'audio-upload':\n        return (\n          <AudioUpload\n            onAudioUploaded={handleAudioUploaded}\n            folder=\"level-test\"\n            title=\"레벨 테스트 음성 업로드\"\n            className=\"max-w-md\"\n          />\n        );\n\n      case 'file-manager':\n        return (\n          <FileManager\n            files={uploadedFiles}\n            onFileDelete={handleFileDelete}\n            onFileSelect={(file) => console.log('파일 선택:', file)}\n            allowDelete={true}\n            allowPreview={true}\n          />\n        );\n\n      case 'profile-search':\n        return (\n          <ProfileSearch\n            onProfileSelect={handleProfileSelect}\n            className=\"max-w-2xl\"\n          />\n        );\n\n      case 'upload-hooks':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white p-4 rounded-[12px] border border-[#E7E7E7]\">\n              <h3 className=\"text-[16px] font-bold mb-3\">이미지 업로드 훅</h3>\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => {\n                  const file = e.target.files[0];\n                  if (file) {\n                    imageUpload.uploadImage(file, 'profile');\n                  }\n                }}\n                className=\"mb-3\"\n              />\n              {imageUpload.isUploading && (\n                <div className=\"mb-3\">\n                  <p>업로드 중... {imageUpload.uploadProgress}%</p>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-[#00C471] h-2 rounded-full\"\n                      style={{ width: `${imageUpload.uploadProgress}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n              {imageUpload.error && (\n                <p className=\"text-red-500 text-[14px]\">{imageUpload.error}</p>\n              )}\n            </div>\n\n            <div className=\"bg-white p-4 rounded-[12px] border border-[#E7E7E7]\">\n              <h3 className=\"text-[16px] font-bold mb-3\">오디오 업로드 훅</h3>\n              <input\n                type=\"file\"\n                accept=\"audio/*\"\n                onChange={(e) => {\n                  const file = e.target.files[0];\n                  if (file) {\n                    audioUpload.uploadAudio(file, 'test-folder');\n                  }\n                }}\n                className=\"mb-3\"\n              />\n              {audioUpload.isUploading && (\n                <div className=\"mb-3\">\n                  <p>업로드 중... {audioUpload.uploadProgress}%</p>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-[#00C471] h-2 rounded-full\"\n                      style={{ width: `${audioUpload.uploadProgress}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n              {audioUpload.error && (\n                <p className=\"text-red-500 text-[14px]\">{audioUpload.error}</p>\n              )}\n            </div>\n          </div>\n        );\n\n      default:\n        return <div>데모를 선택해주세요.</div>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA]\">\n      {/* 헤더 */}\n      <div className=\"bg-white border-b border-[#E7E7E7] px-6 py-4\">\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={() => navigate(-1)}\n            className=\"p-2 -ml-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6\" />\n          </button>\n          <h1 className=\"text-[20px] font-bold text-[#111111]\">\n            프로필 관리 시스템 테스트\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* 사이드바 */}\n        <div className=\"w-80 bg-white border-r border-[#E7E7E7] p-4 overflow-y-auto\">\n          <h2 className=\"text-[16px] font-bold text-[#111111] mb-4\">데모 컴포넌트</h2>\n          <div className=\"space-y-2\">\n            {demos.map((demo) => (\n              <button\n                key={demo.id}\n                onClick={() => setActiveDemo(demo.id)}\n                className={`\n                  w-full p-3 text-left rounded-[8px] transition-colors\n                  ${activeDemo === demo.id\n                    ? 'bg-[#00C471] text-white'\n                    : 'hover:bg-[#F3F4F6] text-[#606060]'\n                  }\n                `}\n              >\n                <div className=\"text-[14px] font-medium\">{demo.title}</div>\n                <div className={`text-[12px] mt-1 ${\n                  activeDemo === demo.id ? 'text-white/80' : 'text-[#929292]'\n                }`}>\n                  {demo.description}\n                </div>\n              </button>\n            ))}\n          </div>\n\n          {/* 현재 프로필 정보 */}\n          <div className=\"mt-6 p-3 bg-[#F8F9FA] rounded-[8px]\">\n            <h3 className=\"text-[14px] font-bold text-[#111111] mb-2\">현재 프로필</h3>\n            <div className=\"text-[12px] text-[#606060] space-y-1\">\n              <div>영어명: {englishName || '미설정'}</div>\n              <div>한국명: {name || '미설정'}</div>\n              <div>거주지: {residence || '미설정'}</div>\n              <div>프로필 이미지: {profileImage ? '설정됨' : '미설정'}</div>\n            </div>\n          </div>\n\n          {/* 업로드된 파일 수 */}\n          <div className=\"mt-4 p-3 bg-[#E6F9F1] rounded-[8px]\">\n            <h3 className=\"text-[14px] font-bold text-[#111111] mb-1\">업로드된 파일</h3>\n            <div className=\"text-[12px] text-[#606060]\">\n              총 {uploadedFiles.length}개의 파일\n            </div>\n          </div>\n        </div>\n\n        {/* 메인 콘텐츠 */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-[24px] font-bold text-[#111111] mb-2\">\n                {demos.find(d => d.id === activeDemo)?.title}\n              </h2>\n              <p className=\"text-[16px] text-[#606060]\">\n                {demos.find(d => d.id === activeDemo)?.description}\n              </p>\n            </div>\n\n            {/* 데모 컴포넌트 렌더링 */}\n            <div>{renderDemo()}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* 모달들 */}\n      <ProfileImageUpload\n        isOpen={isProfileImageUploadOpen}\n        onClose={() => setIsProfileImageUploadOpen(false)}\n      />\n\n      <ProfileEditor\n        isOpen={isProfileEditorOpen}\n        onClose={() => setIsProfileEditorOpen(false)}\n        onSave={(data) => {\n          console.log('프로필 편집 완료:', data);\n          setIsProfileEditorOpen(false);\n        }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Schedule/Schedule.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":31,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport MainHeader from \"../../components/MainHeader\";\nimport Sidebar from \"../../components/chat/Sidebar\";\nimport Calendar from \"../../components/Calendar\";\nimport SessionScheduleList from \"../../components/SessionScheduleList\";\nimport useSessionStore from \"../../store/sessionStore\";\n\nconst getMonthBounds = (date) => {\n  const start = new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n  const end = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 999);\n  return { start, end };\n};\n\nexport default function Schedule() {\n  const navigate = useNavigate();\n  const [currentMonthDate, setCurrentMonthDate] = useState(() => {\n    const now = new Date();\n    return new Date(now.getFullYear(), now.getMonth(), 1);\n  });\n\n  const calendarEvents = useSessionStore((state) => state.calendarEvents);\n  const calendarLoading = useSessionStore((state) => state.calendarLoading);\n  const calendarError = useSessionStore((state) => state.calendarError);\n\n  const fetchCalendar = useCallback(async () => {\n    const { start, end } = getMonthBounds(currentMonthDate);\n    try {\n      const loadCalendar = useSessionStore.getState().loadCalendar;\n      await loadCalendar({ startDate: start, endDate: end });\n    } catch (error) {\n      // 상위 컴포넌트에서 에러 메시지를 표시하므로 여기서는 무시\n    }\n  }, [currentMonthDate]);\n\n  useEffect(() => {\n    fetchCalendar();\n  }, [fetchCalendar]);\n\n  const currentMonthSessions = useMemo(() => {\n    const month = currentMonthDate.getMonth();\n    const year = currentMonthDate.getFullYear();\n\n    return calendarEvents\n      .filter((event) => {\n        if (!event.start) return false;\n        return (\n          event.start.getMonth() === month &&\n          event.start.getFullYear() === year\n        );\n      })\n      .sort((a, b) => {\n        if (!a.start || !b.start) return 0;\n        return a.start - b.start;\n      })\n      .map((event) => ({\n        id: event.sessionId,\n        title: event.title,\n        description: event.description,\n        start: event.start,\n        end: event.end,\n        status: (event.rawStatus || event.status || \"\").toUpperCase(),\n        isHost: event.isHost,\n        color: event.color,\n        participantNames: event.participantNames || [],\n        languageCode: event.languageCode,\n        durationMinutes: event.durationMinutes,\n        currentParticipants: event.currentParticipants,\n        maxParticipants: event.maxParticipants,\n      }));\n  }, [calendarEvents, currentMonthDate]);\n\n  const handleMonthChange = (newDate) => {\n    setCurrentMonthDate(new Date(newDate.getFullYear(), newDate.getMonth(), 1));\n  };\n\n  const handleRetry = () => {\n    fetchCalendar();\n  };\n\n  const handleCreateSession = () => {\n    navigate('/session/schedule/new');\n  };\n\n  return (\n    <div className=\"bg-[#fafafa] min-h-screen flex flex-col\">\n      <MainHeader />\n      <div className=\"flex flex-1 p-6 space-x-6 overflow-hidden\">\n        <Sidebar active=\"schedule\" />\n\n        <div className=\"flex-1 flex space-x-6 overflow-y-auto\">\n          <div className=\"w-[46%]\">\n            <Calendar\n              events={calendarEvents}\n              isLoading={calendarLoading}\n              currentMonthDate={currentMonthDate}\n              onMonthChange={handleMonthChange}\n              onRetry={handleRetry}\n              error={calendarError}\n            />\n          </div>\n\n          <div className=\"w-[54%]\">\n            <SessionScheduleList\n              sessions={currentMonthSessions}\n              currentMonthDate={currentMonthDate}\n              isLoading={calendarLoading}\n              error={calendarError}\n              onRetry={handleRetry}\n              onCreateSession={handleCreateSession}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/AudioConnectionCheck.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'recordedBlob' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"recordedBlob"},"fix":{"range":[738,750],"text":""},"desc":"Remove unused variable 'recordedBlob'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport CommonButton from '../../components/CommonButton';\nimport { Mic, MicOff, Volume2, Wifi, WifiOff, CheckCircle, XCircle, Loader2 } from 'lucide-react';\n\nexport default function AudioSessionCheck() {\n  const navigate = useNavigate();\n  const [micStatus, setMicStatus] = useState('idle'); // idle, testing, success, failed\n  const [speakerStatus, setSpeakerStatus] = useState('idle');\n  const [connectionStatus, setConnectionStatus] = useState('idle');\n  const [audioLevel, setAudioLevel] = useState(0);\n  const [connectionSpeed, setConnectionSpeed] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordedBlob, setRecordedBlob] = useState(null);\n\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const animationRef = useRef(null);\n  const streamRef = useRef(null);\n\n  useEffect(() => {\n    return () => {\n      // Cleanup\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, []);\n\n  // 오디오 레벨 시각화\n  const visualizeAudio = () => {\n    if (!analyserRef.current) return;\n\n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(dataArray);\n\n    const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n    setAudioLevel(Math.min(average / 128, 1));\n\n    animationRef.current = requestAnimationFrame(visualizeAudio);\n  };\n\n  // 마이크 테스트\n  const testMicrophone = async () => {\n    setMicStatus('testing');\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100,\n        }\n      });\n\n      streamRef.current = stream;\n\n      // 오디오 시각화 설정\n      audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      const source = audioContextRef.current.createMediaStreamSource(stream);\n      source.connect(analyserRef.current);\n      analyserRef.current.fftSize = 256;\n\n      // MediaRecorder 설정\n      const options = {\n        mimeType: 'audio/webm;codecs=opus'\n      };\n\n      if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n        options.mimeType = 'audio/webm';\n      }\n\n      mediaRecorderRef.current = new MediaRecorder(stream, options);\n      audioChunksRef.current = [];\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorderRef.current.onstop = () => {\n        const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n        setRecordedBlob(blob);\n        setIsRecording(false);\n\n        // 자동 재생으로 마이크 테스트 완료\n        const audioUrl = URL.createObjectURL(blob);\n        const audio = new Audio(audioUrl);\n        audio.play().then(() => {\n          setMicStatus('success');\n        }).catch(() => {\n          setMicStatus('failed');\n        });\n      };\n\n      // 3초간 녹음\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      visualizeAudio();\n\n      setTimeout(() => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n          mediaRecorderRef.current.stop();\n          stream.getTracks().forEach(track => track.stop());\n          if (animationRef.current) {\n            cancelAnimationFrame(animationRef.current);\n          }\n        }\n      }, 3000);\n\n    } catch (error) {\n      console.error('Microphone test failed:', error);\n      setMicStatus('failed');\n    }\n  };\n\n  // 스피커 테스트\n  const testSpeaker = async () => {\n    setSpeakerStatus('testing');\n\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n      // 테스트 톤 생성 (440Hz, 0.5초)\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n\n      oscillator.frequency.value = 440; // A4 음\n      gainNode.gain.value = 0.3; // 볼륨 30%\n\n      oscillator.start();\n\n      // 페이드 아웃\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n\n      setTimeout(() => {\n        oscillator.stop();\n        setSpeakerStatus('success');\n      }, 500);\n\n    } catch (error) {\n      console.error('Speaker test failed:', error);\n      setSpeakerStatus('failed');\n    }\n  };\n\n  // 연결 테스트\n  const testConnection = async () => {\n    setConnectionStatus('testing');\n\n    try {\n      // 간단한 속도 테스트 (실제로는 더 정교한 방법 필요)\n      const startTime = Date.now();\n\n      // 1MB 정도의 더미 데이터 다운로드\n      const response = await fetch('https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png', {\n        cache: 'no-cache'\n      });\n\n      const data = await response.blob();\n      const endTime = Date.now();\n      const duration = (endTime - startTime) / 1000; // 초 단위\n      const sizeInMB = data.size / (1024 * 1024);\n      const speedMbps = (sizeInMB * 8) / duration;\n\n      setConnectionSpeed(speedMbps);\n\n      // 최소 1Mbps 이상이면 성공\n      if (speedMbps >= 1) {\n        setConnectionStatus('success');\n      } else {\n        setConnectionStatus('failed');\n      }\n\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      setConnectionStatus('failed');\n    }\n  };\n\n  // 전체 테스트 실행\n  const runAllTests = async () => {\n    await testMicrophone();\n    setTimeout(() => testSpeaker(), 4000);\n    setTimeout(() => testConnection(), 5000);\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'idle':\n        return null;\n      case 'testing':\n        return <Loader2 className=\"w-5 h-5 animate-spin text-[var(--blue)]\" />;\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-[var(--green-500)]\" />;\n      case 'failed':\n        return <XCircle className=\"w-5 h-5 text-[var(--red)]\" />;\n      default:\n        return null;\n    }\n  };\n\n  const allTestsPassed = micStatus === 'success' &&\n    speakerStatus === 'success' &&\n    connectionStatus === 'success';\n\n  return (\n    <div className=\"min-h-screen page-bg flex flex-col\">\n      <div className=\"max-w-[768px] w-full mx-auto flex flex-col min-h-screen\">\n        {/* 헤더 */}\n        <div className=\"px-6 py-4 bg-white border-b border-[var(--black-50)]\">\n          <div className=\"flex items-center justify-between\">\n            <button\n              onClick={() => navigate(-1)}\n              className=\"p-2 -ml-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                <path d=\"M15 18L9 12L15 6\" stroke=\"#111111\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n              </svg>\n            </button>\n            <h1 className=\"text-[18px] font-bold text-[var(--black-500)]\">음성 세션 연결 확인</h1>\n            <div className=\"w-10\" />\n          </div>\n        </div>\n\n        {/* 메인 콘텐츠 */}\n        <div className=\"flex-1 px-6 py-8\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-[24px] font-bold text-[var(--black-500)] mb-2\">\n              세션 시작 전 확인사항\n            </h2>\n            <p className=\"text-[16px] text-[var(--black-300)]\">\n              원활한 음성 통화를 위해 디바이스를 테스트합니다\n            </p>\n          </div>\n\n          {/* 테스트 항목들 */}\n          <div className=\"space-y-4 mb-8\">\n            {/* 마이크 테스트 */}\n            <div className=\"bg-white rounded-[10px] p-6 border border-[var(--black-50)]\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-[rgba(0,196,113,0.12)] rounded-full flex items-center justify-center mr-4\">\n                    {isRecording ? <Mic className=\"w-6 h-6 text-[var(--green-500)]\" /> : <MicOff className=\"w-6 h-6 text-[var(--green-500)]\" />}\n                  </div>\n                  <div>\n                    <h3 className=\"text-[16px] font-medium text-[#111111]\">마이크 테스트</h3>\n                    <p className=\"text-[14px] text-[var(--black-200)]\">\n                      {micStatus === 'idle' && '테스트를 시작하세요'}\n                      {micStatus === 'testing' && '3초간 말씀해주세요...'}\n                      {micStatus === 'success' && '정상 작동'}\n                      {micStatus === 'failed' && '마이크를 확인하세요'}\n                    </p>\n                  </div>\n                </div>\n                {getStatusIcon(micStatus)}\n              </div>\n\n              {/* 오디오 레벨 표시 */}\n              {isRecording && (\n                <div className=\"mt-4\">\n                  <div className=\"h-2 bg-[var(--black-50)] rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-[var(--green-500)] transition-all duration-100\"\n                      style={{ width: `${audioLevel * 100}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* 스피커 테스트 */}\n            <div className=\"bg-white rounded-[10px] p-6 border border-[var(--black-50)]\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-[rgba(66,133,244,0.12)] rounded-full flex items-center justify-center mr-4\">\n                    <Volume2 className=\"w-6 h-6 text-[var(--blue)]\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-[16px] font-medium text-[#111111]\">스피커 테스트</h3>\n                    <p className=\"text-[14px] text-[var(--black-200)]\">\n                      {speakerStatus === 'idle' && '테스트를 시작하세요'}\n                      {speakerStatus === 'testing' && '테스트 음이 재생됩니다...'}\n                      {speakerStatus === 'success' && '정상 작동'}\n                      {speakerStatus === 'failed' && '스피커를 확인하세요'}\n                    </p>\n                  </div>\n                </div>\n                {getStatusIcon(speakerStatus)}\n              </div>\n            </div>\n\n            {/* 연결 테스트 */}\n            <div className=\"bg-white rounded-[10px] p-6 border border-[var(--black-50)]\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-[rgba(255,165,0,0.12)] rounded-full flex items-center justify-center mr-4\">\n                    {connectionStatus === 'failed' ?\n                      <WifiOff className=\"w-6 h-6 text-[var(--warning-yellow)]\" /> :\n                      <Wifi className=\"w-6 h-6 text-[var(--warning-yellow)]\" />\n                    }\n                  </div>\n                  <div>\n                    <h3 className=\"text-[16px] font-medium text-[#111111]\">인터넷 연결</h3>\n                    <p className=\"text-[14px] text-[var(--black-200)]\">\n                      {connectionStatus === 'idle' && '테스트를 시작하세요'}\n                      {connectionStatus === 'testing' && '연결 속도 측정 중...'}\n                      {connectionStatus === 'success' && `연결 양호 (${connectionSpeed?.toFixed(1)} Mbps)`}\n                      {connectionStatus === 'failed' && '연결이 불안정합니다'}\n                    </p>\n                  </div>\n                </div>\n                {getStatusIcon(connectionStatus)}\n              </div>\n            </div>\n          </div>\n\n          {/* 안내 메시지 */}\n          <div className=\"bg-[var(--neutral-100)] rounded-[10px] p-4 mb-8\">\n            <p className=\"text-[14px] text-[var(--black-300)]\">\n              💡 모든 테스트를 통과해야 원활한 음성 통화가 가능합니다.\n              문제가 있다면 디바이스 설정을 확인해주세요.\n            </p>\n          </div>\n        </div>\n\n        {/* 하단 버튼 */}\n        <div className=\"px-6 pb-8\">\n          {micStatus === 'idle' && speakerStatus === 'idle' && connectionStatus === 'idle' ? (\n            <CommonButton\n              onClick={runAllTests}\n              className=\"w-full\"\n              variant=\"primary\"\n            >\n              전체 테스트 시작\n            </CommonButton>\n          ) : allTestsPassed ? (\n            <CommonButton\n              onClick={() => navigate('/session/audio-room')}\n              className=\"w-full\"\n              variant=\"success\"\n            >\n              세션 시작하기\n            </CommonButton>\n          ) : (\n            <div className=\"space-y-3\">\n              <CommonButton\n                onClick={runAllTests}\n                className=\"w-full\"\n                variant=\"secondary\"\n              >\n                다시 테스트\n              </CommonButton>\n              {(micStatus === 'testing' || speakerStatus === 'testing' || connectionStatus === 'testing') && (\n                <p className=\"text-center text-[14px] text-[var(--black-200)]\">\n                  테스트 진행 중...\n                </p>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/AudioSession.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'remoteAudioRef' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":17,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"remoteAudioRef"},"fix":{"range":[756,792],"text":""},"desc":"Remove unused variable 'remoteAudioRef'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'sessionSettings' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":25,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"sessionSettings"},"fix":{"range":[916,941],"text":""},"desc":"Remove unused variable 'sessionSettings'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'connectionState' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":32,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"connectionState"},"fix":{"range":[1102,1118],"text":""},"desc":"Remove unused variable 'connectionState'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'localStream' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":33,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"localStream"},"fix":{"range":[1117,1138],"text":""},"desc":"Remove unused variable 'localStream'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'remoteStreams' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":34,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"remoteStreams"},"fix":{"range":[1138,1161],"text":""},"desc":"Remove unused variable 'remoteStreams'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":36,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[1185,1200],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"stats"},"fix":{"range":[1200,1215],"text":""},"desc":"Remove unused variable 'stats'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'disconnectWebRTC' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":39,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"disconnectWebRTC"},"fix":{"range":[1236,1274],"text":""},"desc":"Remove unused variable 'disconnectWebRTC'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'getUserMedia' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":40,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"getUserMedia"},"fix":{"range":[1274,1296],"text":""},"desc":"Remove unused variable 'getUserMedia'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Mic, MicOff, Phone, PhoneOff, Globe, Volume2, VolumeX } from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport useSessionStore from '../../store/sessionStore';\nimport useProfileStore from '../../store/profileStore';\nimport useWebRTC from '../../hooks/useWebRTC';\n\nexport default function AudioSession() {\n    const navigate = useNavigate();\n    const { sessionId } = useParams();\n\n    const [speakerMuted, setSpeakerMuted] = useState(false);\n    const [callDuration, setCallDuration] = useState(0);\n    const [currentLanguage, setCurrentLanguage] = useState('en');\n    const timerRef = useRef(null);\n    const remoteAudioRef = useRef(null);\n\n    const {\n        activeSession,\n        sessionStatus,\n        startSession,\n        endSession,\n        switchLanguage,\n        sessionSettings\n    } = useSessionStore();\n\n    const { name: userName, profileImage: userProfileImage } = useProfileStore();\n\n    // WebRTC Hook 사용 (오디오만)\n    const {\n        connectionState,\n        localStream,\n        remoteStreams,\n        isAudioEnabled,\n        error,\n        stats,\n        toggleAudio,\n        disconnect: disconnectWebRTC,\n        getUserMedia\n    } = useWebRTC(sessionId, userName);\n\n    // 더미 파트너 데이터 (실제로는 activeSession에서 가져와야 함)\n    const partner = {\n        name: \"Emma Wilson\",\n        profileImage: \"/assets/basicProfilePic.png\",\n        level: \"Intermediate\",\n        nativeLanguage: \"English\",\n        learningLanguage: \"Korean\"\n    };\n\n    useEffect(() => {\n        // 세션 시작\n        if (sessionId && !activeSession) {\n            startSession(sessionId);\n        }\n\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [sessionId, startSession, activeSession]);\n\n    useEffect(() => {\n        // 통화 시간 타이머\n        if (sessionStatus === 'connected' && !timerRef.current) {\n            timerRef.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n            }, 1000);\n        } else if (sessionStatus !== 'connected' && timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n        }\n\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [sessionStatus]);\n\n    const formatDuration = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const mins = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${mins}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    const handleToggleMute = () => {\n        toggleAudio();\n    };\n\n    const handleToggleSpeaker = () => {\n        setSpeakerMuted(!speakerMuted);\n    };\n\n    const handleToggleLanguage = () => {\n        const newLang = currentLanguage === 'en' ? 'ko' : 'en';\n        setCurrentLanguage(newLang);\n        switchLanguage();\n    };\n\n    const handleEndCall = () => {\n        if (window.confirm('통화를 종료하시겠습니까?')) {\n            endSession();\n            navigate('/sessions');\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen bg-[var(--black-700)] text-white flex flex-col\">\n            {/* Header */}\n            <div className=\"bg-[var(--black-600)] border-b border-[var(--black-400)] px-6 py-4\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                        <h1 className=\"text-[18px] font-bold\">1:1 음성 세션</h1>\n                        {sessionStatus === 'connected' && (\n                            <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-2 h-2 bg-[var(--green-500)] rounded-full animate-pulse\" />\n                                <span className=\"text-[14px] text-[var(--green-500)]\">연결됨</span>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"text-[18px] font-mono\">\n                        {formatDuration(callDuration)}\n                    </div>\n                </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"flex-1 flex flex-col items-center justify-center p-8\">\n                {/* Profile Cards */}\n                <div className=\"flex items-center justify-center space-x-16 mb-12\">\n                    {/* User Profile */}\n                    <div className=\"text-center\">\n                        <div className=\"relative mb-4\">\n                            <img\n                                src={userProfileImage || \"/assets/basicProfilePic.png\"}\n                                alt={userName}\n                                className=\"w-32 h-32 rounded-full object-cover border-4 border-[var(--black-400)]\"\n                            />\n                            {isAudioEnabled && (\n                                <div className=\"absolute -bottom-2 -right-2 w-8 h-8 bg-[var(--green-500)] rounded-full flex items-center justify-center\">\n                                    <Mic className=\"w-4 h-4 text-white\" />\n                                </div>\n                            )}\n                        </div>\n                        <h3 className=\"text-[16px] font-semibold mb-1\">{userName || \"나\"}</h3>\n                        <p className=\"text-[14px] text-[var(--black-200)]\">\n                            {currentLanguage === 'en' ? 'Speaking English' : 'Speaking Korean'}\n                        </p>\n                    </div>\n\n                    {/* Connection Visual */}\n                    <div className=\"flex items-center\">\n                        <div className=\"flex space-x-2\">\n                            {[1, 2, 3, 4, 5].map((i) => (\n                                <div\n                                    key={i}\n                                    className={`w-2 h-12 bg-[var(--green-500)] rounded-full transition-all duration-300`}\n                                    style={{\n                                        height: `${Math.random() * 48 + 12}px`,\n                                        opacity: sessionStatus === 'connected' ? 1 : 0.3\n                                    }}\n                                />\n                            ))}\n                        </div>\n                    </div>\n\n                    {/* Partner Profile */}\n                    <div className=\"text-center\">\n                        <div className=\"relative mb-4\">\n                            <img\n                                src={partner.profileImage}\n                                alt={partner.name}\n                                className=\"w-32 h-32 rounded-full object-cover border-4 border-[var(--black-400)]\"\n                            />\n                            {!speakerMuted && sessionStatus === 'connected' && (\n                                <div className=\"absolute -bottom-2 -right-2 w-8 h-8 bg-[var(--blue)] rounded-full flex items-center justify-center\">\n                                    <Volume2 className=\"w-4 h-4 text-white\" />\n                                </div>\n                            )}\n                        </div>\n                        <h3 className=\"text-[16px] font-semibold mb-1\">{partner.name}</h3>\n                        <p className=\"text-[14px] text-[var(--black-200)]\">{partner.level}</p>\n                    </div>\n                </div>\n\n                {/* Language Info */}\n                <div className=\"bg-[var(--black-600)] rounded-[20px] p-6 mb-8 max-w-md w-full\">\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <p className=\"text-[14px] text-[var(--black-200)] mb-1\">현재 언어</p>\n                            <p className=\"text-[18px] font-semibold\">\n                                {currentLanguage === 'en' ? 'English' : '한국어'}\n                            </p>\n                        </div>\n                        <button\n                            onClick={handleToggleLanguage}\n                            className=\"p-3 bg-[var(--black-400)] hover:bg-[var(--black-300)] rounded-full transition-colors duration-200\"\n                        >\n                            <Globe className=\"w-6 h-6\" />\n                        </button>\n                    </div>\n                </div>\n\n                {/* Connection Status */}\n                {sessionStatus === 'connecting' && (\n                    <div className=\"text-center mb-8\">\n                        <div className=\"inline-flex items-center space-x-2\">\n                            <div className=\"w-2 h-2 bg-[var(--warning-yellow)] rounded-full animate-pulse\" />\n                            <p className=\"text-[14px] text-[var(--warning-yellow)]\">연결 중...</p>\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {/* Control Bar */}\n            <div className=\"bg-[var(--black-600)] border-t border-[var(--black-400)] p-6\">\n                <div className=\"flex items-center justify-center space-x-4\">\n                    {/* Mute Button */}\n                    <button\n                        onClick={handleToggleMute}\n                        className={`p-4 rounded-full transition-colors duration-200 ${!isAudioEnabled\n                            ? 'bg-[var(--red)] hover:bg-[var(--red-600)]'\n                            : 'bg-[var(--black-400)] hover:bg-[var(--black-300)]'\n                            }`}\n                    >\n                        {!isAudioEnabled ? (\n                            <MicOff className=\"w-6 h-6\" />\n                        ) : (\n                            <Mic className=\"w-6 h-6\" />\n                        )}\n                    </button>\n\n                    {/* Speaker Button */}\n                    <button\n                        onClick={handleToggleSpeaker}\n                        className={`p-4 rounded-full transition-colors duration-200 ${speakerMuted\n                            ? 'bg-[var(--red)] hover:bg-[var(--red-600)]'\n                            : 'bg-[var(--black-400)] hover:bg-[var(--black-300)]'\n                            }`}\n                    >\n                        {speakerMuted ? (\n                            <VolumeX className=\"w-6 h-6\" />\n                        ) : (\n                            <Volume2 className=\"w-6 h-6\" />\n                        )}\n                    </button>\n\n                    {/* End Call Button */}\n                    <button\n                        onClick={handleEndCall}\n                        className=\"p-4 bg-[var(--red)] hover:bg-[var(--red-600)] rounded-full transition-colors duration-200\"\n                    >\n                        <PhoneOff className=\"w-6 h-6\" />\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/AudioSessionRoom.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'showSubtitles' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"showSubtitles"},"fix":{"range":[1208,1221],"text":""},"desc":"Remove unused variable 'showSubtitles'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowSubtitles' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":22,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowSubtitles"},"fix":{"range":[1221,1239],"text":""},"desc":"Remove unused variable 'setShowSubtitles'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cleanup' and 'initializeAudioSession'. Either include them or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [cleanup, initializeAudioSession, roomId]","fix":{"range":[1845,1853],"text":"[cleanup, initializeAudioSession, roomId]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'stream' is defined but never used.","line":112,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"stream"},"fix":{"range":[4068,4076],"text":""},"desc":"Remove unused variable 'stream'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport VideoControls from '../../components/VideoControls';\nimport { Phone, PhoneIncoming, PhoneOutgoing, Clock, Signal, SignalLow, Loader2, MessageSquare, Languages } from 'lucide-react';\nimport { webrtcManager } from '../../services/webrtc';\nimport { log } from '../../utils/logger';\nimport CommonButton from '../../components/CommonButton';\nimport TranslatedSubtitles from '../../components/TranslatedSubtitles';\nimport RealtimeSubtitles from '../../components/RealtimeSubtitles';\nimport RealtimeSubtitlePanel from '../../components/RealtimeSubtitlePanel';\n\nexport default function AudioSessionRoom() {\n  const navigate = useNavigate();\n  const { roomId } = useParams();\n  const [connectionState, setConnectionState] = useState('new');\n  const [callDuration, setCallDuration] = useState(0);\n  const [currentLanguage, setCurrentLanguage] = useState('ko');\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [participants, setParticipants] = useState(new Map());\n  const [connectionStats, setConnectionStats] = useState({});\n  const [error, setError] = useState('');\n  const [showSubtitles, setShowSubtitles] = useState(true);\n  const [subtitlesEnabled, setSubtitlesEnabled] = useState(false);\n  const [translationEnabled, setTranslationEnabled] = useState(true);\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n\n  const intervalRef = useRef(null);\n  const statsIntervalRef = useRef(null);\n  const startTimeRef = useRef(null);\n  const localAudioRef = useRef(null);\n  const remoteAudiosRef = useRef(new Map());\n\n  // Initialize audio session\n  useEffect(() => {\n    initializeAudioSession();\n\n    return () => {\n      cleanup();\n    };\n  }, [roomId]);\n\n  // Initialize audio session\n  const initializeAudioSession = async () => {\n    try {\n      setConnectionState('connecting');\n      log.info('음성 세션 초기화 시작', { roomId }, 'AUDIO_SESSION');\n\n      // Setup WebRTC manager callbacks\n      setupWebRTCCallbacks();\n\n      // Initialize audio-only media\n      const constraints = {\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        },\n        video: false\n      };\n\n      // Initialize media and connect to room\n      await webrtcManager.initializeMedia(constraints);\n      \n      const userId = localStorage.getItem('userId') || 'guest-' + Date.now();\n      const userName = localStorage.getItem('userName') || 'Anonymous';\n      \n      await webrtcManager.connect(roomId, { userId, userName }, {\n        autoReconnect: true,\n        connectionTimeout: 15000\n      });\n\n    } catch (error) {\n      log.error('음성 세션 초기화 실패', error, 'AUDIO_SESSION');\n      setConnectionState('failed');\n      setError(error.message || '연결 실패');\n    }\n  };\n\n  // Setup WebRTC manager callbacks\n  const setupWebRTCCallbacks = () => {\n    // Local stream callback\n    webrtcManager.on('onLocalStream', (stream) => {\n      log.info('로컬 오디오 스트림 수신', null, 'AUDIO_SESSION');\n      setLocalStream(stream);\n      if (localAudioRef.current) {\n        localAudioRef.current.srcObject = stream;\n      }\n    });\n\n    // Remote stream callback\n    webrtcManager.on('onRemoteStream', (userId, stream) => {\n      log.info('원격 오디오 스트림 수신', { userId }, 'AUDIO_SESSION');\n      \n      // Update remote streams state\n      setRemoteStreams(prev => new Map(prev).set(userId, stream));\n      \n      let audioElement = remoteAudiosRef.current.get(userId);\n      if (!audioElement) {\n        audioElement = document.createElement('audio');\n        audioElement.autoplay = true;\n        audioElement.playsInline = true;\n        audioElement.id = `remote-audio-${userId}`;\n        document.body.appendChild(audioElement);\n        remoteAudiosRef.current.set(userId, audioElement);\n      }\n      \n      audioElement.srcObject = stream;\n    });\n\n    // Remote stream removed callback\n    webrtcManager.on('onRemoteStreamRemoved', (userId, stream) => {\n      log.info('원격 오디오 스트림 제거', { userId }, 'AUDIO_SESSION');\n      \n      // Update remote streams state\n      setRemoteStreams(prev => {\n        const updated = new Map(prev);\n        updated.delete(userId);\n        return updated;\n      });\n      \n      const audioElement = remoteAudiosRef.current.get(userId);\n      if (audioElement) {\n        audioElement.srcObject = null;\n        if (audioElement.parentNode) {\n          audioElement.parentNode.removeChild(audioElement);\n        }\n        remoteAudiosRef.current.delete(userId);\n      }\n\n      // Update participants\n      setParticipants(prev => {\n        const updated = new Map(prev);\n        updated.delete(userId);\n        return updated;\n      });\n    });\n\n    // Participant joined callback\n    webrtcManager.on('onParticipantJoined', (participant) => {\n      log.info('참가자 입장', participant, 'AUDIO_SESSION');\n      setParticipants(prev => new Map(prev).set(participant.userId, participant));\n    });\n\n    // Participant left callback\n    webrtcManager.on('onParticipantLeft', (participant) => {\n      log.info('참가자 퇴장', participant, 'AUDIO_SESSION');\n      setParticipants(prev => {\n        const updated = new Map(prev);\n        updated.delete(participant.userId);\n        return updated;\n      });\n    });\n\n    // Connection state change callback\n    webrtcManager.on('onConnectionStateChange', (state) => {\n      log.info('연결 상태 변경', { state }, 'AUDIO_SESSION');\n      setConnectionState(state);\n      \n      if (state === 'connected') {\n        setError('');\n        startCallTimer();\n        startStatsMonitoring();\n        webrtcManager.startConnectionMonitoring();\n      } else if (state === 'disconnected' || state === 'failed') {\n        stopCallTimer();\n        stopStatsMonitoring();\n        webrtcManager.stopConnectionMonitoring();\n        if (state === 'failed') {\n          setError('연결이 끊어졌습니다');\n        }\n      } else if (state === 'reconnecting') {\n        setError('연결을 복구하는 중입니다...');\n      }\n    });\n\n    // Error callback\n    webrtcManager.on('onError', (message, error) => {\n      log.error('WebRTC 오류', { message, error }, 'AUDIO_SESSION');\n      setConnectionState('failed');\n      setError(message || '연결 오류가 발생했습니다');\n    });\n  };\n\n  // Call timer management\n  const startCallTimer = () => {\n    if (!startTimeRef.current) {\n      startTimeRef.current = Date.now();\n    }\n\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    intervalRef.current = setInterval(() => {\n      const elapsed = Math.floor((Date.now() - startTimeRef.current) / 1000);\n      setCallDuration(elapsed);\n    }, 1000);\n  };\n\n  const stopCallTimer = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  // Statistics monitoring functions\n  const startStatsMonitoring = () => {\n    if (statsIntervalRef.current) {\n      clearInterval(statsIntervalRef.current);\n    }\n\n    statsIntervalRef.current = setInterval(async () => {\n      try {\n        const stats = await webrtcManager.getConnectionStats();\n        setConnectionStats(stats);\n      } catch (error) {\n        log.error('통계 수집 실패', error, 'AUDIO_SESSION');\n      }\n    }, 3000); // Update stats every 3 seconds\n  };\n\n  const stopStatsMonitoring = () => {\n    if (statsIntervalRef.current) {\n      clearInterval(statsIntervalRef.current);\n      statsIntervalRef.current = null;\n    }\n  };\n\n  // Cleanup function\n  const cleanup = async () => {\n    log.info('음성 세션 정리 시작', null, 'AUDIO_SESSION');\n\n    // Stop timers and monitoring\n    stopCallTimer();\n    stopStatsMonitoring();\n\n    // Clean up remote audio elements\n    remoteAudiosRef.current.forEach((audio) => {\n      if (audio.srcObject) {\n        audio.srcObject = null;\n      }\n      if (audio.parentNode) {\n        audio.parentNode.removeChild(audio);\n      }\n    });\n    remoteAudiosRef.current.clear();\n\n    // Disconnect WebRTC manager\n    try {\n      await webrtcManager.disconnect();\n      log.info('WebRTC 연결 정리 완료', null, 'AUDIO_SESSION');\n    } catch (error) {\n      log.error('WebRTC 연결 정리 실패', error, 'AUDIO_SESSION');\n    }\n\n    // Clear callbacks\n    webrtcManager.off('onLocalStream');\n    webrtcManager.off('onRemoteStream');\n    webrtcManager.off('onRemoteStreamRemoved');\n    webrtcManager.off('onParticipantJoined');\n    webrtcManager.off('onParticipantLeft');\n    webrtcManager.off('onConnectionStateChange');\n    webrtcManager.off('onError');\n  };\n\n  // Control handlers\n  const handleToggleAudio = () => {\n    const newAudioState = !isAudioEnabled;\n    setIsAudioEnabled(newAudioState);\n    webrtcManager.toggleAudio(newAudioState);\n    log.info('오디오 토글', { enabled: newAudioState }, 'AUDIO_SESSION');\n  };\n\n  const handleEndCall = async () => {\n    log.info('음성 통화 종료', null, 'AUDIO_SESSION');\n    await cleanup();\n    navigate('/sessions');\n  };\n\n  const handleToggleLanguage = () => {\n    const languages = ['ko', 'en', 'ja', 'zh', 'es'];\n    const currentIndex = languages.indexOf(currentLanguage);\n    const nextIndex = (currentIndex + 1) % languages.length;\n    const newLang = languages[nextIndex];\n    \n    setCurrentLanguage(newLang);\n    \n    // Notify participants about language change\n    webrtcManager.sendChatMessage(JSON.stringify({\n      type: 'language-change',\n      language: newLang\n    }));\n    \n    log.info('언어 전환', { from: currentLanguage, to: newLang }, 'AUDIO_SESSION');\n  };\n\n  const handleToggleSubtitles = () => {\n    const newState = !subtitlesEnabled;\n    setSubtitlesEnabled(newState);\n    log.info('자막 토글', { enabled: newState }, 'AUDIO_SESSION');\n  };\n\n  const handleToggleTranslation = () => {\n    const newState = !translationEnabled;\n    setTranslationEnabled(newState);\n    log.info('번역 토글', { enabled: newState }, 'AUDIO_SESSION');\n  };\n\n  // Utility functions\n  const formatDuration = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getConnectionIcon = () => {\n    // Calculate connection quality based on stats\n    const stats = connectionStats.detailedStats;\n    if (!stats || Object.keys(stats).length === 0) {\n      return <Signal className=\"w-4 h-4 text-[var(--black-200)]\" />;\n    }\n\n    let avgRtt = 0;\n    let avgPacketLoss = 0;\n    let statCount = 0;\n\n    Object.values(stats).forEach(peerStats => {\n      if (peerStats.rtt) {\n        avgRtt += peerStats.rtt;\n        statCount++;\n      }\n      if (peerStats.audioPacketsLost && peerStats.audioPacketsReceived) {\n        const lossRate = (peerStats.audioPacketsLost / peerStats.audioPacketsReceived) * 100;\n        avgPacketLoss += lossRate;\n      }\n    });\n\n    if (statCount > 0) {\n      avgRtt = avgRtt / statCount;\n      avgPacketLoss = avgPacketLoss / statCount;\n\n      if (avgRtt < 100 && avgPacketLoss < 2) {\n        return <Signal className=\"w-4 h-4 text-[var(--green-500)]\" />;\n      } else if (avgRtt < 200 && avgPacketLoss < 5) {\n        return <Signal className=\"w-4 h-4 text-[var(--warning-yellow)]\" />;\n      } else {\n        return <SignalLow className=\"w-4 h-4 text-[var(--red)]\" />;\n      }\n    }\n\n    return <Signal className=\"w-4 h-4 text-[var(--black-200)]\" />;\n  };\n\n  const getConnectionText = () => {\n    const stats = connectionStats.detailedStats;\n    if (!stats || Object.keys(stats).length === 0) {\n      return '연결 확인 중';\n    }\n\n    let avgRtt = 0;\n    let statCount = 0;\n\n    Object.values(stats).forEach(peerStats => {\n      if (peerStats.rtt) {\n        avgRtt += peerStats.rtt;\n        statCount++;\n      }\n    });\n\n    if (statCount > 0) {\n      avgRtt = Math.round(avgRtt / statCount);\n      return `${avgRtt}ms`;\n    }\n\n    return '연결 확인 중';\n  };\n\n  const getLanguageName = (code) => {\n    const languageNames = {\n      'ko': '한국어',\n      'en': 'English',\n      'ja': '日本語',\n      'zh': '中文',\n      'es': 'Español'\n    };\n    return languageNames[code] || code;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[var(--black-600)] flex flex-col\">\n      {/* 헤더 */}\n      <div className=\"bg-[var(--black-700)] px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <h1 className=\"text-white text-[18px] font-medium\">음성 세션</h1>\n            {connectionState === 'connected' && (\n              <div className=\"flex items-center gap-4 text-[var(--black-200)] text-sm\">\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-4 h-4\" />\n                  <span>{formatDuration(callDuration)}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  {getConnectionIcon()}\n                  <span>{getConnectionText()}</span>\n                </div>\n                <div className=\"text-sm text-[var(--black-50)]\">\n                  참가자: {participants.size + 1}명\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* 자막 및 언어 컨트롤 */}\n          <div className=\"flex items-center gap-4\">\n            {/* 자막 토글 */}\n            <button\n              onClick={handleToggleSubtitles}\n              className={`flex items-center gap-2 px-3 py-1.5 rounded-lg text-sm transition-colors ${\n                subtitlesEnabled \n                  ? 'bg-[var(--green-500)] text-white' \n                  : 'bg-[var(--black-600)] text-[var(--black-200)] hover:bg-[var(--black-500)]'\n              }`}\n              title={subtitlesEnabled ? '자막 끄기' : '자막 켜기'}\n            >\n              <MessageSquare className=\"w-4 h-4\" />\n              <span>자막</span>\n            </button>\n\n            {/* 번역 토글 */}\n            {subtitlesEnabled && (\n              <button\n                onClick={handleToggleTranslation}\n                className={`flex items-center gap-2 px-3 py-1.5 rounded-lg text-sm transition-colors ${\n                  translationEnabled \n                    ? 'bg-[var(--green-500)] text-white' \n                    : 'bg-[var(--black-600)] text-[var(--black-200)] hover:bg-[var(--black-500)]'\n                }`}\n                title={translationEnabled ? '번역 끄기' : '번역 켜기'}\n              >\n                <Languages className=\"w-4 h-4\" />\n                <span>번역</span>\n              </button>\n            )}\n\n            <div className=\"w-px h-6 bg-[var(--black-500)]\" />\n\n            {/* 현재 언어 표시 */}\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-[var(--black-200)] text-sm\">현재 언어:</span>\n              <span className=\"text-white text-sm font-medium\">\n                {getLanguageName(currentLanguage)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 메인 콘텐츠 */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"max-w-4xl w-full\">\n          {/* 연결 상태 표시 */}\n          <div className=\"text-center mb-12\">\n            {connectionState === 'new' && (\n              <div className=\"text-[#606060]\">\n                <Loader2 className=\"w-12 h-12 animate-spin mx-auto mb-4\" />\n                <p className=\"text-lg\">연결 준비 중...</p>\n              </div>\n            )}\n\n            {connectionState === 'connecting' && (\n              <div className=\"text-[var(--blue)]\">\n                <PhoneOutgoing className=\"w-16 h-16 animate-pulse mx-auto mb-4\" />\n                <p className=\"text-xl font-medium\">상대방과 연결 중입니다...</p>\n              </div>\n            )}\n\n            {connectionState === 'connected' && (\n              <div>\n                <div className=\"relative inline-block mb-6\">\n                  <div className=\"w-48 h-48 rounded-full bg-[var(--black-700)] flex items-center justify-center\">\n                    <Phone className=\"w-24 h-24 text-[var(--green-500)]\" />\n                  </div>\n                  <div className=\"absolute inset-0 rounded-full\">\n                    <div className=\"absolute inset-0 rounded-full border-4 border-[var(--green-500)] animate-ping\" />\n                    <div className=\"absolute inset-0 rounded-full border-4 border-[var(--green-500)]\" />\n                  </div>\n                </div>\n\n                <h2 className=\"text-white text-[28px] font-bold mb-4\">통화 연결됨</h2>\n                <p className=\"text-[var(--green-500)] text-lg mb-2\">\n                  {participants.size}명의 참가자와 통화 중\n                </p>\n\n                {/* 통화 품질 정보 */}\n                {connectionStats.detailedStats && Object.keys(connectionStats.detailedStats).length > 0 && (\n                  <div className=\"flex items-center justify-center gap-6 mt-6 text-sm text-[var(--black-200)]\">\n                    {Object.values(connectionStats.detailedStats).map((peerStats, index) => (\n                      <div key={index} className=\"flex items-center gap-4\">\n                        {peerStats.rtt && <div>지연시간: {Math.round(peerStats.rtt)}ms</div>}\n                        {peerStats.audioPacketsLost && peerStats.audioPacketsReceived && (\n                          <div>패킷 손실: {((peerStats.audioPacketsLost / peerStats.audioPacketsReceived) * 100).toFixed(1)}%</div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {connectionState === 'disconnected' && (\n              <div className=\"text-[var(--red)]\">\n                <Phone className=\"w-16 h-16 mx-auto mb-4\" />\n                <p className=\"text-xl font-medium\">통화가 종료되었습니다</p>\n              </div>\n            )}\n\n            {connectionState === 'failed' && (\n              <div className=\"text-[var(--red)]\">\n                <Phone className=\"w-16 h-16 mx-auto mb-4\" />\n                <p className=\"text-xl font-medium\">연결 실패</p>\n                <p className=\"text-sm mt-2\">네트워크 상태를 확인해주세요</p>\n              </div>\n            )}\n          </div>\n\n          {/* 에러 메시지 */}\n          {error && (\n            <div className=\"bg-[rgba(var(--red-rgb),0.1)] border border-[var(--red)] rounded-lg p-4 mb-8 text-center\">\n              <p className=\"text-[var(--red)]\">{error}</p>\n            </div>\n          )}\n\n          {/* 음성 웨이브 시각화 (연결됨 상태에서만) */}\n          {connectionState === 'connected' && (\n            <div className=\"bg-[var(--black-700)] rounded-lg p-6 mb-8\">\n              <div className=\"flex items-center justify-center h-24\">\n                <div className=\"flex items-center gap-1\">\n                  {[...Array(20)].map((_, i) => (\n                    <div\n                      key={i}\n                      className=\"w-2 bg-[var(--green-500)] rounded-full animate-pulse\"\n                      style={{\n                        height: `${Math.random() * 60 + 20}px`,\n                        animationDelay: `${i * 0.1}s`,\n                        animationDuration: '1.5s'\n                      }}\n                    />\n                  ))}\n                </div>\n              </div>\n              <p className=\"text-center text-[var(--black-200)] text-sm mt-4\">\n                음성 통화 진행 중...\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 컨트롤 바 */}\n      <div className=\"bg-[var(--black-600)] p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <VideoControls\n            isMuted={!isAudioEnabled}\n            onToggleMute={handleToggleAudio}\n            onEndCall={handleEndCall}\n            onToggleLanguage={handleToggleLanguage}\n            currentLanguage={currentLanguage}\n            showVideo={false}\n            showScreenShare={false}\n            showLanguageToggle={true}\n            showFullscreen={false}\n            showSettings={false}\n            showParticipants={false}\n            variant=\"dark\"\n          />\n        </div>\n      </div>\n\n      {/* 자막 오버레이 */}\n      {subtitlesEnabled && connectionState === 'connected' && (\n        <div className=\"fixed inset-0 pointer-events-none z-40\">\n          <TranslatedSubtitles\n            localStream={localStream}\n            remoteStream={remoteStreams.size > 0 ? Array.from(remoteStreams.values())[0] : null}\n            sourceLanguage=\"auto\"\n            defaultTargetLanguage={currentLanguage}\n            showOriginal={true}\n            showTranslation={translationEnabled}\n            position=\"bottom\"\n          />\n        </div>\n      )}\n\n      {/* 실시간 자막 패널 */}\n      <div className=\"fixed top-4 right-4 w-96 z-50 pointer-events-auto\">\n        <RealtimeSubtitlePanel\n          localStream={localStream}\n          remoteStream={remoteStreams.size > 0 ? Array.from(remoteStreams.values())[0] : null}\n        />\n      </div>\n\n      {/* 숨겨진 오디오 요소 (로컬 스트림용) */}\n      <audio ref={localAudioRef} muted autoPlay style={{ display: 'none' }} />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/GroupAudioSession.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'connectionState' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":34,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"connectionState"},"fix":{"range":[990,1015],"text":""},"desc":"Remove unused variable 'connectionState'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'participants'. Either include it or remove the dependency array.","line":117,"column":8,"nodeType":"ArrayExpression","endLine":117,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [sessionId, startSession, activeSession, isMuted, participants]","fix":{"range":[3449,3498],"text":"[sessionId, startSession, activeSession, isMuted, participants]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n    Mic,\n    MicOff,\n    Phone,\n    PhoneOff,\n    Globe,\n    Volume2,\n    VolumeX,\n    Users,\n    Activity\n} from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport useSessionStore from '../../store/sessionStore';\nimport useProfileStore from '../../store/profileStore';\n\nexport default function GroupAudioSession() {\n    const navigate = useNavigate();\n    const { sessionId } = useParams();\n\n    const [isMuted, setIsMuted] = useState(false);\n    const [speakerMuted, setSpeakerMuted] = useState(false);\n    const [callDuration, setCallDuration] = useState(0);\n    const [currentLanguage, setCurrentLanguage] = useState('en');\n    const [activeSpeaker, setActiveSpeaker] = useState(null);\n    const [audioLevels, setAudioLevels] = useState({});\n\n    const timerRef = useRef(null);\n\n    const {\n        activeSession,\n        sessionStatus,\n        connectionState,\n        startSession,\n        endSession,\n        toggleAudio,\n        switchLanguage\n    } = useSessionStore();\n\n    const { name: userName, profileImage: userProfileImage } = useProfileStore();\n\n    // 더미 참가자 데이터 (실제로는 WebRTC에서 가져와야 함)\n    const participants = [\n        {\n            id: 'user1',\n            name: userName || \"나\",\n            profileImage: userProfileImage || \"/assets/basicProfilePic.png\",\n            nativeLanguage: \"Korean\",\n            learningLanguage: \"English\",\n            level: \"B2\",\n            isMuted: isMuted,\n            isLocal: true\n        },\n        {\n            id: 'user2',\n            name: \"Emma Wilson\",\n            profileImage: \"/assets/basicProfilePic.png\",\n            nativeLanguage: \"English\",\n            learningLanguage: \"Korean\",\n            level: \"Intermediate\",\n            isMuted: false,\n            isLocal: false\n        },\n        {\n            id: 'user3',\n            name: \"John Smith\",\n            profileImage: \"/assets/basicProfilePic.png\",\n            nativeLanguage: \"English\",\n            learningLanguage: \"Korean\",\n            level: \"Beginner\",\n            isMuted: true,\n            isLocal: false\n        },\n        {\n            id: 'user4',\n            name: \"Sarah Johnson\",\n            profileImage: \"/assets/basicProfilePic.png\",\n            nativeLanguage: \"English\",\n            learningLanguage: \"Korean\",\n            level: \"Advanced\",\n            isMuted: false,\n            isLocal: false\n        }\n    ];\n\n    useEffect(() => {\n        // 세션 시작\n        if (sessionId && !activeSession) {\n            startSession(sessionId);\n        }\n\n        // 오디오 레벨 시뮬레이션\n        const audioInterval = setInterval(() => {\n            const newLevels = {};\n            participants.forEach(p => {\n                if (!p.isMuted) {\n                    newLevels[p.id] = Math.random() * 100;\n                } else {\n                    newLevels[p.id] = 0;\n                }\n            });\n            setAudioLevels(newLevels);\n\n            // 활성 스피커 결정\n            const loudestUser = Object.entries(newLevels)\n                .sort(([, a], [, b]) => b - a)[0];\n            setActiveSpeaker(loudestUser && loudestUser[1] > 30 ? loudestUser[0] : null);\n        }, 200);\n\n        return () => {\n            clearInterval(audioInterval);\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [sessionId, startSession, activeSession, isMuted]);\n\n    useEffect(() => {\n        // 통화 시간 타이머\n        if (sessionStatus === 'connected' && !timerRef.current) {\n            timerRef.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n            }, 1000);\n        } else if (sessionStatus !== 'connected' && timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n        }\n\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [sessionStatus]);\n\n    const formatDuration = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const mins = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${mins}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    const handleToggleMute = () => {\n        setIsMuted(!isMuted);\n        toggleAudio();\n    };\n\n    const handleToggleSpeaker = () => {\n        setSpeakerMuted(!speakerMuted);\n    };\n\n    const handleToggleLanguage = () => {\n        const newLang = currentLanguage === 'en' ? 'ko' : 'en';\n        setCurrentLanguage(newLang);\n        switchLanguage();\n    };\n\n    const handleEndCall = () => {\n        if (window.confirm('통화를 종료하시겠습니까?')) {\n            endSession();\n            navigate('/sessions');\n        }\n    };\n\n    const ParticipantCard = ({ participant }) => {\n        const audioLevel = audioLevels[participant.id] || 0;\n        const isSpeaking = activeSpeaker === participant.id;\n\n        return (\n            <div className={`bg-white rounded-[20px] p-6 border-2 transition-all duration-200 ${isSpeaking ? 'border-[var(--green-500)] shadow-lg scale-105' : 'border-[var(--black-50)]'\n                }`}>\n                <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"relative\">\n                        <img\n                            src={participant.profileImage}\n                            alt={participant.name}\n                            className=\"w-16 h-16 rounded-full object-cover\"\n                        />\n                        {/* Speaking Indicator */}\n                        {isSpeaking && (\n                            <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-[var(--green-500)] rounded-full animate-pulse\" />\n                        )}\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                        {participant.isMuted ? (\n                            <MicOff className=\"w-5 h-5 text-[var(--red)]\" />\n                        ) : (\n                            <Mic className=\"w-5 h-5 text-[var(--black-300)]\" />\n                        )}\n                    </div>\n                </div>\n\n                <h3 className=\"text-[16px] font-semibold text-[var(--black-500)] mb-1\">\n                    {participant.name}\n                    {participant.isLocal && \" (나)\"}\n                </h3>\n                <p className=\"text-[12px] text-[var(--black-300)] mb-3\">\n                    {participant.nativeLanguage} → {participant.learningLanguage}\n                </p>\n\n                {/* Audio Level Indicator */}\n                <div className=\"h-2 bg-[var(--neutral-100)] rounded-full overflow-hidden\">\n                    <div\n                        className=\"h-full bg-[var(--green-500)] transition-all duration-200\"\n                        style={{ width: `${audioLevel}%` }}\n                    />\n                </div>\n\n                {/* Level Badge */}\n                <div className=\"mt-3 inline-block px-3 py-1 bg-[var(--neutral-100)] rounded-full\">\n                    <span className=\"text-[12px] font-medium text-[var(--black-300)]\">\n                        {participant.level}\n                    </span>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"min-h-screen page-bg\">\n            {/* Header */}\n            <div className=\"bg-white border-b border-[var(--black-50)] px-6 py-4\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                        <h1 className=\"text-[20px] font-bold text-[var(--black-500)]\">그룹 오디오 세션</h1>\n                        <div className=\"flex items-center space-x-2\">\n                            <Users className=\"w-4 h-4 text-[var(--black-200)]\" />\n                            <span className=\"text-[14px] text-[var(--black-200)]\">\n                                {participants.length}명 참가 중\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-[18px] font-mono text-[var(--black-500)]\">\n                            {formatDuration(callDuration)}\n                        </div>\n                        {sessionStatus === 'connected' && (\n                            <div className=\"flex items-center space-x-2\">\n                                <Activity className=\"w-4 h-4 text-[var(--green-500)]\" />\n                                <span className=\"text-[14px] text-[var(--green-500)]\">연결됨</span>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"max-w-6xl mx-auto p-6\">\n                {/* Session Info */}\n                <div className=\"bg-white rounded-[20px] p-6 mb-6 border border-[var(--black-50)]\">\n                    <div className=\"flex items-center justify-between\">\n                        <div>\n                            <h2 className=\"text-[18px] font-semibold text-[var(--black-500)] mb-2\">\n                                English Conversation Practice\n                            </h2>\n                            <p className=\"text-[14px] text-[var(--black-300)]\">\n                                자유롭게 대화하며 언어를 연습하세요\n                            </p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                            <Globe className=\"w-5 h-5 text-[var(--black-300)]\" />\n                            <span className=\"text-[14px] font-medium text-[var(--black-500)]\">\n                                {currentLanguage === 'en' ? 'English' : '한국어'}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Participants Grid */}\n                <div className=\"grid grid-cols-2 gap-4 mb-8\">\n                    {participants.map(participant => (\n                        <ParticipantCard key={participant.id} participant={participant} />\n                    ))}\n                </div>\n\n                {/* Control Panel */}\n                <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                    <div className=\"flex items-center justify-center space-x-4\">\n                        {/* Mute Button */}\n                        <button\n                            onClick={handleToggleMute}\n                            className={`p-4 rounded-full transition-all duration-200 ${isMuted\n                                ? 'bg-[var(--red)] hover:bg-[var(--red-600)]'\n                                : 'bg-[var(--neutral-100)] hover:bg-[var(--black-50)]'\n                                }`}\n                        >\n                            {isMuted ? (\n                                <MicOff className=\"w-6 h-6 text-white\" />\n                            ) : (\n                                <Mic className=\"w-6 h-6 text-[var(--black-500)]\" />\n                            )}\n                        </button>\n\n                        {/* Speaker Button */}\n                        <button\n                            onClick={handleToggleSpeaker}\n                            className={`p-4 rounded-full transition-all duration-200 ${speakerMuted\n                                ? 'bg-[var(--red)] hover:bg-[var(--red-600)]'\n                                : 'bg-[var(--neutral-100)] hover:bg-[var(--black-50)]'\n                                }`}\n                        >\n                            {speakerMuted ? (\n                                <VolumeX className=\"w-6 h-6 text-white\" />\n                            ) : (\n                                <Volume2 className=\"w-6 h-6 text-[var(--black-500)]\" />\n                            )}\n                        </button>\n\n                        {/* Language Toggle */}\n                        <button\n                            onClick={handleToggleLanguage}\n                            className=\"p-4 bg-[var(--neutral-100)] hover:bg-[var(--black-50)] rounded-full transition-all duration-200\"\n                        >\n                            <Globe className=\"w-6 h-6 text-[var(--black-500)]\" />\n                        </button>\n\n                        {/* End Call Button */}\n                        <button\n                            onClick={handleEndCall}\n                            className=\"p-4 bg-[var(--red)] hover:bg-[var(--red-600)] rounded-full transition-all duration-200\"\n                        >\n                            <PhoneOff className=\"w-6 h-6 text-white\" />\n                        </button>\n                    </div>\n\n                    {/* Status Text */}\n                    <div className=\"text-center mt-4\">\n                        {isMuted && (\n                            <p className=\"text-[14px] text-[var(--red)]\">마이크가 음소거되었습니다</p>\n                        )}\n                        {speakerMuted && (\n                            <p className=\"text-[14px] text-[var(--red)]\">스피커가 음소거되었습니다</p>\n                        )}\n                    </div>\n                </div>\n\n                {/* Connection Status */}\n                {sessionStatus === 'connecting' && (\n                    <div className=\"fixed inset-0 flex items-center justify-center z-50 overlay-strong\">\n                        <div className=\"bg-white rounded-[20px] p-8 text-center\">\n                            <div className=\"inline-flex items-center space-x-2 mb-4\">\n                                <div className=\"w-3 h-3 bg-[var(--warning-yellow)] rounded-full animate-pulse\" />\n                                <p className=\"text-[18px] text-[var(--warning-yellow)]\">연결 중...</p>\n                            </div>\n                            <p className=\"text-[14px] text-[var(--black-300)]\">\n                                그룹 통화를 준비하고 있습니다\n                            </p>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/GroupVideoSession.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'connectionState' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":35,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"connectionState"},"fix":{"range":[1154,1179],"text":""},"desc":"Remove unused variable 'connectionState'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'sessionSettings' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"sessionSettings"},"fix":{"range":[1287,1312],"text":""},"desc":"Remove unused variable 'sessionSettings'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport {\n    Users,\n    Mic,\n    MicOff,\n    MoreVertical,\n    Grid3x3,\n    Presentation,\n    Pin\n} from 'lucide-react';\nimport VideoControls from '../../components/VideoControls';\nimport useSessionStore from '../../store/sessionStore';\nimport useProfileStore from '../../store/profileStore';\n\nexport default function GroupVideoSession() {\n    const navigate = useNavigate();\n    const { sessionId } = useParams();\n\n    const [isMuted, setIsMuted] = useState(false);\n    const [isVideoOn, setIsVideoOn] = useState(true);\n    const [isScreenSharing, setIsScreenSharing] = useState(false);\n    const [currentLanguage, setCurrentLanguage] = useState('en');\n    const [callDuration, setCallDuration] = useState(0);\n    const [pinnedUserId, setPinnedUserId] = useState(null);\n    const [layoutMode, setLayoutMode] = useState('grid'); // grid or speaker\n    const [activeSpeaker, setActiveSpeaker] = useState(null);\n\n    const timerRef = useRef(null);\n    const containerRef = useRef(null);\n\n    const {\n        activeSession,\n        sessionStatus,\n        connectionState,\n        startSession,\n        endSession,\n        toggleAudio,\n        toggleVideo,\n        switchLanguage,\n        sessionSettings\n    } = useSessionStore();\n\n    const { name: userName, profileImage: userProfileImage } = useProfileStore();\n\n    // 더미 참가자 데이터 (실제로는 WebRTC에서 가져와야 함)\n    const participants = [\n        {\n            id: 'user1',\n            name: userName || \"나\",\n            profileImage: userProfileImage || \"/assets/basicProfilePic.png\",\n            isVideoOn: isVideoOn,\n            isMuted: isMuted,\n            isSpeaking: false,\n            isLocal: true\n        },\n        {\n            id: 'user2',\n            name: \"Emma Wilson\",\n            profileImage: \"/assets/basicProfilePic.png\",\n            isVideoOn: true,\n            isMuted: false,\n            isSpeaking: activeSpeaker === 'user2',\n            isLocal: false\n        },\n        {\n            id: 'user3',\n            name: \"John Smith\",\n            profileImage: \"/assets/basicProfilePic.png\",\n            isVideoOn: true,\n            isMuted: true,\n            isSpeaking: false,\n            isLocal: false\n        },\n        {\n            id: 'user4',\n            name: \"Sarah Johnson\",\n            profileImage: \"/assets/basicProfilePic.png\",\n            isVideoOn: false,\n            isMuted: false,\n            isSpeaking: activeSpeaker === 'user4',\n            isLocal: false\n        }\n    ];\n\n    useEffect(() => {\n        // 세션 시작\n        if (sessionId && !activeSession) {\n            startSession(sessionId);\n        }\n\n        // 랜덤하게 활성 스피커 변경 (시뮬레이션)\n        const speakerInterval = setInterval(() => {\n            const speakers = [null, 'user2', 'user4'];\n            const randomSpeaker = speakers[Math.floor(Math.random() * speakers.length)];\n            setActiveSpeaker(randomSpeaker);\n        }, 3000);\n\n        return () => {\n            clearInterval(speakerInterval);\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [sessionId, startSession, activeSession]);\n\n    useEffect(() => {\n        // 통화 시간 타이머\n        if (sessionStatus === 'connected' && !timerRef.current) {\n            timerRef.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n            }, 1000);\n        } else if (sessionStatus !== 'connected' && timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n        }\n\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [sessionStatus]);\n\n    const formatDuration = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const mins = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${mins}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    const handleToggleMute = () => {\n        setIsMuted(!isMuted);\n        toggleAudio();\n    };\n\n    const handleToggleVideo = () => {\n        setIsVideoOn(!isVideoOn);\n        toggleVideo();\n    };\n\n    const handleToggleScreenShare = () => {\n        setIsScreenSharing(!isScreenSharing);\n        // 실제 화면 공유 로직 구현 필요\n    };\n\n    const handleToggleLanguage = () => {\n        const newLang = currentLanguage === 'en' ? 'ko' : 'en';\n        setCurrentLanguage(newLang);\n        switchLanguage();\n    };\n\n    const handleEndCall = () => {\n        if (window.confirm('통화를 종료하시겠습니까?')) {\n            endSession();\n            navigate('/sessions');\n        }\n    };\n\n    const handlePinParticipant = (userId) => {\n        setPinnedUserId(pinnedUserId === userId ? null : userId);\n    };\n\n    const handleToggleLayout = () => {\n        setLayoutMode(layoutMode === 'grid' ? 'speaker' : 'grid');\n    };\n\n    const VideoTile = ({ participant, isLarge = false }) => (\n        <div\n            className={`relative bg-[var(--black-600)] rounded-lg overflow-hidden group ${isLarge ? 'h-full' : ''\n                } ${participant.isSpeaking ? 'ring-2 ring-[var(--green-500)]' : ''}`}\n        >\n            {/* Video Stream or Avatar */}\n            {participant.isVideoOn ? (\n                <div className=\"w-full h-full bg-[var(--black-400)]\">\n                    {/* 실제 비디오 스트림 */}\n                </div>\n            ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-[var(--black-600)]\">\n                    <img\n                        src={participant.profileImage}\n                        alt={participant.name}\n                        className=\"w-20 h-20 rounded-full object-cover\"\n                    />\n                </div>\n            )}\n\n            {/* Participant Info */}\n            <div className=\"absolute bottom-0 left-0 right-0 p-3 \n      bg-gradient-to-t from-black/70 to-transparent\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-[14px] text-white font-medium\">\n                            {participant.name}\n                            {participant.isLocal && \" (나)\"}\n                        </span>\n                        {participant.isMuted && (\n                            <MicOff className=\"w-4 h-4 text-[var(--red)]\" />\n                        )}\n                    </div>\n                    {!participant.isLocal && (\n                        <button\n                            onClick={() => handlePinParticipant(participant.id)}\n                            className=\"p-1 hover:bg-white/20 rounded opacity-0 group-hover:opacity-100 transition-opacity\"\n                        >\n                            <Pin className={`w-4 h-4 ${pinnedUserId === participant.id ? 'text-[var(--green-500)]' : 'text-white'\n                                }`} />\n                        </button>\n                    )}\n                </div>\n            </div>\n\n            {/* Speaking Indicator */}\n            {participant.isSpeaking && (\n                <div className=\"absolute top-2 right-2\">\n                    <div className=\"flex space-x-1\">\n                        {[...Array(3)].map((_, i) => (\n                            <div\n                                key={i}\n                                className=\"w-1 h-3 bg-[var(--green-500)] rounded-full animate-pulse\"\n                                style={{ animationDelay: `${i * 0.1}s` }}\n                            />\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n\n    const renderGridLayout = () => (\n        <div className=\"grid grid-cols-2 gap-4 h-full p-6\">\n            {participants.map(participant => (\n                <VideoTile key={participant.id} participant={participant} />\n            ))}\n        </div>\n    );\n\n    const renderSpeakerLayout = () => {\n        const mainSpeaker = pinnedUserId\n            ? participants.find(p => p.id === pinnedUserId)\n            : participants.find(p => p.isSpeaking) || participants[0];\n\n        const otherParticipants = participants.filter(p => p.id !== mainSpeaker.id);\n\n        return (\n            <div className=\"flex h-full p-6\">\n                {/* Main Speaker */}\n                <div className=\"flex-1 mr-4\">\n                    <VideoTile participant={mainSpeaker} isLarge />\n                </div>\n\n                {/* Other Participants */}\n                <div className=\"w-64 flex flex-col space-y-4\">\n                    {otherParticipants.map(participant => (\n                        <div key={participant.id} className=\"h-48\">\n                            <VideoTile participant={participant} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div ref={containerRef} className=\"min-h-screen bg-[var(--black-700)] text-white flex flex-col\">\n            {/* Header */}\n            <div className=\"bg-[var(--black-600)] border-b border-[var(--black-400)] px-6 py-4 flex-shrink-0\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                        <h1 className=\"text-[18px] font-bold\">그룹 비디오 세션</h1>\n                        <div className=\"flex items-center space-x-2\">\n                            <Users className=\"w-4 h-4 text-[var(--black-200)]\" />\n                            <span className=\"text-[14px] text-[var(--black-200)]\">\n                                {participants.length}명 참가 중\n                            </span>\n                        </div>\n                        {sessionStatus === 'connected' && (\n                            <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-2 h-2 bg-[var(--green-500)] rounded-full animate-pulse\" />\n                                <span className=\"text-[14px] text-[var(--green-500)]\">연결됨</span>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-[18px] font-mono\">\n                            {formatDuration(callDuration)}\n                        </div>\n                        <div className=\"text-[14px] text-[var(--black-200)]\">\n                            {currentLanguage === 'en' ? 'English' : '한국어'}\n                        </div>\n                        <button\n                            onClick={handleToggleLayout}\n                            className=\"p-2 hover:bg-[var(--black-400)] rounded-lg transition-colors\"\n                            title={layoutMode === 'grid' ? '스피커 뷰로 전환' : '그리드 뷰로 전환'}\n                        >\n                            {layoutMode === 'grid' ? (\n                                <Presentation className=\"w-5 h-5\" />\n                            ) : (\n                                <Grid3x3 className=\"w-5 h-5\" />\n                            )}\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            {/* Main Video Area */}\n            <div className=\"flex-1 relative overflow-hidden\">\n                {layoutMode === 'grid' ? renderGridLayout() : renderSpeakerLayout()}\n\n                {/* Screen Share Indicator */}\n                {isScreenSharing && (\n                    <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2 \n          bg-[var(--green-500)] text-white px-4 py-2 rounded-full flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\" />\n                        <span className=\"text-[14px] font-medium\">화면 공유 중</span>\n                    </div>\n                )}\n\n                {/* Connection Status */}\n                {sessionStatus === 'connecting' && (\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/50\">\n                        <div className=\"text-center\">\n                            <div className=\"inline-flex items-center space-x-2 mb-4\">\n                                <div className=\"w-3 h-3 bg-[var(--warning-yellow)] rounded-full animate-pulse\" />\n                                <p className=\"text-[18px] text-[var(--warning-yellow)]\">연결 중...</p>\n                            </div>\n                            <p className=\"text-[14px] text-[var(--black-200)]\">\n                                그룹 화상 통화를 준비하고 있습니다\n                            </p>\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {/* Control Bar */}\n            <div className=\"bg-[var(--black-600)] border-t border-[var(--black-400)] p-6 flex-shrink-0\">\n                <VideoControls\n                    isMuted={isMuted}\n                    isVideoOn={isVideoOn}\n                    isScreenSharing={isScreenSharing}\n                    currentLanguage={currentLanguage}\n                    onToggleMute={handleToggleMute}\n                    onToggleVideo={handleToggleVideo}\n                    onToggleScreenShare={handleToggleScreenShare}\n                    onToggleLanguage={handleToggleLanguage}\n                    onEndCall={handleEndCall}\n                    showVideo={true}\n                    showScreenShare={true}\n                    showLanguageToggle={true}\n                    showSettings={true}\n                    showParticipants={true}\n                    participantCount={participants.length}\n                    variant=\"dark\"\n                />\n            </div>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/SessionCalendar.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'viewMode' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"viewMode"},"fix":{"range":[563,571],"text":""},"desc":"Remove unused variable 'viewMode'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setViewMode' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":21,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setViewMode"},"fix":{"range":[571,584],"text":""},"desc":"Remove unused variable 'setViewMode'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'upcomingSessions' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":25,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"upcomingSessions"},"fix":{"range":[650,672],"text":""},"desc":"Remove unused variable 'upcomingSessions'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'addSession' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":27,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"addSession"},"fix":{"range":[698,714],"text":""},"desc":"Remove unused variable 'addSession'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Calendar as CalendarIcon,\n  Clock,\n  Video,\n  Mic,\n  Users,\n  Plus,\n  ChevronLeft,\n  ChevronRight,\n  Filter\n} from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport useSessionStore from '../../store/sessionStore';\n\nexport default function SessionCalendar() {\n  const navigate = useNavigate();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [viewMode, setViewMode] = useState('month'); // month, week, day\n\n  const {\n    sessions,\n    upcomingSessions,\n    loadUpcomingSessions,\n    addSession\n  } = useSessionStore();\n\n  useEffect(() => {\n    loadUpcomingSessions();\n  }, [loadUpcomingSessions]);\n\n  const getDaysInMonth = (date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n\n    // 이전 달 날짜들\n    const prevMonthLastDay = new Date(year, month, 0).getDate();\n    for (let i = startingDayOfWeek - 1; i >= 0; i--) {\n      days.push({\n        date: new Date(year, month - 1, prevMonthLastDay - i),\n        isCurrentMonth: false\n      });\n    }\n\n    // 현재 달 날짜들\n    for (let i = 1; i <= daysInMonth; i++) {\n      days.push({\n        date: new Date(year, month, i),\n        isCurrentMonth: true\n      });\n    }\n\n    // 다음 달 날짜들\n    const remainingDays = 42 - days.length; // 6주 * 7일 = 42\n    for (let i = 1; i <= remainingDays; i++) {\n      days.push({\n        date: new Date(year, month + 1, i),\n        isCurrentMonth: false\n      });\n    }\n\n    return days;\n  };\n\n  const getSessionsForDate = (date) => {\n    return sessions.filter(session => {\n      const sessionDate = new Date(session.date);\n      return sessionDate.getFullYear() === date.getFullYear() &&\n        sessionDate.getMonth() === date.getMonth() &&\n        sessionDate.getDate() === date.getDate();\n    });\n  };\n\n  const formatTime = (date) => {\n    return date.toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    });\n  };\n\n  const navigateMonth = (direction) => {\n    const newDate = new Date(currentDate);\n    newDate.setMonth(currentDate.getMonth() + direction);\n    setCurrentDate(newDate);\n  };\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n  };\n\n  const handleScheduleNew = () => {\n    navigate('/session/schedule/new');\n  };\n\n  const SessionCard = ({ session }) => (\n    <div\n      className=\"bg-white rounded-lg p-3 mb-2 border border-[var(--black-50)] \n      hover:shadow-md transition-shadow cursor-pointer\"\n      onClick={() => navigate(`/session/${session.type}/${session.id}`)}\n    >\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center space-x-2\">\n          <img\n            src={session.partnerImage}\n            alt={session.partnerName}\n            className=\"w-8 h-8 rounded-full object-cover\"\n          />\n          <div>\n            <p className=\"text-[12px] font-semibold text-[var(--black-500)]\">\n              {session.partnerName}\n            </p>\n            <p className=\"text-[10px] text-[var(--black-300)]\">\n              {formatTime(session.date)} • {session.duration}분\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          {session.type === 'video' ? (\n            <Video className=\"w-4 h-4 text-[var(--black-300)]\" />\n          ) : (\n            <Mic className=\"w-4 h-4 text-[var(--black-300)]\" />\n          )}\n          {session.participants && (\n            <div className=\"flex items-center space-x-1\">\n              <Users className=\"w-3 h-3 text-[var(--black-300)]\" />\n              <span className=\"text-[10px] text-[var(--black-300)]\">{session.participants}</span>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <span className={`text-[10px] px-2 py-0.5 rounded-full ${session.status === 'completed'\n          ? 'bg-[rgba(0,196,113,0.12)] text-[var(--green-700)]'\n          : 'bg-[rgba(66,133,244,0.12)] text-[var(--blue)]'\n          }`}>\n          {session.status === 'completed' ? '완료' : '예정'}\n        </span>\n        <span className=\"text-[10px] text-[var(--black-200)]\">\n          {session.language === 'en' ? 'English' : '한국어'}\n        </span>\n      </div>\n    </div>\n  );\n\n  const days = getDaysInMonth(currentDate);\n  const selectedDateSessions = getSessionsForDate(selectedDate);\n\n  return (\n    <div className=\"min-h-screen page-bg\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-[#E7E7E7] px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-[20px] font-bold text-[#111111]\">세션 캘린더</h1>\n          <CommonButton\n            onClick={handleScheduleNew}\n            variant=\"primary\"\n            size=\"small\"\n          >\n            <Plus className=\"w-4 h-4 mr-1\" />\n            새 세션\n          </CommonButton>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Calendar */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n              {/* Calendar Header */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-[18px] font-bold text-[var(--black-500)]\">\n                  {currentDate.toLocaleDateString('ko-KR', {\n                    year: 'numeric',\n                    month: 'long'\n                  })}\n                </h2>\n                <div className=\"flex items-center space-x-2\">\n                  <button\n                    onClick={() => navigateMonth(-1)}\n                    className=\"p-2 hover:bg-[var(--neutral-100)] rounded-lg transition-colors\"\n                  >\n                    <ChevronLeft className=\"w-5 h-5 text-[#606060]\" />\n                  </button>\n                  <button\n                    onClick={() => setCurrentDate(new Date())}\n                    className=\"px-3 py-1 text-[14px] text-[var(--black-300)] hover:bg-[var(--neutral-100)] \n                    rounded-lg transition-colors\"\n                  >\n                    오늘\n                  </button>\n                  <button\n                    onClick={() => navigateMonth(1)}\n                    className=\"p-2 hover:bg-[var(--neutral-100)] rounded-lg transition-colors\"\n                  >\n                    <ChevronRight className=\"w-5 h-5 text-[#606060]\" />\n                  </button>\n                </div>\n              </div>\n\n              {/* Day Headers */}\n              <div className=\"grid grid-cols-7 mb-2\">\n                {['일', '월', '화', '수', '목', '금', '토'].map(day => (\n                  <div key={day} className=\"text-center py-2\">\n                    <span className=\"text-[12px] font-medium text-[var(--black-200)]\">{day}</span>\n                  </div>\n                ))}\n              </div>\n\n              {/* Calendar Grid */}\n              <div className=\"grid grid-cols-7 gap-1\">\n                {days.map((day, index) => {\n                  const isToday = day.date.toDateString() === new Date().toDateString();\n                  const isSelected = day.date.toDateString() === selectedDate.toDateString();\n                  const sessions = getSessionsForDate(day.date);\n\n                  return (\n                    <div\n                      key={index}\n                      onClick={() => day.isCurrentMonth && handleDateClick(day.date)}\n                      className={`\n                        min-h-[80px] p-2 border border-[var(--black-50)] rounded-lg cursor-pointer\n                        transition-all duration-200\n                        ${!day.isCurrentMonth ? 'page-bg text-[var(--black-200)]' : 'bg-white'}\n                        ${isSelected ? 'ring-2 ring-[var(--green-500)]' : ''}\n                        ${day.isCurrentMonth ? 'hover:bg-[var(--neutral-100)]' : ''}\n                      `}\n                    >\n                      <div className={`text-[14px] font-medium mb-1 ${isToday ? 'text-[var(--green-500)]' : day.isCurrentMonth ? 'text-[var(--black-500)]' : ''\n                        }`}>\n                        {day.date.getDate()}\n                      </div>\n\n                      {/* Session Indicators */}\n                      {sessions.length > 0 && (\n                        <div className=\"space-y-1\">\n                          {sessions.slice(0, 2).map((session, idx) => (\n                            <div\n                              key={idx}\n                              className={`h-1.5 rounded-full ${session.status === 'completed'\n                                ? 'bg-[var(--green-500)]'\n                                : 'bg-[var(--blue)]'\n                                }`}\n                            />\n                          ))}\n                          {sessions.length > 2 && (\n                            <span className=\"text-[10px] text-[var(--black-200)]\">\n                              +{sessions.length - 2}\n                            </span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* Selected Date Sessions */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n              <h3 className=\"text-[16px] font-bold text-[var(--black-500)] mb-4\">\n                {selectedDate.toLocaleDateString('ko-KR', {\n                  month: 'long',\n                  day: 'numeric',\n                  weekday: 'long'\n                })}\n              </h3>\n\n              {selectedDateSessions.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {selectedDateSessions.map(session => (\n                    <SessionCard key={session.id} session={session} />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <CalendarIcon className=\"w-12 h-12 text-[var(--black-50)] mx-auto mb-3\" />\n                  <p className=\"text-[14px] text-[var(--black-200)] mb-4\">\n                    예정된 세션이 없습니다\n                  </p>\n                  <CommonButton\n                    onClick={handleScheduleNew}\n                    variant=\"secondary\"\n                    size=\"small\"\n                  >\n                    세션 예약하기\n                  </CommonButton>\n                </div>\n              )}\n            </div>\n\n            {/* Session Stats */}\n            <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)] mt-4\">\n              <h3 className=\"text-[16px] font-bold text-[var(--black-500)] mb-4\">\n                이번 달 통계\n              </h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-[14px] text-[var(--black-300)]\">예정된 세션</span>\n                  <span className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                    {sessions.filter(s => s.status === 'scheduled').length}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-[14px] text-[var(--black-300)]\">완료된 세션</span>\n                  <span className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                    {sessions.filter(s => s.status === 'completed').length}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-[14px] text-[var(--black-300)]\">총 학습시간</span>\n                  <span className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                    {sessions.reduce((acc, s) => acc + s.duration, 0)}분\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/SessionCreate.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":62,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Video,\n  Mic,\n  Users,\n  Clock,\n  Globe,\n  Settings,\n  ChevronLeft,\n  Loader2,\n  AlertCircle,\n  CheckCircle,\n  Copy,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport { webrtcAPI } from '../../api/webrtc';\nimport { log } from '../../utils/logger';\n\nexport default function SessionCreate() {\n  const navigate = useNavigate();\n  const [isCreating, setIsCreating] = useState(false);\n  const [createdRoom, setCreatedRoom] = useState(null);\n  const [error, setError] = useState('');\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  // 세션 설정\n  const [sessionConfig, setSessionConfig] = useState({\n    roomType: 'audio', // 'audio' | 'video'\n    maxParticipants: 2,\n    title: '',\n    description: '',\n    language: 'ko', // 기본 언어\n    isPrivate: false,\n    allowRecording: true,\n    autoTranscription: false\n  });\n\n  // 매체 권한 확인\n  const [mediaPermissions, setMediaPermissions] = useState({\n    audio: null,\n    video: null,\n    checked: false\n  });\n\n  useEffect(() => {\n    checkMediaPermissions();\n  }, []);\n\n  // 미디어 권한 확인\n  const checkMediaPermissions = async () => {\n    try {\n      const permissions = await navigator.permissions.query({ name: 'microphone' });\n      const audioAllowed = permissions.state === 'granted';\n      \n      let videoAllowed = false;\n      try {\n        const cameraPermissions = await navigator.permissions.query({ name: 'camera' });\n        videoAllowed = cameraPermissions.state === 'granted';\n      } catch (err) {\n        // 카메라 권한 확인 실패 시 getUserMedia로 테스트\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n          stream.getTracks().forEach(track => track.stop());\n          videoAllowed = true;\n        } catch {\n          videoAllowed = false;\n        }\n      }\n\n      setMediaPermissions({\n        audio: audioAllowed,\n        video: videoAllowed,\n        checked: true\n      });\n    } catch (err) {\n      console.error('Failed to check media permissions:', err);\n      setMediaPermissions({\n        audio: false,\n        video: false,\n        checked: true\n      });\n    }\n  };\n\n  // 권한 요청\n  const requestPermissions = async () => {\n    try {\n      const constraints = {\n        audio: true,\n        video: sessionConfig.roomType === 'video'\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      \n      // 즉시 스트림 정리\n      stream.getTracks().forEach(track => track.stop());\n      \n      // 권한 상태 업데이트\n      await checkMediaPermissions();\n      \n      return true;\n    } catch (err) {\n      console.error('Permission request failed:', err);\n      setError('미디어 권한이 필요합니다. 브라우저 설정에서 마이크/카메라 접근을 허용해주세요.');\n      return false;\n    }\n  };\n\n  // 세션 생성\n  const handleCreateSession = async () => {\n    setIsCreating(true);\n    setError('');\n\n    try {\n      // 1. 미디어 권한 확인\n      const hasAudioPermission = mediaPermissions.audio;\n      const hasVideoPermission = sessionConfig.roomType === 'video' ? mediaPermissions.video : true;\n\n      if (!hasAudioPermission || !hasVideoPermission) {\n        const granted = await requestPermissions();\n        if (!granted) {\n          setIsCreating(false);\n          return;\n        }\n      }\n\n      // 2. 세션 설정 검증\n      if (!sessionConfig.title.trim()) {\n        setError('세션 제목을 입력해주세요.');\n        setIsCreating(false);\n        return;\n      }\n\n      if (sessionConfig.maxParticipants < 2 || sessionConfig.maxParticipants > 8) {\n        setError('참가자 수는 2-8명 사이로 설정해주세요.');\n        setIsCreating(false);\n        return;\n      }\n\n      // 3. Workers API를 통한 룸 생성\n      const roomData = await webrtcAPI.createRoom({\n        roomType: sessionConfig.roomType,\n        maxParticipants: sessionConfig.maxParticipants,\n        metadata: {\n          title: sessionConfig.title,\n          description: sessionConfig.description,\n          language: sessionConfig.language,\n          isPrivate: sessionConfig.isPrivate,\n          allowRecording: sessionConfig.allowRecording,\n          autoTranscription: sessionConfig.autoTranscription,\n          createdBy: localStorage.getItem('userId') || 'anonymous',\n          hostName: localStorage.getItem('userName') || 'Host',\n          createdByName: localStorage.getItem('userName') || 'Host',\n          createdAt: new Date().toISOString()\n        }\n      });\n\n      log.info('세션이 성공적으로 생성되었습니다', roomData, 'SESSION');\n\n      setCreatedRoom({\n        ...roomData,\n        config: sessionConfig\n      });\n\n    } catch (err) {\n      console.error('Failed to create session:', err);\n      setError(err.message || '세션 생성 중 오류가 발생했습니다.');\n      log.error('세션 생성 실패', err, 'SESSION');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  // 세션 참가\n  const handleJoinSession = () => {\n    if (!createdRoom) return;\n    \n    const roomId = createdRoom.roomId || createdRoom.id;\n    if (sessionConfig.roomType === 'video') {\n      navigate(`/session/video/${roomId}`);\n    } else {\n      navigate(`/session/audio/${roomId}`);\n    }\n  };\n\n  // 룸 ID 복사\n  const handleCopyRoomId = async () => {\n    if (!createdRoom) return;\n    \n    try {\n      const roomId = createdRoom.roomId || createdRoom.id;\n      await navigator.clipboard.writeText(roomId);\n      // 복사 완료 피드백 (간단한 방법)\n      const button = document.getElementById('copy-room-id');\n      if (button) {\n        const originalText = button.textContent;\n        button.textContent = '복사됨!';\n        setTimeout(() => {\n          button.textContent = originalText;\n        }, 1000);\n      }\n    } catch (err) {\n      console.error('Failed to copy room ID:', err);\n    }\n  };\n\n  // 설정 변경 핸들러\n  const handleConfigChange = (field, value) => {\n    setSessionConfig(prev => ({\n      ...prev,\n      [field]: value\n    }));\n\n    // 화상 세션으로 변경할 때 비디오 권한 확인\n    if (field === 'roomType' && value === 'video' && !mediaPermissions.video) {\n      checkMediaPermissions();\n    }\n  };\n\n  const getLanguageName = (code) => {\n    const languageNames = {\n      'ko': '한국어',\n      'en': 'English',\n      'ja': '日本語',\n      'zh': '中文',\n      'es': 'Español',\n      'fr': 'Français',\n      'de': 'Deutsch'\n    };\n    return languageNames[code] || code;\n  };\n\n  // 세션 생성 완료 화면\n  if (createdRoom) {\n    return (\n      <div className=\"min-h-screen page-bg flex items-center justify-center\">\n        <div className=\"bg-white rounded-[20px] p-8 max-w-md w-full mx-4 text-center\">\n          <div className=\"mb-6\">\n            <CheckCircle className=\"w-16 h-16 text-[var(--green-500)] mx-auto mb-4\" />\n            <h2 className=\"text-[24px] font-bold text-[var(--black-500)] mb-2\">\n              세션 생성 완료!\n            </h2>\n            <p className=\"text-[var(--black-200)] text-[14px]\">\n              세션이 성공적으로 생성되었습니다\n            </p>\n          </div>\n\n          <div className=\"bg-[var(--neutral-100)] rounded-lg p-4 mb-6\">\n            <h3 className=\"font-semibold text-[var(--black-500)] mb-3\">세션 정보</h3>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-[var(--black-200)]\">제목:</span>\n                <span className=\"text-[var(--black-500)]\">{sessionConfig.title}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-[var(--black-200)]\">유형:</span>\n                <div className=\"flex items-center gap-1\">\n                  {sessionConfig.roomType === 'video' ? (\n                    <Video className=\"w-4 h-4\" />\n                  ) : (\n                    <Mic className=\"w-4 h-4\" />\n                  )}\n                  <span className=\"text-[var(--black-500)]\">\n                    {sessionConfig.roomType === 'video' ? '화상' : '음성'}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-[var(--black-200)]\">최대 참가자:</span>\n                <span className=\"text-[var(--black-500)]\">{sessionConfig.maxParticipants}명</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-[var(--black-200)]\">언어:</span>\n                <span className=\"text-[var(--black-500)]\">{getLanguageName(sessionConfig.language)}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-[var(--green-50)] rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-[var(--black-300)] text-[14px]\">룸 ID</span>\n              <button\n                id=\"copy-room-id\"\n                onClick={handleCopyRoomId}\n                className=\"flex items-center gap-1 text-[var(--green-500)] text-[12px] hover:text-[var(--green-600)]\"\n              >\n                <Copy className=\"w-3 h-3\" />\n                복사\n              </button>\n            </div>\n            <div className=\"font-mono text-[16px] text-[var(--black-500)] break-all\">\n              {createdRoom.roomId || createdRoom.id}\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <CommonButton\n              onClick={handleJoinSession}\n              variant=\"primary\"\n              className=\"w-full\"\n            >\n              세션 시작하기\n            </CommonButton>\n            \n            <CommonButton\n              onClick={() => navigate('/sessions')}\n              variant=\"secondary\"\n              className=\"w-full\"\n            >\n              세션 목록으로\n            </CommonButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen page-bg\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-[var(--black-50)] px-6 py-4\">\n        <div className=\"flex items-center gap-4\">\n          <button\n            onClick={() => navigate('/sessions')}\n            className=\"p-2 hover:bg-[var(--neutral-100)] rounded-lg transition-colors\"\n          >\n            <ChevronLeft className=\"w-5 h-5 text-[var(--black-300)]\" />\n          </button>\n          <h1 className=\"text-[20px] font-bold text-[var(--black-500)]\">새 세션 만들기</h1>\n        </div>\n      </div>\n\n      <div className=\"max-w-2xl mx-auto p-6\">\n        {/* 에러 메시지 */}\n        {error && (\n          <div className=\"bg-[rgba(234,67,53,0.1)] border border-[var(--red)] rounded-lg p-4 mb-6 flex items-center gap-3\">\n            <AlertCircle className=\"w-5 h-5 text-[var(--red)] flex-shrink-0\" />\n            <p className=\"text-[var(--red)] text-[14px]\">{error}</p>\n          </div>\n        )}\n\n        {/* 세션 유형 선택 */}\n        <div className=\"bg-white rounded-[20px] p-6 mb-6\">\n          <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">세션 유형</h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <button\n              onClick={() => handleConfigChange('roomType', 'audio')}\n              className={`p-4 rounded-lg border-2 transition-all ${\n                sessionConfig.roomType === 'audio'\n                  ? 'border-[var(--green-500)] bg-[var(--green-50)]'\n                  : 'border-[var(--black-50)] hover:border-[var(--black-100)]'\n              }`}\n            >\n              <Mic className={`w-8 h-8 mx-auto mb-2 ${\n                sessionConfig.roomType === 'audio' ? 'text-[var(--green-500)]' : 'text-[var(--black-300)]'\n              }`} />\n              <div className=\"text-center\">\n                <p className=\"font-semibold text-[var(--black-500)]\">음성 세션</p>\n                <p className=\"text-[12px] text-[var(--black-200)]\">음성만으로 대화</p>\n              </div>\n            </button>\n\n            <button\n              onClick={() => handleConfigChange('roomType', 'video')}\n              className={`p-4 rounded-lg border-2 transition-all ${\n                sessionConfig.roomType === 'video'\n                  ? 'border-[var(--green-500)] bg-[var(--green-50)]'\n                  : 'border-[var(--black-50)] hover:border-[var(--black-100)]'\n              }`}\n              disabled={mediaPermissions.checked && !mediaPermissions.video}\n            >\n              <Video className={`w-8 h-8 mx-auto mb-2 ${\n                sessionConfig.roomType === 'video' ? 'text-[var(--green-500)]' : 'text-[var(--black-300)]'\n              }`} />\n              <div className=\"text-center\">\n                <p className=\"font-semibold text-[var(--black-500)]\">화상 세션</p>\n                <p className=\"text-[12px] text-[var(--black-200)]\">음성과 화상으로 대화</p>\n              </div>\n              {mediaPermissions.checked && !mediaPermissions.video && (\n                <p className=\"text-[10px] text-[var(--red)] mt-1\">카메라 권한 필요</p>\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* 세션 기본 정보 */}\n        <div className=\"bg-white rounded-[20px] p-6 mb-6\">\n          <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">세션 정보</h2>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-[14px] font-medium text-[var(--black-500)] mb-2\">\n                세션 제목 *\n              </label>\n              <input\n                type=\"text\"\n                value={sessionConfig.title}\n                onChange={(e) => handleConfigChange('title', e.target.value)}\n                placeholder=\"세션 제목을 입력하세요\"\n                className=\"w-full h-[56px] px-4 border border-[var(--black-50)] rounded-lg \n                         focus:border-[var(--black-500)] focus:outline-none text-[16px]\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-[14px] font-medium text-[var(--black-500)] mb-2\">\n                세션 설명 (선택)\n              </label>\n              <textarea\n                value={sessionConfig.description}\n                onChange={(e) => handleConfigChange('description', e.target.value)}\n                placeholder=\"세션에 대한 간단한 설명을 입력하세요\"\n                rows={3}\n                className=\"w-full px-4 py-3 border border-[var(--black-50)] rounded-lg \n                         focus:border-[var(--black-500)] focus:outline-none text-[16px] resize-none\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-[14px] font-medium text-[var(--black-500)] mb-2\">\n                  최대 참가자\n                </label>\n                <div className=\"relative\">\n                  <Users className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-[var(--black-200)]\" />\n                  <select\n                    value={sessionConfig.maxParticipants}\n                    onChange={(e) => handleConfigChange('maxParticipants', parseInt(e.target.value))}\n                    className=\"w-full h-[56px] pl-12 pr-4 border border-[var(--black-50)] rounded-lg \n                             focus:border-[var(--black-500)] focus:outline-none text-[16px] appearance-none\"\n                  >\n                    {[2, 3, 4, 5, 6, 7, 8].map(num => (\n                      <option key={num} value={num}>{num}명</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-[14px] font-medium text-[var(--black-500)] mb-2\">\n                  주요 언어\n                </label>\n                <div className=\"relative\">\n                  <Globe className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-[var(--black-200)]\" />\n                  <select\n                    value={sessionConfig.language}\n                    onChange={(e) => handleConfigChange('language', e.target.value)}\n                    className=\"w-full h-[56px] pl-12 pr-4 border border-[var(--black-50)] rounded-lg \n                             focus:border-[var(--black-500)] focus:outline-none text-[16px] appearance-none\"\n                  >\n                    <option value=\"ko\">한국어</option>\n                    <option value=\"en\">English</option>\n                    <option value=\"ja\">日本語</option>\n                    <option value=\"zh\">中文</option>\n                    <option value=\"es\">Español</option>\n                    <option value=\"fr\">Français</option>\n                    <option value=\"de\">Deutsch</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 고급 설정 */}\n        <div className=\"bg-white rounded-[20px] p-6 mb-6\">\n          <button\n            onClick={() => setShowAdvanced(!showAdvanced)}\n            className=\"w-full flex items-center justify-between mb-4\"\n          >\n            <h2 className=\"text-[18px] font-bold text-[var(--black-500)]\">고급 설정</h2>\n            {showAdvanced ? (\n              <EyeOff className=\"w-5 h-5 text-[var(--black-300)]\" />\n            ) : (\n              <Eye className=\"w-5 h-5 text-[var(--black-300)]\" />\n            )}\n          </button>\n\n          {showAdvanced && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-[14px] font-medium text-[var(--black-500)]\">비공개 세션</p>\n                  <p className=\"text-[12px] text-[var(--black-200)]\">룸 ID를 아는 사람만 참가 가능</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={sessionConfig.isPrivate}\n                    onChange={(e) => handleConfigChange('isPrivate', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-[var(--black-100)] peer-focus:outline-none peer-focus:ring-4 \n                               peer-focus:ring-[rgba(0,196,113,0.3)] rounded-full peer \n                               peer-checked:after:translate-x-full peer-checked:after:border-white \n                               after:content-[''] after:absolute after:top-[2px] after:left-[2px] \n                               after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all \n                               peer-checked:bg-[var(--green-500)]\"></div>\n                </label>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-[14px] font-medium text-[var(--black-500)]\">녹화 허용</p>\n                  <p className=\"text-[12px] text-[var(--black-200)]\">참가자가 세션을 녹화할 수 있음</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={sessionConfig.allowRecording}\n                    onChange={(e) => handleConfigChange('allowRecording', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-[var(--black-100)] peer-focus:outline-none peer-focus:ring-4 \n                               peer-focus:ring-[rgba(0,196,113,0.3)] rounded-full peer \n                               peer-checked:after:translate-x-full peer-checked:after:border-white \n                               after:content-[''] after:absolute after:top-[2px] after:left-[2px] \n                               after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all \n                               peer-checked:bg-[var(--green-500)]\"></div>\n                </label>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-[14px] font-medium text-[var(--black-500)]\">자동 전사</p>\n                  <p className=\"text-[12px] text-[var(--black-200)]\">음성을 자동으로 텍스트로 변환</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={sessionConfig.autoTranscription}\n                    onChange={(e) => handleConfigChange('autoTranscription', e.target.checked)}\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-[var(--black-100)] peer-focus:outline-none peer-focus:ring-4 \n                               peer-focus:ring-[rgba(0,196,113,0.3)] rounded-full peer \n                               peer-checked:after:translate-x-full peer-checked:after:border-white \n                               after:content-[''] after:absolute after:top-[2px] after:left-[2px] \n                               after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all \n                               peer-checked:bg-[var(--green-500)]\"></div>\n                </label>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 미디어 권한 상태 */}\n        {mediaPermissions.checked && (\n          <div className=\"bg-white rounded-[20px] p-6 mb-6\">\n            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">미디어 권한</h2>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Mic className=\"w-5 h-5 text-[var(--black-300)]\" />\n                  <span className=\"text-[14px] text-[var(--black-500)]\">마이크</span>\n                </div>\n                <div className={`text-[12px] px-3 py-1 rounded-full ${\n                  mediaPermissions.audio\n                    ? 'bg-[var(--green-50)] text-[var(--green-600)]'\n                    : 'bg-[rgba(234,67,53,0.1)] text-[var(--red)]'\n                }`}>\n                  {mediaPermissions.audio ? '허용됨' : '권한 필요'}\n                </div>\n              </div>\n              \n              {sessionConfig.roomType === 'video' && (\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Video className=\"w-5 h-5 text-[var(--black-300)]\" />\n                    <span className=\"text-[14px] text-[var(--black-500)]\">카메라</span>\n                  </div>\n                  <div className={`text-[12px] px-3 py-1 rounded-full ${\n                    mediaPermissions.video\n                      ? 'bg-[var(--green-50)] text-[var(--green-600)]'\n                      : 'bg-[rgba(234,67,53,0.1)] text-[var(--red)]'\n                  }`}>\n                    {mediaPermissions.video ? '허용됨' : '권한 필요'}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {(!mediaPermissions.audio || (sessionConfig.roomType === 'video' && !mediaPermissions.video)) && (\n              <div className=\"mt-4 p-3 bg-[var(--neutral-100)] rounded-lg\">\n                <p className=\"text-[12px] text-[var(--black-300)] text-center\">\n                  세션 생성 시 미디어 권한을 요청합니다\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 생성 버튼 */}\n        <div className=\"space-y-3\">\n          <CommonButton\n            onClick={handleCreateSession}\n            disabled={isCreating || !sessionConfig.title.trim()}\n            variant=\"primary\"\n            className=\"w-full\"\n          >\n            {isCreating ? (\n              <div className=\"flex items-center gap-2\">\n                <Loader2 className=\"w-5 h-5 animate-spin\" />\n                세션 생성 중...\n              </div>\n            ) : (\n              '세션 생성하기'\n            )}\n          </CommonButton>\n\n          <CommonButton\n            onClick={() => navigate('/sessions')}\n            variant=\"secondary\"\n            className=\"w-full\"\n          >\n            취소\n          </CommonButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/SessionList.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'allSessions' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":41,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"allSessions"},"fix":{"range":[1067,1078],"text":""},"desc":"Remove unused variable 'allSessions'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setAllSessions' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":41,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAllSessions"},"fix":{"range":[1078,1094],"text":""},"desc":"Remove unused variable 'setAllSessions'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAllSessionsData'. Either include it or remove the dependency array.","line":46,"column":8,"nodeType":"ArrayExpression","endLine":46,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [loadAllSessionsData]","fix":{"range":[1200,1202],"text":"[loadAllSessionsData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n    Calendar,\n    Clock,\n    Video,\n    Mic,\n    Plus,\n    Users,\n    Filter,\n    ChevronRight,\n    List,\n    Loader2,\n    Play,\n    Trash2,\n    Edit3\n} from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport useSessionStore from '../../store/sessionStore';\nimport { webrtcAPI } from '../../api/webrtc';\nimport api from '../../api/index.js';\nimport { log } from '../../utils/logger';\n\nexport default function SessionList() {\n    const navigate = useNavigate();\n    const [activeTab, setActiveTab] = useState('upcoming');\n    const [filterOpen, setFilterOpen] = useState(false);\n    const [loadingRooms, setLoadingRooms] = useState(false);\n    const [activeRooms, setActiveRooms] = useState([]);\n    const [isJoining, setIsJoining] = useState('');\n\n    const {\n        sessions,\n        upcomingSessions,\n        sessionStats,\n        loadSessions,\n        cancelSession\n    } = useSessionStore();\n\n    // 전체 세션 데이터를 위한 상태  \n    const [allSessions, setAllSessions] = useState([]);\n\n    useEffect(() => {\n        loadAllSessionsData();\n        loadActiveRooms();\n    }, []);\n\n    // 모든 세션 데이터 로드\n    const loadAllSessionsData = async () => {\n        try {\n            await loadSessions();\n        } catch (error) {\n            console.error('세션 데이터 로드 실패:', error);\n        }\n    };\n\n\n    // Load active WebRTC rooms\n    const loadActiveRooms = async () => {\n        try {\n            setLoadingRooms(true);\n            log.info('활성 룸 목록 조회 시작', null, 'SESSION_LIST');\n\n            const response = await api.get('/webrtc/rooms/active');\n            const rooms = response?.data?.data || response?.data || [];\n            setActiveRooms(Array.isArray(rooms) ? rooms : []);\n            log.info('활성 룸 목록 조회 완료', { count: Array.isArray(rooms) ? rooms.length : 0 }, 'SESSION_LIST');\n        } catch (error) {\n            log.error('활성 룸 목록 조회 실패', error, 'SESSION_LIST');\n            setActiveRooms([]);\n        } finally {\n            setLoadingRooms(false);\n        }\n    };\n\n    const formatSessionTime = (dateString) => {\n        const date = new Date(dateString);\n        const now = new Date();\n        const diffMs = date - now;\n        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n        if (diffDays === 0) {\n            const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n            if (diffHours === 0) {\n                const diffMinutes = Math.floor(diffMs / (1000 * 60));\n                return `${diffMinutes}분 후`;\n            }\n            return `${diffHours}시간 후`;\n        } else if (diffDays === 1) {\n            return '내일';\n        } else if (diffDays > 0 && diffDays < 7) {\n            return `${diffDays}일 후`;\n        } else {\n            return date.toLocaleDateString('ko-KR', {\n                month: 'numeric',\n                day: 'numeric',\n                weekday: 'short'\n            });\n        }\n    };\n\n    const handleStartSession = (session) => {\n        if (session.type === 'video') {\n            navigate(`/session/video/${session.id}`);\n        } else {\n            navigate(`/session/audio/${session.id}`);\n        }\n    };\n\n    const handleJoinActiveRoom = async (room) => {\n        try {\n            setIsJoining(room.roomId);\n            log.info('활성 룸 입장 시도', { roomId: room.roomId }, 'SESSION_LIST');\n\n            const userId = localStorage.getItem('userId') || 'guest-' + Date.now();\n            const userName = localStorage.getItem('userName') || 'Anonymous';\n\n            // Try to join the room\n            await webrtcAPI.joinRoom(room.roomId, { userId, userName });\n            \n            // Navigate to appropriate session room\n            if (room.roomType === 'video') {\n                navigate(`/session/video/${room.roomId}`);\n            } else {\n                navigate(`/session/audio/${room.roomId}`);\n            }\n\n        } catch (error) {\n            log.error('활성 룸 입장 실패', error, 'SESSION_LIST');\n            alert('세션 입장에 실패했습니다: ' + (error.message || '알 수 없는 오류'));\n        } finally {\n            setIsJoining('');\n        }\n    };\n\n    const handleCancelSession = (sessionId) => {\n        if (window.confirm('이 세션을 취소하시겠습니까?')) {\n            cancelSession(sessionId);\n        }\n    };\n\n    const SessionCard = ({ session, isPast = false }) => (\n        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)] mb-4\">\n            <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-4\">\n                    <img\n                        src={session.partnerImage}\n                        alt={session.partnerName}\n                        className=\"w-12 h-12 rounded-full object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                            <h3 className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                                {session.partnerName}\n                            </h3>\n                            {session.participants && (\n                                <span className=\"flex items-center space-x-1 text-[12px] text-[#929292]\">\n                                    <Users className=\"w-3 h-3\" />\n                                    <span>{session.participants}</span>\n                                </span>\n                            )}\n                        </div>\n                        <div className=\"flex items-center space-x-4 text-[14px] text-[var(--black-300)]\">\n                            <span className=\"flex items-center space-x-1\">\n                                <Calendar className=\"w-4 h-4\" />\n                                <span>{formatSessionTime(session.scheduledAt)}</span>\n                            </span>\n                            <span className=\"flex items-center space-x-1\">\n                                <Clock className=\"w-4 h-4\" />\n                                <span>{session.duration}분</span>\n                            </span>\n                            <span className=\"flex items-center space-x-1\">\n                                {session.type === 'video' ? (\n                                    <Video className=\"w-4 h-4\" />\n                                ) : (\n                                    <Mic className=\"w-4 h-4\" />\n                                )}\n                                <span>{session.type === 'video' ? '화상' : '음성'}</span>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                {!isPast ? (\n                    <button\n                        onClick={() => handleStartSession(session)}\n                        className=\"p-2 text-[var(--green-500)] hover:bg-[var(--neutral-100)] rounded-lg transition-colors\"\n                    >\n                        <ChevronRight className=\"w-5 h-5\" />\n                    </button>\n                ) : (\n                    session.rating && (\n                        <div className=\"flex space-x-1\">\n                            {[...Array(5)].map((_, i) => (\n                                <span\n                                    key={i}\n                                    className={`text-[14px] ${i < session.rating ? 'text-[var(--warning-yellow)]' : 'text-[var(--black-50)]'\n                                        }`}\n                                >\n                                    ★\n                                </span>\n                            ))}\n                        </div>\n                    )\n                )}\n            </div>\n\n            {!isPast && (\n                <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-[var(--neutral-100)]\">\n                    <span className=\"px-3 py-1 bg-[var(--neutral-100)] text-[var(--black-300)] text-[12px] rounded-full\">\n                        {session.language === 'en' ? 'English' : '한국어'}\n                    </span>\n                    <div className=\"flex space-x-2\">\n                        <button\n                            onClick={() => handleCancelSession(session.id)}\n                            className=\"text-[14px] text-[var(--black-200)] hover:text-[var(--red)]\"\n                        >\n                            취소\n                        </button>\n                        <button\n                            onClick={() => handleStartSession(session)}\n                            className=\"text-[14px] text-[var(--green-500)] hover:text-[var(--green-600)] font-medium\"\n                        >\n                            참가하기\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n\n    const ActiveRoomCard = ({ room }) => {\n        const metadata = room.metadata || {};\n        const session = room.session || {};\n        const title = session.title || metadata.title || (room.roomType === 'video' ? '화상 세션' : '음성 세션');\n        const language = session.languageCode || metadata.language || 'en';\n        const hostName = session.hostName || metadata.hostName || metadata.createdByName || metadata.createdBy || '호스트';\n        const createdAt = session.scheduledAt || metadata.createdAt || room.createdAt;\n        const waitlistCount = session.waitlistCount ?? metadata.waitlistCount ?? room.waitlistCount ?? 0;\n        const participantsLabel = `${room.currentParticipants}/${room.maxParticipants}명`;\n        const isFull = room.currentParticipants >= room.maxParticipants;\n        const languageLabel = language === 'ko' ? '한국어' : language === 'en' ? 'English' : language.toUpperCase();\n        const roomStatus = room.status === 'active' ? '진행 중' : '대기 중';\n        const createdAtLabel = createdAt\n            ? new Date(createdAt).toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' })\n            : null;\n\n        return (\n            <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)] mb-4\">\n                <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-4\">\n                        <div className=\"w-12 h-12 rounded-full bg-[var(--neutral-100)] flex items-center justify-center text-[var(--black-300)] text-[18px]\">\n                            {title.charAt(0).toUpperCase()}\n                        </div>\n                        <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                                <h3 className=\"text-[16px] font-semibold text-[var(--black-500)]\">\n                                    {title}\n                                </h3>\n                                {metadata.isPrivate && (\n                                    <span className=\"px-2 py-1 bg-[var(--warning-yellow)] bg-opacity-20 text-[var(--warning-yellow)] text-[10px] rounded-full\">비공개</span>\n                                )}\n                                <span className={`px-2 py-1 text-[10px] rounded-full ${room.status === 'active' ? 'bg-[rgba(0,196,113,0.15)] text-[var(--green-600)]' : 'bg-[var(--neutral-100)] text-[var(--black-300)]'}`}>\n                                    {roomStatus}\n                                </span>\n                            </div>\n                            <div className=\"flex items-center space-x-4 text-[14px] text-[var(--black-300)] mb-2\">\n                                <span className=\"flex items-center space-x-1\">\n                                    <Users className=\"w-4 h-4\" />\n                                    <span>{participantsLabel}</span>\n                                </span>\n                                <span className=\"flex items-center space-x-1\">\n                                    {room.roomType === 'video' ? <Video className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                                    <span>{room.roomType === 'video' ? '화상' : '음성'}</span>\n                                </span>\n                                {waitlistCount > 0 && (\n                                    <span className=\"flex items-center space-x-1\">\n                                        <Clock className=\"w-4 h-4\" />\n                                        <span>대기 {waitlistCount}명</span>\n                                    </span>\n                                )}\n                                <span className=\"text-[var(--black-200)]\">{hostName} 님이 생성</span>\n                            </div>\n                            <div className=\"text-[12px] text-[var(--black-200)]\">\n                                {createdAtLabel ? `${createdAtLabel} 생성` : '방 정보 확인'}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                        <span className=\"px-3 py-1 bg-[var(--neutral-100)] text-[var(--black-300)] text-[12px] rounded-full\">\n                            {languageLabel}\n                        </span>\n                        <button\n                            onClick={() => handleJoinActiveRoom(room)}\n                            disabled={isJoining === room.roomId || isFull}\n                            className={`flex items-center gap-2 px-4 py-2 rounded-lg text-[14px] font-medium transition-colors ${\n                                isFull\n                                    ? 'bg-[var(--black-50)] text-[var(--black-200)] cursor-not-allowed'\n                                    : 'bg-[var(--green-500)] text-white hover:bg-[var(--green-600)]'\n                            }`}\n                        >\n                            {isJoining === room.roomId ? (\n                                <>\n                                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                                    입장 중...\n                                </>\n                            ) : isFull ? (\n                                '만실'\n                            ) : (\n                                <>\n                                    <Play className=\"w-4 h-4\" />\n                                    빠른 입장\n                                </>\n                            )}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"min-h-screen page-bg\">\n            {/* Header */}\n            <div className=\"bg-white border-b border-[var(--black-50)] px-6 py-4\">\n                <div className=\"flex items-center justify-between\">\n                    <h1 className=\"text-[20px] font-bold text-[var(--black-500)]\">세션</h1>\n                    <div className=\"flex items-center space-x-2\">\n                        <button\n                            onClick={() => navigate('/sessions/calendar')}\n                            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                        >\n                            <Calendar className=\"w-5 h-5 text-[var(--black-300)]\" />\n                        </button>\n                        <button\n                            onClick={() => navigate('/sessions/create')}\n                            className=\"p-2 bg-[var(--green-500)] hover:bg-[var(--green-600)] text-white rounded-lg\"\n                        >\n                            <Plus className=\"w-5 h-5\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            {/* Stats */}\n            <div className=\"bg-white p-6 border-b border-[var(--black-50)]\">\n                <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center\">\n                        <p className=\"text-[24px] font-bold text-[var(--black-500)]\">\n                            {sessionStats.totalSessions || 0}\n                        </p>\n                        <p className=\"text-[12px] text-[var(--black-200)]\">완료 세션</p>\n                    </div>\n                    <div className=\"text-center\">\n                        <p className=\"text-[24px] font-bold text-[var(--black-500)]\">\n                            {sessionStats.totalDuration || 0}분\n                        </p>\n                        <p className=\"text-[12px] text-[var(--black-200)]\">총 학습시간</p>\n                    </div>\n                    <div className=\"text-center\">\n                        <p className=\"text-[24px] font-bold text_[var(--black-500)]\">\n                            {sessionStats.completionRate || 0}%\n                        </p>\n                        <p className=\"text-[12px] text-[var(--black-200)]\">완료율</p>\n                    </div>\n                </div>\n            </div>\n\n            {/* Tabs */}\n            <div className=\"bg-white border-b border-[var(--black-50)]\">\n                <div className=\"flex\">\n                    <button\n                        onClick={() => setActiveTab('active')}\n                        className={`flex-1 py-3 text-[14px] font-medium border-b-2 transition-colors ${activeTab === 'active'\n                            ? 'text-[var(--green-500)] border-[var(--green-500)]'\n                            : 'text-[var(--black-200)] border-transparent'\n                            }`}\n                    >\n                        <div className=\"flex items-center justify-center gap-2\">\n                            <span>활성 세션</span>\n                            {activeRooms.length > 0 && (\n                                <span className=\"bg-[var(--green-500)] text-white text-[10px] px-2 py-1 rounded-full\">\n                                    {activeRooms.length}\n                                </span>\n                            )}\n                        </div>\n                    </button>\n                    <button\n                        onClick={() => setActiveTab('upcoming')}\n                        className={`flex-1 py-3 text-[14px] font-medium border-b-2 transition-colors ${activeTab === 'upcoming'\n                            ? 'text-[var(--green-500)] border-[var(--green-500)]'\n                            : 'text-[var(--black-200)] border-transparent'\n                            }`}\n                    >\n                        예정된 세션\n                    </button>\n                    <button\n                        onClick={() => setActiveTab('past')}\n                        className={`flex-1 py-3 text-[14px] font-medium border-b-2 transition-colors ${activeTab === 'past'\n                            ? 'text-[var(--green-500)] border-[var(--green-500)]'\n                            : 'text-[var(--black-200)] border-transparent'\n                            }`}\n                    >\n                        지난 세션\n                    </button>\n                </div>\n            </div>\n\n            {/* Filter Button */}\n            <div className=\"p-4\">\n                <button\n                    onClick={() => setFilterOpen(!filterOpen)}\n                    className=\"flex items-center space-x-2 px-4 py-2 bg-white rounded-lg \n          border border-[var(--black-50)] text-[14px] text-[var(--black-300)] hover:bg-[var(--neutral-100)]\"\n                >\n                    <Filter className=\"w-4 h-4\" />\n                    <span>필터</span>\n                </button>\n            </div>\n\n            {/* Session List */}\n            <div className=\"px-6 pb-6\">\n                {activeTab === 'active' ? (\n                    <>\n                        <div className=\"flex items-center justify-between mb-4\">\n                            <h2 className=\"text-[18px] font-semibold text-[var(--black-500)]\">\n                                지금 입장 가능한 세션\n                            </h2>\n                            <button\n                                onClick={loadActiveRooms}\n                                disabled={loadingRooms}\n                                className=\"flex items-center gap-2 text-[var(--green-500)] text-[14px] hover:text-[var(--green-600)]\"\n                            >\n                                {loadingRooms ? (\n                                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                                ) : (\n                                    '새로고침'\n                                )}\n                            </button>\n                        </div>\n\n                        {loadingRooms ? (\n                            <div className=\"text-center py-12\">\n                                <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-[var(--green-500)]\" />\n                                <p className=\"text-[var(--black-200)]\">활성 세션을 불러오는 중...</p>\n                            </div>\n                        ) : activeRooms.length > 0 ? (\n                            activeRooms.map(room => (\n                                <ActiveRoomCard key={room.roomId} room={room} />\n                            ))\n                        ) : (\n                            <div className=\"text-center py-12\">\n                                <p className=\"text-[16px] text-[var(--black-200)] mb-4\">\n                                    현재 활성 세션이 없습니다\n                                </p>\n                                <div className=\"space-y-2\">\n                                    <CommonButton\n                                        onClick={() => navigate('/sessions/create')}\n                                        variant=\"primary\"\n                                    >\n                                        새 세션 만들기\n                                    </CommonButton>\n                                    <CommonButton\n                                        onClick={() => navigate('/matching')}\n                                        variant=\"secondary\"\n                                    >\n                                        매칭으로 상대 찾기\n                                    </CommonButton>\n                                </div>\n                            </div>\n                        )}\n                    </>\n                ) : activeTab === 'upcoming' ? (\n                    <>\n                        {upcomingSessions.length > 0 ? (\n                            upcomingSessions.map(session => (\n                                <SessionCard key={session.id} session={session} />\n                            ))\n                        ) : (\n                            <div className=\"text-center py-12\">\n                                <p className=\"text-[16px] text-[var(--black-200)] mb-4\">\n                                    예정된 세션이 없습니다\n                                </p>\n                                <CommonButton\n                                    onClick={() => navigate('/matching')}\n                                    variant=\"primary\"\n                                >\n                                    매칭 시작하기\n                                </CommonButton>\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        {sessions.filter(s => s.status === 'completed').length > 0 ? (\n                            sessions.filter(s => s.status === 'completed').map(session => (\n                                <SessionCard key={session.id} session={session} isPast />\n                            ))\n                        ) : (\n                            <div className=\"text-center py-12\">\n                                <p className=\"text-[16px] text-[var(--black-200)]\">\n                                    완료된 세션이 없습니다\n                                </p>\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/SessionScheduleNew.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'englishName' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":23,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"englishName"},"fix":{"range":[548,590],"text":""},"desc":"Remove unused variable 'englishName'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n    ChevronLeft,\n    Calendar,\n    Clock,\n    Video,\n    Mic,\n    Users,\n    Globe,\n    RepeatIcon,\n    Bell,\n    User,\n    Check\n} from 'lucide-react';\nimport CommonButton from '../../components/CommonButton';\nimport useSessionStore from '../../store/sessionStore';\nimport useProfileStore from '../../store/profileStore';\n\nexport default function SessionScheduleNew() {\n    const navigate = useNavigate();\n    const { addSession } = useSessionStore();\n    const { englishName } = useProfileStore();\n\n    const [step, setStep] = useState(1); // 1: 기본정보, 2: 시간선택, 3: 확인\n    const [sessionData, setSessionData] = useState({\n        type: 'video', // video, audio\n        participantType: 'individual', // individual, group\n        partnerId: '',\n        partnerName: '',\n        language: 'en',\n        date: new Date(),\n        time: '',\n        duration: 30,\n        isRecurring: false,\n        recurringType: 'weekly', // weekly, biweekly, monthly\n        recurringEndDate: null,\n        reminderTime: 30, // 분 단위\n        notes: ''\n    });\n\n    // 더미 파트너 데이터 (실제로는 API에서 가져와야 함)\n    const availablePartners = [\n        { id: 'emma123', name: 'Emma Wilson', level: 'B2', languages: ['en', 'ko'], avatar: '/assets/basicProfilePic.png' },\n        { id: 'john456', name: 'John Smith', level: 'C1', languages: ['en', 'es'], avatar: '/assets/basicProfilePic.png' },\n        { id: 'sarah111', name: 'Sarah Johnson', level: 'B1', languages: ['en', 'ja'], avatar: '/assets/basicProfilePic.png' },\n        { id: 'mike222', name: 'Mike Chen', level: 'A2', languages: ['en', 'zh'], avatar: '/assets/basicProfilePic.png' }\n    ];\n\n    const timeSlots = [\n        '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',\n        '14:00', '14:30', '15:00', '15:30', '16:00', '16:30',\n        '17:00', '17:30', '18:00', '18:30', '19:00', '19:30',\n        '20:00', '20:30', '21:00'\n    ];\n\n    const handleNext = () => {\n        if (step === 1 && sessionData.partnerId) {\n            setStep(2);\n        } else if (step === 2 && sessionData.time) {\n            setStep(3);\n        }\n    };\n\n    const handleBack = () => {\n        if (step > 1) {\n            setStep(step - 1);\n        } else {\n            navigate(-1);\n        }\n    };\n\n    const handleSchedule = () => {\n        const [hours, minutes] = sessionData.time.split(':').map(Number);\n        const scheduledDate = new Date(sessionData.date);\n        scheduledDate.setHours(hours, minutes, 0, 0);\n\n        const newSession = {\n            id: Date.now().toString(),\n            date: scheduledDate,\n            partnerId: sessionData.partnerId,\n            partnerName: sessionData.partnerName,\n            partnerImage: availablePartners.find(p => p.id === sessionData.partnerId)?.avatar || '/assets/basicProfilePic.png',\n            type: sessionData.type,\n            duration: sessionData.duration,\n            language: sessionData.language,\n            status: 'scheduled',\n            participants: sessionData.participantType === 'group' ? 4 : undefined,\n            isRecurring: sessionData.isRecurring,\n            recurringType: sessionData.recurringType,\n            reminderTime: sessionData.reminderTime,\n            notes: sessionData.notes\n        };\n\n        addSession(newSession);\n        navigate('/sessions/calendar');\n    };\n\n    const handlePartnerSelect = (partner) => {\n        setSessionData({\n            ...sessionData,\n            partnerId: partner.id,\n            partnerName: partner.name\n        });\n    };\n\n    const formatDate = (date) => {\n        return date.toLocaleDateString('ko-KR', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            weekday: 'long'\n        });\n    };\n\n    return (\n        <div className=\"min-h-screen page-bg\">\n            {/* Header */}\n            <div className=\"bg-white border-b border-[var(--black-50)] px-6 py-4\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                        <button\n                            onClick={handleBack}\n                            className=\"p-2 -ml-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                        >\n                            <ChevronLeft className=\"w-6 h-6\" />\n                        </button>\n                        <h1 className=\"text-[20px] font-bold text-[var(--black-500)]\">새 세션 예약</h1>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                        <div className={`w-8 h-1 rounded-full ${step >= 1 ? 'bg-[var(--green-500)]' : 'bg-[var(--black-50)]'}`} />\n                        <div className={`w-8 h-1 rounded-full ${step >= 2 ? 'bg-[var(--green-500)]' : 'bg-[var(--black-50)]'}`} />\n                        <div className={`w-8 h-1 rounded-full ${step >= 3 ? 'bg-[var(--green-500)]' : 'bg-[var(--black-50)]'}`} />\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"max-w-2xl mx-auto p-6\">\n                {step === 1 && (\n                    <div className=\"space-y-6\">\n                        {/* 세션 타입 선택 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">세션 타입</h2>\n                            <div className=\"grid grid-cols-2 gap-3\">\n                                <button\n                                    onClick={() => setSessionData({ ...sessionData, type: 'video' })}\n                                    className={`p-4 rounded-lg border-2 transition-all ${sessionData.type === 'video'\n                                        ? 'border-[var(--green-500)] bg-[rgba(0,196,113,0.05)]'\n                                        : 'border-[var(--black-50)]'\n                                        }`}\n                                >\n                                    <Video className={`w-6 h-6 mx-auto mb-2 ${sessionData.type === 'video' ? 'text-[var(--green-500)]' : 'text-[var(--black-200)]'\n                                        }`} />\n                                    <p className=\"text-[14px] font-medium\">비디오 세션</p>\n                                </button>\n                                <button\n                                    onClick={() => setSessionData({ ...sessionData, type: 'audio' })}\n                                    className={`p-4 rounded-lg border-2 transition-all ${sessionData.type === 'audio'\n                                        ? 'border-[var(--green-500)] bg-[rgba(0,196,113,0.05)]'\n                                        : 'border-[var(--black-50)]'\n                                        }`}\n                                >\n                                    <Mic className={`w-6 h-6 mx-auto mb-2 ${sessionData.type === 'audio' ? 'text-[var(--green-500)]' : 'text-[var(--black-200)]'\n                                        }`} />\n                                    <p className=\"text-[14px] font-medium\">오디오 세션</p>\n                                </button>\n                            </div>\n                        </div>\n\n                        {/* 참가자 타입 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">참가자 타입</h2>\n                            <div className=\"grid grid-cols-2 gap-3\">\n                                <button\n                                    onClick={() => setSessionData({ ...sessionData, participantType: 'individual' })}\n                                    className={`p-4 rounded-lg border-2 transition-all ${sessionData.participantType === 'individual'\n                                        ? 'border-[var(--green-500)] bg-[rgba(0,196,113,0.05)]'\n                                        : 'border-[var(--black-50)]'\n                                        }`}\n                                >\n                                    <User className={`w-6 h-6 mx-auto mb-2 ${sessionData.participantType === 'individual' ? 'text-[var(--green-500)]' : 'text-[var(--black-200)]'\n                                        }`} />\n                                    <p className=\"text-[14px] font-medium\">1:1 세션</p>\n                                </button>\n                                <button\n                                    onClick={() => setSessionData({ ...sessionData, participantType: 'group' })}\n                                    className={`p-4 rounded-lg border-2 transition-all ${sessionData.participantType === 'group'\n                                        ? 'border-[var(--green-500)] bg-[rgba(0,196,113,0.05)]'\n                                        : 'border-[var(--black-50)]'\n                                        }`}\n                                >\n                                    <Users className={`w-6 h-6 mx-auto mb-2 ${sessionData.participantType === 'group' ? 'text-[var(--green-500)]' : 'text-[var(--black-200)]'\n                                        }`} />\n                                    <p className=\"text-[14px] font-medium\">그룹 세션</p>\n                                </button>\n                            </div>\n                        </div>\n\n                        {/* 파트너 선택 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">파트너 선택</h2>\n                            <div className=\"space-y-3\">\n                                {availablePartners.map(partner => (\n                                    <button\n                                        key={partner.id}\n                                        onClick={() => handlePartnerSelect(partner)}\n                                        className={`w-full p-4 rounded-lg border-2 transition-all ${sessionData.partnerId === partner.id\n                                            ? 'border-[var(--green-500)] bg-[rgba(0,196,113,0.05)]'\n                                            : 'border-[var(--black-50)] hover:border-[color-mix(in_srgb,var(--green-500),#fff 50%)]'\n                                            }`}\n                                    >\n                                        <div className=\"flex items-center justify-between\">\n                                            <div className=\"flex items-center space-x-3\">\n                                                <img\n                                                    src={partner.avatar}\n                                                    alt={partner.name}\n                                                    className=\"w-10 h-10 rounded-full object-cover\"\n                                                />\n                                                <div className=\"text-left\">\n                                                    <p className=\"text-[14px] font-medium text-[var(--black-500)]\">{partner.name}</p>\n                                                    <p className=\"text-[12px] text-[var(--black-300)]\">\n                                                        Level {partner.level} • {partner.languages.join(', ').toUpperCase()}\n                                                    </p>\n                                                </div>\n                                            </div>\n                                            {sessionData.partnerId === partner.id && (\n                                                <Check className=\"w-5 h-5 text-[var(--green-500)]\" />\n                                            )}\n                                        </div>\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n\n                        {/* 언어 선택 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">세션 언어</h2>\n                            <div className=\"flex items-center space-x-3\">\n                                <Globe className=\"w-5 h-5 text-[var(--black-300)]\" />\n                                <select\n                                    value={sessionData.language}\n                                    onChange={(e) => setSessionData({ ...sessionData, language: e.target.value })}\n                                    className=\"flex-1 p-3 rounded-lg border border-[var(--black-50)] text-[14px] outline-none focus:border-[var(--green-500)]\"\n                                >\n                                    <option value=\"en\">English</option>\n                                    <option value=\"ko\">한국어</option>\n                                    <option value=\"ja\">日本語</option>\n                                    <option value=\"zh\">中文</option>\n                                    <option value=\"es\">Español</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {step === 2 && (\n                    <div className=\"space-y-6\">\n                        {/* 날짜 선택 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">날짜 선택</h2>\n                            <div className=\"flex items-center space-x-3 mb-4\">\n                                <Calendar className=\"w-5 h-5 text-[var(--black-300)]\" />\n                                <input\n                                    type=\"date\"\n                                    value={sessionData.date.toISOString().split('T')[0]}\n                                    onChange={(e) => setSessionData({ ...sessionData, date: new Date(e.target.value) })}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    className=\"flex-1 p-3 rounded-lg border border-[var(--black-50)] text-[14px] outline-none focus:border-[var(--green-500)]\"\n                                />\n                            </div>\n                            <p className=\"text-[14px] text-[var(--black-300)]\">{formatDate(sessionData.date)}</p>\n                        </div>\n\n                        {/* 시간 선택 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">시간 선택</h2>\n                            <div className=\"grid grid-cols-3 gap-2\">\n                                {timeSlots.map(time => (\n                                    <button\n                                        key={time}\n                                        onClick={() => setSessionData({ ...sessionData, time })}\n                                        className={`p-3 rounded-lg text-[14px] font-medium transition-all ${sessionData.time === time\n                                            ? 'bg-[var(--green-500)] text-white'\n                                            : 'bg-[var(--neutral-100)] text-[var(--black-300)] hover:bg-[var(--black-50)]'\n                                            }`}\n                                    >\n                                        {time}\n                                    </button>\n                                ))}\n                            </div>\n                        </div>\n\n                        {/* 세션 길이 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-4\">세션 길이</h2>\n                            <div className=\"flex items-center space-x-4\">\n                                <Clock className=\"w-5 h-5 text-[var(--black-300)]\" />\n                                <div className=\"flex items-center space-x-3\">\n                                    {[30, 45, 60].map(duration => (\n                                        <button\n                                            key={duration}\n                                            onClick={() => setSessionData({ ...sessionData, duration })}\n                                            className={`px-4 py-2 rounded-lg text-[14px] font-medium transition-all ${sessionData.duration === duration\n                                                ? 'bg-[var(--green-500)] text-white'\n                                                : 'bg-[var(--neutral-100)] text-[var(--black-300)] hover:bg-[var(--black-50)]'\n                                                }`}\n                                        >\n                                            {duration}분\n                                        </button>\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* 반복 설정 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <div className=\"flex items-center justify-between mb-4\">\n                                <div className=\"flex items-center space-x-3\">\n                                    <RepeatIcon className=\"w-5 h-5 text-[var(--black-300)]\" />\n                                    <h2 className=\"text-[18px] font-bold text-[var(--black-500)]\">반복 설정</h2>\n                                </div>\n                                <button\n                                    onClick={() => setSessionData({ ...sessionData, isRecurring: !sessionData.isRecurring })}\n                                    className={`w-12 h-6 rounded-full transition-colors ${sessionData.isRecurring ? 'bg-[var(--green-500)]' : 'bg-[var(--black-50)]'\n                                        } relative`}\n                                >\n                                    <div className={`absolute top-0.5 w-5 h-5 bg-white rounded-full transition-transform ${sessionData.isRecurring ? 'translate-x-6' : 'translate-x-0.5'\n                                        }`} />\n                                </button>\n                            </div>\n\n                            {sessionData.isRecurring && (\n                                <div className=\"space-y-3\">\n                                    <select\n                                        value={sessionData.recurringType}\n                                        onChange={(e) => setSessionData({ ...sessionData, recurringType: e.target.value })}\n                                        className=\"w-full p-3 rounded-lg border border-[#E7E7E7] text-[14px] outline-none focus:border-[#00C471]\"\n                                    >\n                                        <option value=\"weekly\">매주</option>\n                                        <option value=\"biweekly\">격주</option>\n                                        <option value=\"monthly\">매월</option>\n                                    </select>\n                                </div>\n                            )}\n                        </div>\n\n                        {/* 리마인더 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <div className=\"flex items-center space-x-3 mb-4\">\n                                <Bell className=\"w-5 h-5 text-[var(--black-300)]\" />\n                                <h2 className=\"text-[18px] font-bold text-[var(--black-500)]\">리마인더</h2>\n                            </div>\n                            <select\n                                value={sessionData.reminderTime}\n                                onChange={(e) => setSessionData({ ...sessionData, reminderTime: parseInt(e.target.value) })}\n                                className=\"w-full p-3 rounded-lg border border-[var(--black-50)] text-[14px] outline-none focus:border-[var(--green-500)]\"\n                            >\n                                <option value=\"15\">15분 전</option>\n                                <option value=\"30\">30분 전</option>\n                                <option value=\"60\">1시간 전</option>\n                                <option value=\"1440\">하루 전</option>\n                            </select>\n                        </div>\n                    </div>\n                )}\n\n                {step === 3 && (\n                    <div className=\"space-y-6\">\n                        {/* 예약 확인 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[var(--black-50)]\">\n                            <h2 className=\"text-[18px] font-bold text-[var(--black-500)] mb-6\">예약 확인</h2>\n\n                            <div className=\"space-y-4\">\n                                <div className=\"flex items-center justify-between py-3 border-b border-[var(--black-50)]\">\n                                    <span className=\"text-[14px] text-[var(--black-300)]\">세션 타입</span>\n                                    <div className=\"flex items-center space-x-2\">\n                                        {sessionData.type === 'video' ? <Video className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                                        <span className=\"text-[14px] font-medium text-[var(--black-500)]\">\n                                            {sessionData.type === 'video' ? '비디오' : '오디오'} 세션\n                                        </span>\n                                    </div>\n                                </div>\n\n                                <div className=\"flex items-center justify-between py-3 border-b border-[var(--black-50)]\">\n                                    <span className=\"text-[14px] text-[var(--black-300)]\">파트너</span>\n                                    <div className=\"flex items-center space-x-2\">\n                                        <img\n                                            src={availablePartners.find(p => p.id === sessionData.partnerId)?.avatar}\n                                            alt={sessionData.partnerName}\n                                            className=\"w-6 h-6 rounded-full\"\n                                        />\n                                        <span className=\"text-[14px] font-medium text-[var(--black-500)]\">{sessionData.partnerName}</span>\n                                    </div>\n                                </div>\n\n                                <div className=\"flex items-center justify-between py-3 border-b border-[var(--black-50)]\">\n                                    <span className=\"text-[14px] text-[var(--black-300)]\">날짜/시간</span>\n                                    <span className=\"text-[14px] font-medium text-[var(--black-500)]\">\n                                        {formatDate(sessionData.date)} {sessionData.time}\n                                    </span>\n                                </div>\n\n                                <div className=\"flex items-center justify-between py-3 border-b border-[var(--black-50)]\">\n                                    <span className=\"text-[14px] text-[var(--black-300)]\">세션 길이</span>\n                                    <span className=\"text-[14px] font-medium text-[var(--black-500)]\">{sessionData.duration}분</span>\n                                </div>\n\n                                <div className=\"flex items-center justify-between py-3 border-b border-[var(--black-50)]\">\n                                    <span className=\"text-[14px] text-[var(--black-300)]\">언어</span>\n                                    <span className=\"text-[14px] font-medium text-[var(--black-500)]\">\n                                        {sessionData.language === 'en' ? 'English' :\n                                            sessionData.language === 'ko' ? '한국어' :\n                                                sessionData.language === 'ja' ? '日本語' :\n                                                    sessionData.language === 'zh' ? '中文' : 'Español'}\n                                    </span>\n                                </div>\n\n                                {sessionData.isRecurring && (\n                                    <div className=\"flex items-center justify-between py-3 border-b border-[var(--black-50)]\">\n                                        <span className=\"text-[14px] text-[var(--black-300)]\">반복</span>\n                                        <span className=\"text-[14px] font-medium text-[var(--black-500)]\">\n                                            {sessionData.recurringType === 'weekly' ? '매주' :\n                                                sessionData.recurringType === 'biweekly' ? '격주' : '매월'}\n                                        </span>\n                                    </div>\n                                )}\n\n                                <div className=\"flex items-center justify-between py-3\">\n                                    <span className=\"text-[14px] text-[var(--black-300)]\">리마인더</span>\n                                    <span className=\"text-[14px] font-medium text-[var(--black-500)]\">\n                                        {sessionData.reminderTime === 15 ? '15분 전' :\n                                            sessionData.reminderTime === 30 ? '30분 전' :\n                                                sessionData.reminderTime === 60 ? '1시간 전' : '하루 전'}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/* 메모 */}\n                        <div className=\"bg-white rounded-[20px] p-6 border border-[#E7E7E7]\">\n                            <h2 className=\"text-[18px] font-bold text-[#111111] mb-4\">메모 (선택사항)</h2>\n                            <textarea\n                                value={sessionData.notes}\n                                onChange={(e) => setSessionData({ ...sessionData, notes: e.target.value })}\n                                placeholder=\"세션에 대한 메모를 입력하세요...\"\n                                className=\"w-full p-4 rounded-lg border border-[#E7E7E7] text-[14px] outline-none focus:border-[#00C471] resize-none\"\n                                rows={3}\n                            />\n                        </div>\n                    </div>\n                )}\n\n                {/* Buttons */}\n                <div className=\"mt-8 flex gap-3\">\n                    {step > 1 && (\n                        <CommonButton\n                            onClick={handleBack}\n                            variant=\"secondary\"\n                            className=\"flex-1\"\n                        >\n                            이전\n                        </CommonButton>\n                    )}\n                    {step < 3 ? (\n                        <CommonButton\n                            onClick={handleNext}\n                            variant=\"primary\"\n                            className=\"flex-1\"\n                            disabled={\n                                (step === 1 && !sessionData.partnerId) ||\n                                (step === 2 && !sessionData.time)\n                            }\n                        >\n                            다음\n                        </CommonButton>\n                    ) : (\n                        <CommonButton\n                            onClick={handleSchedule}\n                            variant=\"primary\"\n                            className=\"flex-1\"\n                        >\n                            예약 완료\n                        </CommonButton>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/VideoControlsDemo.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/VideoSession.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'isFullscreen' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":20,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFullscreen"},"fix":{"range":[908,920],"text":""},"desc":"Remove unused variable 'isFullscreen'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowSubtitles' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":22,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowSubtitles"},"fix":{"range":[1039,1057],"text":""},"desc":"Remove unused variable 'setShowSubtitles'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowTranslation' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":23,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowTranslation"},"fix":{"range":[1103,1123],"text":""},"desc":"Remove unused variable 'setShowTranslation'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowAIFeedback' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":25,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowAIFeedback"},"fix":{"range":[1238,1257],"text":""},"desc":"Remove unused variable 'setShowAIFeedback'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setUserLevel' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":26,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUserLevel"},"fix":{"range":[1297,1311],"text":""},"desc":"Remove unused variable 'setUserLevel'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'sessionStatus' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":35,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"sessionStatus"},"fix":{"range":[1544,1567],"text":""},"desc":"Remove unused variable 'sessionStatus'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'sessionSettings' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":39,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"sessionSettings"},"fix":{"range":[1633,1658],"text":""},"desc":"Remove unused variable 'sessionSettings'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'getUserMedia' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":56,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"getUserMedia"},"fix":{"range":[2029,2051],"text":""},"desc":"Remove unused variable 'getUserMedia'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Minimize2, Maximize2 } from 'lucide-react';\nimport VideoControls from '../../components/VideoControls';\nimport useSessionStore from '../../store/sessionStore';\nimport useProfileStore from '../../store/profileStore';\nimport useWebRTC from '../../hooks/useWebRTC';\nimport RealtimeSubtitles from '../../components/RealtimeSubtitles';\nimport TranslatedSubtitles from '../../components/TranslatedSubtitles';\nimport AIFeedback from '../../components/AIFeedback';\n\nexport default function VideoSession() {\n    const navigate = useNavigate();\n    const { sessionId } = useParams();\n\n    // UI 상태\n    const [isScreenSharing, setIsScreenSharing] = useState(false);\n    const [currentLanguage, setCurrentLanguage] = useState('en');\n    const [isPiPMode, setIsPiPMode] = useState(false);\n    const [isFullscreen, setIsFullscreen] = useState(false);\n    const [callDuration, setCallDuration] = useState(0);\n    const [showSubtitles, setShowSubtitles] = useState(true);\n    const [showTranslation, setShowTranslation] = useState(true);\n    const [currentTranscript, setCurrentTranscript] = useState(null);\n    const [showAIFeedback, setShowAIFeedback] = useState(true);\n    const [userLevel, setUserLevel] = useState('B1'); // 사용자 레벨 (프로필에서 가져오기)\n\n    const timerRef = useRef(null);\n    const localVideoRef = useRef(null);\n    const remoteVideoRef = useRef(null);\n    const containerRef = useRef(null);\n\n    const {\n        activeSession,\n        sessionStatus,\n        startSession,\n        endSession,\n        switchLanguage,\n        sessionSettings\n    } = useSessionStore();\n\n    const { name: userName, profileImage: userProfileImage } = useProfileStore();\n\n    // WebRTC Hook 사용\n    const {\n        connectionState,\n        localStream,\n        remoteStreams,\n        isAudioEnabled,\n        isVideoEnabled,\n        error,\n        stats,\n        toggleAudio,\n        toggleVideo,\n        disconnect: disconnectWebRTC,\n        getUserMedia\n    } = useWebRTC(sessionId, userName);\n\n    // 더미 파트너 데이터 (실제로는 activeSession에서 가져와야 함)\n    const partner = {\n        name: \"Emma Wilson\",\n        profileImage: \"/assets/basicProfilePic.png\",\n        level: \"Intermediate\",\n        nativeLanguage: \"English\",\n        learningLanguage: \"Korean\"\n    };\n\n    useEffect(() => {\n        // 세션 시작\n        if (sessionId && !activeSession) {\n            startSession(sessionId);\n        }\n\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [sessionId, startSession, activeSession]);\n\n    // 로컬 스트림을 비디오 요소에 연결\n    useEffect(() => {\n        if (localStream && localVideoRef.current) {\n            localVideoRef.current.srcObject = localStream;\n        }\n    }, [localStream]);\n\n    // 리모트 스트림을 비디오 요소에 연결 (첫 번째 스트림)\n    useEffect(() => {\n        if (remoteStreams.size > 0 && remoteVideoRef.current) {\n            const firstRemoteStream = remoteStreams.values().next().value;\n            remoteVideoRef.current.srcObject = firstRemoteStream;\n        }\n    }, [remoteStreams]);\n\n    useEffect(() => {\n        // 통화 시간 타이머\n        if (connectionState === 'connected' && !timerRef.current) {\n            timerRef.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n            }, 1000);\n        } else if (connectionState !== 'connected' && timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n        }\n\n        return () => {\n            if (timerRef.current) {\n                clearInterval(timerRef.current);\n            }\n        };\n    }, [connectionState]);\n\n    const formatDuration = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const mins = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${mins}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    const handleToggleMute = () => {\n        toggleAudio();\n    };\n\n    const handleToggleVideo = () => {\n        toggleVideo();\n    };\n\n    const handleToggleScreenShare = () => {\n        setIsScreenSharing(!isScreenSharing);\n        // 실제 화면 공유 로직 구현 필요\n    };\n\n    const handleToggleLanguage = () => {\n        const newLang = currentLanguage === 'en' ? 'ko' : 'en';\n        setCurrentLanguage(newLang);\n        switchLanguage();\n    };\n\n    const handleEndCall = () => {\n        if (window.confirm('통화를 종료하시겠습니까?')) {\n            disconnectWebRTC();\n            endSession();\n            navigate('/sessions');\n        }\n    };\n\n    const handleTogglePiP = () => {\n        setIsPiPMode(!isPiPMode);\n    };\n\n    const handleToggleFullscreen = async () => {\n        if (!document.fullscreenElement) {\n            await containerRef.current?.requestFullscreen();\n            setIsFullscreen(true);\n        } else {\n            await document.exitFullscreen();\n            setIsFullscreen(false);\n        }\n    };\n\n    const handleOpenSettings = () => {\n        // 설정 모달 열기\n        console.log('Open settings');\n    };\n\n    return (\n        <div ref={containerRef} className=\"min-h-screen bg-[var(--black-700)] text-white flex flex-col relative\">\n            {/* 실시간 자막/번역 */}\n            {showSubtitles && localStream && (\n                <div className=\"absolute top-4 left-4 z-40 w-80\">\n                    <RealtimeSubtitles\n                        stream={localStream}\n                        language={currentLanguage === 'en' ? 'en' : 'ko'}\n                        onTranscript={setCurrentTranscript}\n                        className=\"bg-black/80 backdrop-blur-sm\"\n                    />\n                </div>\n            )}\n\n            {showTranslation && currentTranscript && (\n                <div className=\"absolute bottom-32 left-1/2 transform -translate-x-1/2 z-40 w-96\">\n                    <TranslatedSubtitles\n                        transcript={currentTranscript}\n                        sourceLanguage={currentLanguage === 'en' ? 'en' : 'ko'}\n                        targetLanguage={currentLanguage === 'en' ? 'ko' : 'en'}\n                        onTranslation={(translation) => {\n                            console.log('Translation:', translation);\n                        }}\n                        className=\"shadow-2xl\"\n                    />\n                </div>\n            )}\n\n            {/* Header */}\n            <div className=\"bg-[var(--black-600)] border-b border-[var(--black-400)] px-6 py-4 flex-shrink-0\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                        <h1 className=\"text-[18px] font-bold\">1:1 비디오 세션</h1>\n                        {connectionState === 'connected' && (\n                            <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-2 h-2 bg-[var(--green-500)] rounded-full animate-pulse\" />\n                                <span className=\"text-[14px] text-[var(--green-500)]\">연결됨</span>\n                            </div>\n                        )}\n                        {error && (\n                            <div className=\"flex items-center space-x-2\">\n                                <div className=\"w-2 h-2 bg-[var(--danger-red)] rounded-full\" />\n                                <span className=\"text-[14px] text-[var(--danger-red)]\">{error}</span>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                        <div className=\"text-[18px] font-mono\">\n                            {formatDuration(callDuration)}\n                        </div>\n                        <div className=\"text-[14px] text-[#929292]\">\n                            {currentLanguage === 'en' ? 'English' : '한국어'}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {/* Main Video Area */}\n            <div className=\"flex-1 relative overflow-hidden\">\n                {/* Remote Video (Full Screen) */}\n                <div className=\"absolute inset-0\">\n                    <video\n                        ref={remoteVideoRef}\n                        className=\"w-full h-full object-cover\"\n                        autoPlay\n                        playsInline\n                    />\n                    {/* Partner Info Overlay */}\n                    <div className=\"absolute bottom-4 left-4 bg-black/50 backdrop-blur-sm rounded-lg p-3\">\n                        <div className=\"flex items-center space-x-3\">\n                            <img\n                                src={partner.profileImage}\n                                alt={partner.name}\n                                className=\"w-10 h-10 rounded-full object-cover\"\n                            />\n                            <div>\n                                <p className=\"text-[14px] font-semibold\">{partner.name}</p>\n                                <p className=\"text-[12px] text-[#929292]\">{partner.level}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Local Video (PiP) */}\n                <div className={`absolute ${isPiPMode ? 'bottom-4 right-4' : 'top-4 right-4'\n                    } w-64 h-48 bg-[var(--black-600)] rounded-lg overflow-hidden shadow-2xl \n        transition-all duration-300 ${isVideoEnabled ? '' : 'opacity-50'}`}>\n                    <video\n                        ref={localVideoRef}\n                        className=\"w-full h-full object-cover\"\n                        autoPlay\n                        playsInline\n                        muted\n                    />\n                    {!isVideoEnabled && (\n                        <div className=\"absolute inset-0 flex items-center justify-center bg-[var(--black-600)]\">\n                            <img\n                                src={userProfileImage || \"/assets/basicProfilePic.png\"}\n                                alt={userName}\n                                className=\"w-20 h-20 rounded-full object-cover\"\n                            />\n                        </div>\n                    )}\n                    {/* PiP Controls */}\n                    <button\n                        onClick={handleTogglePiP}\n                        className=\"absolute top-2 right-2 p-2 bg-black/50 hover:bg-black/70 \n            rounded-full transition-colors duration-200\"\n                    >\n                        {isPiPMode ? (\n                            <Maximize2 className=\"w-4 h-4\" />\n                        ) : (\n                            <Minimize2 className=\"w-4 h-4\" />\n                        )}\n                    </button>\n                    {/* User Name */}\n                    <div className=\"absolute bottom-2 left-2 bg-black/50 backdrop-blur-sm rounded px-2 py-1\">\n                        <p className=\"text-[12px]\">{userName || \"나\"}</p>\n                    </div>\n                </div>\n\n                {/* Screen Share Indicator */}\n                {isScreenSharing && (\n                    <div className=\"absolute top-4 left-1/2 transform -translate-x-1/2 \n          bg-[var(--green-500)] text-white px-4 py-2 rounded-full flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\" />\n                        <span className=\"text-[14px] font-medium\">화면 공유 중</span>\n                    </div>\n                )}\n\n                {/* Connection Status */}\n                {connectionState === 'connecting' && (\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/50\">\n                        <div className=\"text-center\">\n                            <div className=\"inline-flex items-center space-x-2 mb-4\">\n                                <div className=\"w-3 h-3 bg-[var(--warning-yellow)] rounded-full animate-pulse\" />\n                                <p className=\"text-[18px] text-[var(--warning-yellow)]\">연결 중...</p>\n                            </div>\n                            <p className=\"text-[14px] text-[var(--black-200)]\">\n                                화상 통화를 준비하고 있습니다\n                            </p>\n                            {stats && (\n                                <div className=\"mt-4 text-[12px] text-[var(--black-300)]\">\n                                    품질: {stats.quality} | 대기시간: {stats.latency}ms\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                )}\n\n                {/* AI Feedback Component */}\n                {showAIFeedback && connectionState === 'connected' && (\n                    <AIFeedback \n                        transcript={currentTranscript}\n                        userLevel={userLevel}\n                        isEnabled={showAIFeedback}\n                    />\n                )}\n            </div>\n\n            {/* Control Bar */}\n            <div className=\"bg-[var(--black-600)] border-t border-[var(--black-400)] p-6 flex-shrink-0\">\n                <VideoControls\n                    isMuted={!isAudioEnabled}\n                    isVideoOn={isVideoEnabled}\n                    isScreenSharing={isScreenSharing}\n                    currentLanguage={currentLanguage}\n                    onToggleMute={handleToggleMute}\n                    onToggleVideo={handleToggleVideo}\n                    onToggleScreenShare={handleToggleScreenShare}\n                    onToggleLanguage={handleToggleLanguage}\n                    onEndCall={handleEndCall}\n                    onOpenSettings={handleOpenSettings}\n                    onToggleFullscreen={handleToggleFullscreen}\n                    showVideo={true}\n                    showScreenShare={true}\n                    showLanguageToggle={true}\n                    showSettings={true}\n                    showFullscreen={true}\n                    variant=\"dark\"\n                />\n                \n                {/* Connection Stats */}\n                {stats && connectionState === 'connected' && (\n                    <div className=\"mt-4 flex justify-center\">\n                        <div className=\"flex items-center space-x-6 text-[12px] text-[var(--black-300)]\">\n                            <span>대역폭: {stats.bitrate} kbps</span>\n                            <span>패킷 손실: {stats.packetLoss}%</span>\n                            <span>지연: {stats.latency}ms</span>\n                            <span className={`px-2 py-1 rounded ${\n                                stats.quality === 'good' ? 'bg-green-500/20 text-green-400' :\n                                stats.quality === 'fair' ? 'bg-yellow-500/20 text-yellow-400' :\n                                'bg-red-500/20 text-red-400'\n                            }`}>\n                                {stats.quality === 'good' ? '양호' : stats.quality === 'fair' ? '보통' : '불량'}\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/VideoSessionCheck.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Session/VideoSessionRoom.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'isTranscribing' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"isTranscribing"},"fix":{"range":[1514,1528],"text":""},"desc":"Remove unused variable 'isTranscribing'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'transcripts' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":29,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"transcripts"},"fix":{"range":[1577,1588],"text":""},"desc":"Remove unused variable 'transcripts'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setSubtitlePosition' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":30,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSubtitlePosition"},"fix":{"range":[1647,1668],"text":""},"desc":"Remove unused variable 'setSubtitlePosition'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setSubtitleLanguage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":31,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSubtitleLanguage"},"fix":{"range":[1717,1738],"text":""},"desc":"Remove unused variable 'setSubtitleLanguage'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setShowOriginalSubtitle' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":32,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowOriginalSubtitle"},"fix":{"range":[1787,1812],"text":""},"desc":"Remove unused variable 'setShowOriginalSubtitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setEnableTranslation' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":33,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"setEnableTranslation"},"fix":{"range":[1859,1881],"text":""},"desc":"Remove unused variable 'setEnableTranslation'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'connectionStats' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"connectionStats"},"fix":{"range":[2378,2393],"text":""},"desc":"Remove unused variable 'connectionStats'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cleanup', 'initializeCall', and 'loadRoomInfo'. Either include them or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [cleanup, initializeCall, loadRoomInfo, roomId]","fix":{"range":[2770,2778],"text":"[cleanup, initializeCall, loadRoomInfo, roomId]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'stream' is defined but never used.","line":185,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"stream"},"fix":{"range":[6728,6736],"text":""},"desc":"Remove unused variable 'stream'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleTranscript' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":396,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":396,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleTranscript"},"fix":{"range":[13367,13732],"text":""},"desc":"Remove unused variable 'handleTranscript'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'toggleSubtitle' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":412,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":412,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"toggleSubtitle"},"fix":{"range":[13747,13935],"text":""},"desc":"Remove unused variable 'toggleSubtitle'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'getTargetLanguages' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":422,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":422,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"getTargetLanguages"},"fix":{"range":[13974,14407],"text":""},"desc":"Remove unused variable 'getTargetLanguages'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport VideoControls from '../../components/VideoControls';\nimport LiveTranscription from '../../components/LiveTranscription';\nimport SubtitleDisplay, { SubtitleController } from '../../components/SubtitleDisplay';\nimport RealtimeSubtitlePanel from '../../components/RealtimeSubtitlePanel';\nimport TranslatedSubtitles from '../../components/TranslatedSubtitles';\nimport { Loader2, Signal, SignalZero, Users, Maximize2, Minimize2, Monitor } from 'lucide-react';\nimport { webrtcManager } from '../../services/webrtc';\nimport { webrtcAPI } from '../../api/webrtc';\nimport { log } from '../../utils/logger';\n\nexport default function VideoSessionRoom() {\n  const navigate = useNavigate();\n  const { roomId } = useParams();\n  const [connectionState, setConnectionState] = useState('connecting'); // connecting, connected, failed, disconnected\n  const [isMuted, setIsMuted] = useState(false);\n  const [isCameraOn, setIsCameraOn] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [signalStrength, setSignalStrength] = useState(3); // 0-3\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n  const [isPipMode, setIsPipMode] = useState(false);\n  const [pipSupported, setPipSupported] = useState(false);\n\n  // 실시간 자막 상태\n  const [isSubtitleEnabled, setIsSubtitleEnabled] = useState(false);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [transcripts, setTranscripts] = useState([]);\n  const [subtitlePosition, setSubtitlePosition] = useState('bottom');\n  const [subtitleLanguage, setSubtitleLanguage] = useState('en');\n  const [showOriginalSubtitle, setShowOriginalSubtitle] = useState(false);\n  const [enableTranslation, setEnableTranslation] = useState(true);\n\n  // Partner info (로드된 세션 데이터에서 가져옴)\n  const [partnerInfo, setPartnerInfo] = useState(null);\n\n  // WebRTC refs\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null); // For primary remote participant\n  const remoteVideosRef = useRef(new Map()); // Support multiple participants\n  const durationIntervalRef = useRef(null);\n  const statsIntervalRef = useRef(null);\n\n  // WebRTC state\n  const [participants, setParticipants] = useState(new Map());\n  const [connectionStats, setConnectionStats] = useState({});\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n\n  useEffect(() => {\n    // Check if Picture-in-Picture API is supported\n    setPipSupported('pictureInPictureEnabled' in document);\n\n    initializeCall();\n    loadRoomInfo();\n\n    return () => {\n      cleanup();\n    };\n  }, [roomId]);\n\n  useEffect(() => {\n    if (connectionState === 'connected') {\n      // Start duration timer\n      durationIntervalRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n    } else {\n      // Clear timer\n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n      }\n    }\n\n    return () => {\n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n      }\n    };\n  }, [connectionState]);\n\n  const initializeCall = async () => {\n    try {\n      setConnectionState('connecting');\n      log.info('화상 세션 초기화 시작', { roomId }, 'VIDEO_SESSION');\n\n      // Setup WebRTC manager callbacks\n      setupWebRTCCallbacks();\n\n      // Initialize media with video constraints\n      const constraints = {\n        video: {\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n          facingMode: 'user'\n        },\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      };\n\n      // Initialize media and connect to room\n      await webrtcManager.initializeMedia(constraints);\n      \n      const userId = localStorage.getItem('userId') || 'guest-' + Date.now();\n      const userName = localStorage.getItem('userName') || 'Anonymous';\n      \n      await webrtcManager.connect(roomId, { userId, userName }, {\n        autoReconnect: true,\n        connectionTimeout: 15000\n      });\n\n    } catch (error) {\n      log.error('화상 세션 초기화 실패', error, 'VIDEO_SESSION');\n      setConnectionState('failed');\n    }\n  };\n\n  // 파트너 정보 로드\n  const loadRoomInfo = async () => {\n    try {\n      const info = await webrtcAPI.getRoomInfo(roomId);\n      if (info) {\n        const metadata = info.metadata || {};\n        const currentUserId = localStorage.getItem('userId');\n        const remoteParticipant = (info.participants || []).find((participant) => participant.id !== currentUserId);\n\n        setPartnerInfo({\n          name: metadata.partnerName || remoteParticipant?.name || 'Partner',\n          avatar: metadata.partnerAvatar || '/assets/basicProfilePic.png',\n          level: metadata.partnerLevel || 'Unknown',\n          nativeLanguage: metadata.partnerNativeLanguage || 'Unknown',\n          learningLanguage: metadata.partnerLearningLanguage || 'Unknown'\n        });\n      }\n    } catch (error) {\n      log.warn('룸 정보 로드 실패', error, 'VIDEO_SESSION');\n    }\n  };\n\n  // Setup WebRTC manager callbacks\n  const setupWebRTCCallbacks = () => {\n    // Local stream callback\n    webrtcManager.on('onLocalStream', (stream) => {\n      log.info('로컬 스트림 수신', null, 'VIDEO_SESSION');\n      setLocalStream(stream);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n    });\n\n    // Remote stream callback\n    webrtcManager.on('onRemoteStream', (userId, stream) => {\n      log.info('원격 스트림 수신', { userId }, 'VIDEO_SESSION');\n      \n      // Set first remote stream for subtitles\n      if (remoteVideosRef.current.size === 0) {\n        setRemoteStream(stream);\n      }\n      \n      // Create or update video element for remote participant\n      let videoElement = remoteVideosRef.current.get(userId);\n      if (!videoElement) {\n        videoElement = document.createElement('video');\n        videoElement.autoplay = true;\n        videoElement.playsInline = true;\n        videoElement.id = `remote-video-${userId}`;\n        \n        // For now, use the single remote video ref for the first participant\n        // In the future, this can be expanded to support multiple video elements\n        if (remoteVideosRef.current.size === 0 && remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n        }\n        \n        remoteVideosRef.current.set(userId, videoElement);\n      }\n      \n      videoElement.srcObject = stream;\n    });\n\n    // Remote stream removed callback\n    webrtcManager.on('onRemoteStreamRemoved', (userId, stream) => {\n      log.info('원격 스트림 제거', { userId }, 'VIDEO_SESSION');\n      \n      const videoElement = remoteVideosRef.current.get(userId);\n      if (videoElement) {\n        videoElement.srcObject = null;\n        remoteVideosRef.current.delete(userId);\n      }\n\n      // Update participants\n      setParticipants(prev => {\n        const updated = new Map(prev);\n        updated.delete(userId);\n        return updated;\n      });\n    });\n\n    // Participant joined callback\n    webrtcManager.on('onParticipantJoined', (participant) => {\n      log.info('참가자 입장', participant, 'VIDEO_SESSION');\n      setParticipants(prev => new Map(prev).set(participant.userId, participant));\n\n      const currentUserId = localStorage.getItem('userId') || 'guest';\n      if (participant.userId !== currentUserId) {\n        setPartnerInfo((prev) => ({\n          name: participant.userName || prev?.name || 'Partner',\n          avatar: prev?.avatar || '/assets/basicProfilePic.png',\n          level: prev?.level || 'Unknown',\n          nativeLanguage: prev?.nativeLanguage || 'Unknown',\n          learningLanguage: prev?.learningLanguage || 'Unknown'\n        }));\n      }\n    });\n\n    // Participant left callback\n    webrtcManager.on('onParticipantLeft', (participant) => {\n      log.info('참가자 퇴장', participant, 'VIDEO_SESSION');\n      setParticipants(prev => {\n        const updated = new Map(prev);\n        updated.delete(participant.userId);\n        return updated;\n      });\n\n      const currentUserId = localStorage.getItem('userId') || 'guest';\n      if (participant.userId !== currentUserId) {\n        setPartnerInfo(null);\n      }\n    });\n\n    // Connection state change callback\n    webrtcManager.on('onConnectionStateChange', (state) => {\n      log.info('연결 상태 변경', { state }, 'VIDEO_SESSION');\n      setConnectionState(state);\n      \n      if (state === 'connected') {\n        // Start stats and connection monitoring\n        startStatsMonitoring();\n        webrtcManager.startConnectionMonitoring();\n      } else if (state === 'disconnected' || state === 'failed') {\n        stopStatsMonitoring();\n        webrtcManager.stopConnectionMonitoring();\n      } else if (state === 'reconnecting') {\n        // Show reconnecting state in UI\n      }\n    });\n\n    // Error callback\n    webrtcManager.on('onError', (message, error) => {\n      log.error('WebRTC 오류', { message, error }, 'VIDEO_SESSION');\n      setConnectionState('failed');\n    });\n\n    // Chat message callback\n    webrtcManager.on('onChatMessage', (message) => {\n      if (message.type === 'subtitle' && isSubtitleEnabled) {\n        setTranscripts(prev => [...prev, {\n          ...message,\n          isRemote: true,\n          timestamp: Date.now()\n        }]);\n      } else if (message.type === 'language-change') {\n        setCurrentLanguage(message.language);\n      }\n    });\n  };\n\n  // Statistics monitoring functions\n  const startStatsMonitoring = () => {\n    if (statsIntervalRef.current) {\n      clearInterval(statsIntervalRef.current);\n    }\n\n    statsIntervalRef.current = setInterval(async () => {\n      try {\n        const stats = await webrtcManager.getConnectionStats();\n        setConnectionStats(stats);\n        \n        // Update signal strength based on RTT\n        let bestRtt = Infinity;\n        Object.values(stats.detailedStats).forEach(peerStats => {\n          if (peerStats.rtt && peerStats.rtt < bestRtt) {\n            bestRtt = peerStats.rtt;\n          }\n        });\n\n        if (bestRtt < Infinity) {\n          if (bestRtt < 50) setSignalStrength(3);\n          else if (bestRtt < 100) setSignalStrength(2);\n          else if (bestRtt < 200) setSignalStrength(1);\n          else setSignalStrength(0);\n        }\n        \n      } catch (error) {\n        log.error('통계 수집 실패', error, 'VIDEO_SESSION');\n      }\n    }, 2000); // Update stats every 2 seconds\n  };\n\n  const stopStatsMonitoring = () => {\n    if (statsIntervalRef.current) {\n      clearInterval(statsIntervalRef.current);\n      statsIntervalRef.current = null;\n    }\n  };\n\n  // Media control handlers\n  const handleMicToggle = () => {\n    const newMutedState = !isMuted;\n    setIsMuted(newMutedState);\n    webrtcManager.toggleAudio(!newMutedState);\n    log.info('마이크 토글', { muted: newMutedState }, 'VIDEO_SESSION');\n  };\n\n  const handleCameraToggle = () => {\n    const newCameraState = !isCameraOn;\n    setIsCameraOn(newCameraState);\n    webrtcManager.toggleVideo(newCameraState);\n    log.info('카메라 토글', { enabled: newCameraState }, 'VIDEO_SESSION');\n  };\n\n  const handleScreenShare = async () => {\n    try {\n      if (!isScreenSharing) {\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({\n          video: true,\n          audio: false\n        });\n\n        // Switch to screen share (webrtcManager will handle track replacement)\n        await webrtcManager.switchDevice('videoinput', screenStream.getVideoTracks()[0]);\n        \n        // Listen for screen share end\n        screenStream.getVideoTracks()[0].onended = () => {\n          setIsScreenSharing(false);\n          log.info('화면 공유 자동 종료', null, 'VIDEO_SESSION');\n        };\n\n        setIsScreenSharing(true);\n        log.info('화면 공유 시작', null, 'VIDEO_SESSION');\n\n        // Notify participants via chat\n        webrtcManager.sendChatMessage('screen-share-started');\n      } else {\n        // Stop screen sharing and return to camera\n        setIsScreenSharing(false);\n        log.info('화면 공유 중지', null, 'VIDEO_SESSION');\n        \n        // Notify participants\n        webrtcManager.sendChatMessage('screen-share-stopped');\n      }\n    } catch (error) {\n      log.error('화면 공유 오류', error, 'VIDEO_SESSION');\n    }\n  };\n\n  const handlePictureInPicture = async () => {\n    if (!pipSupported) return;\n\n    try {\n      if (!isPipMode && remoteVideoRef.current) {\n        await remoteVideoRef.current.requestPictureInPicture();\n        setIsPipMode(true);\n      } else if (document.pictureInPictureElement) {\n        await document.exitPictureInPicture();\n        setIsPipMode(false);\n      }\n    } catch (error) {\n      console.error('Failed to toggle PiP:', error);\n    }\n  };\n\n  const handleEndCall = async () => {\n    log.info('화상 통화 종료', null, 'VIDEO_SESSION');\n    await cleanup();\n    navigate('/sessions');\n  };\n\n  const handleLanguageToggle = () => {\n    const newLang = currentLanguage === 'en' ? 'ko' : 'en';\n    setCurrentLanguage(newLang);\n    \n    // Send language change to participants\n    webrtcManager.sendChatMessage(JSON.stringify({\n      type: 'language-change',\n      language: newLang\n    }));\n    \n    log.info('언어 전환', { from: currentLanguage, to: newLang }, 'VIDEO_SESSION');\n  };\n\n  // 실시간 전사 핸들러\n  const handleTranscript = useCallback((transcript) => {\n    const timestampedTranscript = {\n      ...transcript,\n      timestamp: Date.now()\n    };\n    \n    setTranscripts(prev => [...prev, timestampedTranscript]);\n\n    // 파트너에게 자막 전송\n    webrtcManager.sendChatMessage(JSON.stringify({\n      type: 'subtitle',\n      subtitle: timestampedTranscript\n    }));\n  }, []);\n\n  // 자막 토글\n  const toggleSubtitle = () => {\n    setIsSubtitleEnabled(prev => !prev);\n    if (!isSubtitleEnabled) {\n      setIsTranscribing(true);\n    } else {\n      setIsTranscribing(false);\n    }\n  };\n\n  // 타겟 언어 목록 생성 (현재 언어와 자막 언어 포함)\n  const getTargetLanguages = useCallback(() => {\n    const languages = new Set([subtitleLanguage]);\n\n    // 파트너 언어 추가\n    if (partnerInfo && partnerInfo.nativeLanguage) {\n      const langCode = partnerInfo.nativeLanguage.toLowerCase().substring(0, 2);\n      languages.add(langCode);\n    }\n\n    // 현재 대화 언어 추가\n    languages.add(currentLanguage);\n\n    return Array.from(languages);\n  }, [subtitleLanguage, currentLanguage, partnerInfo]);\n\n  const cleanup = async () => {\n    log.info('화상 세션 정리 시작', null, 'VIDEO_SESSION');\n\n    // Exit PiP if active\n    try {\n      if (document.pictureInPictureElement) {\n        await document.exitPictureInPicture();\n      }\n    } catch (error) {\n      log.warn('PiP 종료 실패', error, 'VIDEO_SESSION');\n    }\n\n    // Stop monitoring intervals\n    stopStatsMonitoring();\n    \n    if (durationIntervalRef.current) {\n      clearInterval(durationIntervalRef.current);\n      durationIntervalRef.current = null;\n    }\n\n    // Clean up remote video elements\n    remoteVideosRef.current.forEach((videoElement) => {\n      if (videoElement.parentNode) {\n        videoElement.parentNode.removeChild(videoElement);\n      }\n    });\n    remoteVideosRef.current.clear();\n\n    // Disconnect WebRTC manager\n    try {\n      await webrtcManager.disconnect();\n      log.info('WebRTC 연결 정리 완료', null, 'VIDEO_SESSION');\n    } catch (error) {\n      log.error('WebRTC 연결 정리 실패', error, 'VIDEO_SESSION');\n    }\n\n    setPartnerInfo(null);\n\n    // Clear callbacks\n    webrtcManager.off('onLocalStream');\n    webrtcManager.off('onRemoteStream');\n    webrtcManager.off('onRemoteStreamRemoved');\n    webrtcManager.off('onParticipantJoined');\n    webrtcManager.off('onParticipantLeft');\n    webrtcManager.off('onConnectionStateChange');\n    webrtcManager.off('onError');\n    webrtcManager.off('onChatMessage');\n  };\n\n  const formatDuration = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getSignalIcon = () => {\n    if (signalStrength === 0) return <SignalZero className=\"w-5 h-5 text-[var(--red)]\" />;\n    return <Signal className={`w-5 h-5 ${signalStrength === 3 ? 'text-[var(--green-500)]' :\n      signalStrength === 2 ? 'text-[var(--warning-yellow)]' :\n        'text-[var(--blue)]'\n      }`} />;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[var(--black-600)] flex flex-col\">\n      {/* Header */}\n      <div className=\"bg-[var(--black-400)] border-b border-[var(--black-400)] px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <h1 className=\"text-[20px] font-bold text-white\">화상 통화</h1>\n            <div className=\"flex items-center gap-2 text-[var(--black-200)]\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"text-sm\">\n                {participants.size + 1}명 참가 중\n              </span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            {/* Connection Status */}\n            <div className=\"flex items-center gap-2\">\n              {getSignalIcon()}\n              <span className=\"text-sm text-[var(--black-200)]\">\n                {connectionState === 'connected' ? '연결됨' :\n                  connectionState === 'connecting' ? '연결 중...' :\n                    connectionState === 'reconnecting' ? '복구 중...' :\n                      connectionState === 'failed' ? '연결 실패' :\n                        '연결 끊김'}\n              </span>\n            </div>\n\n            {/* Screen Share Indicator */}\n            {isScreenSharing && (\n              <div className=\"flex items-center gap-2 px-3 py-1 bg-[rgba(66,133,244,0.2)] rounded-full\">\n                <Monitor className=\"w-4 h-4 text-[var(--blue)]\" />\n                <span className=\"text-sm text-[var(--blue)]\">화면 공유 중</span>\n              </div>\n            )}\n\n            {/* Duration */}\n            {connectionState === 'connected' && (\n              <div className=\"text-white font-mono\">\n                {formatDuration(duration)}\n              </div>\n            )}\n\n            {/* PiP Button */}\n            {pipSupported && connectionState === 'connected' && (\n              <button\n                onClick={handlePictureInPicture}\n                className=\"p-2 rounded-lg hover:bg-[var(--black-400)] transition-colors\"\n                title={isPipMode ? \"PiP 모드 종료\" : \"PiP 모드\"}\n              >\n                {isPipMode ? (\n                  <Minimize2 className=\"w-5 h-5 text-white\" />\n                ) : (\n                  <Maximize2 className=\"w-5 h-5 text-white\" />\n                )}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        {connectionState === 'connecting' ? (\n          <div className=\"text-center\">\n            <Loader2 className=\"w-16 h-16 text-[var(--green-500)] animate-spin mx-auto mb-4\" />\n            <p className=\"text-white text-lg mb-2\">연결 중...</p>\n            <p className=\"text-[var(--black-200)] text-sm\">잠시만 기다려주세요</p>\n          </div>\n        ) : connectionState === 'reconnecting' ? (\n          <div className=\"text-center\">\n            <Loader2 className=\"w-16 h-16 text-[var(--warning-yellow)] animate-spin mx-auto mb-4\" />\n            <p className=\"text-white text-lg mb-2\">연결 복구 중...</p>\n            <p className=\"text-[var(--black-200)] text-sm\">네트워크 연결을 복구하고 있습니다</p>\n          </div>\n        ) : connectionState === 'failed' ? (\n          <div className=\"text-center\">\n            <SignalZero className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n            <p className=\"text-white text-lg mb-2\">연결 실패</p>\n            <p className=\"text-[var(--black-200)] text-sm mb-4\">네트워크 연결을 확인해주세요</p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"px-6 py-2 bg-[var(--green-500)] text-white rounded-lg hover:bg-[var(--green-600)]\"\n            >\n              다시 시도\n            </button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 w-full max-w-6xl\">\n            {/* Remote Video (Partner) */}\n            <div className=\"relative bg-[var(--black-400)] rounded-[20px] overflow-hidden aspect-video\">\n              <video\n                ref={remoteVideoRef}\n                autoPlay\n                playsInline\n                className=\"w-full h-full object-cover\"\n              />\n\n              {/* Partner Info Overlay */}\n              <div className=\"absolute bottom-4 left-4 bg-black/60 backdrop-blur-sm rounded-lg p-3\">\n                <div className=\"flex items-center gap-3\">\n                  {partnerInfo ? (\n                    <>\n                      <img\n                        src={partnerInfo.avatar}\n                        alt={partnerInfo.name}\n                        className=\"w-10 h-10 rounded-full object-cover\"\n                      />\n                      <div>\n                        <p className=\"text-white font-medium\">{partnerInfo.name}</p>\n                        <p className=\"text-[var(--black-200)] text-sm\">Level {partnerInfo.level}</p>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"w-10 h-10 rounded-full bg-gray-300 animate-pulse\"></div>\n                      <div>\n                        <p className=\"text-white font-medium\">Loading...</p>\n                        <p className=\"text-[var(--black-200)] text-sm\">Partner info</p>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {/* Remote user indicators */}\n              <div className=\"absolute top-4 right-4 flex items-center gap-2\">\n                {/* Add remote user status indicators here */}\n              </div>\n            </div>\n\n            {/* Local Video (Self) */}\n            <div className=\"relative bg-[var(--black-400)] rounded-[20px] overflow-hidden aspect-video\">\n              <video\n                ref={localVideoRef}\n                autoPlay\n                muted\n                playsInline\n                className={`w-full h-full object-cover ${!isCameraOn ? 'hidden' : ''}`}\n              />\n\n              {!isCameraOn && (\n                <div className=\"w-full h-full flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <div className=\"w-24 h-24 bg-[var(--black-400)] rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <span className=\"text-[var(--black-200)] text-3xl\">👤</span>\n                    </div>\n                    <p className=\"text-[var(--black-200)]\">카메라가 꺼져있습니다</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Local user indicators */}\n              <div className=\"absolute bottom-4 right-4 flex items-center gap-2\">\n                {isMuted && (\n                  <div className=\"bg-[rgba(234,67,53,0.8)] px-3 py-1 rounded-full\">\n                    <span className=\"text-white text-sm\">음소거</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* 실시간 번역 자막 오버레이 */}\n      {isSubtitleEnabled && connectionState === 'connected' && (\n        <div className=\"fixed inset-0 pointer-events-none z-40\">\n          <TranslatedSubtitles\n            localStream={localStream}\n            remoteStream={remoteStream}\n            sourceLanguage=\"auto\"\n            defaultTargetLanguage={currentLanguage}\n            showOriginal={showOriginalSubtitle}\n            showTranslation={enableTranslation}\n            position={subtitlePosition}\n          />\n        </div>\n      )}\n\n      {/* 실시간 자막 패널 */}\n      <div className=\"fixed top-4 right-4 w-96 z-50 pointer-events-auto\">\n        <RealtimeSubtitlePanel\n          localStream={localStream}\n          remoteStream={remoteStream}\n          onTranscriptUpdate={(transcript) => {\n            setTranscripts(prev => [...prev, transcript]);\n          }}\n        />\n      </div>\n\n      {/* Controls */}\n      <div className=\"p-6 flex flex-col items-center gap-4\">\n\n        <VideoControls\n          isMuted={isMuted}\n          isVideoOn={isCameraOn}\n          isScreenSharing={isScreenSharing}\n          currentLanguage={currentLanguage}\n          onToggleMute={handleMicToggle}\n          onToggleVideo={handleCameraToggle}\n          onToggleScreenShare={handleScreenShare}\n          onToggleLanguage={handleLanguageToggle}\n          onEndCall={handleEndCall}\n          showVideo={true}\n          showScreenShare={true}\n          showLanguageToggle={true}\n          showSettings={false}\n          showFullscreen={false}\n          showParticipants={false}\n          className={connectionState !== 'connected' ? 'opacity-50 pointer-events-none' : ''}\n          variant=\"dark\"\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/AccountSettings.jsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAccountSettings'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadAccountSettings]","fix":{"range":[1016,1018],"text":"[loadAccountSettings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronRight, Camera, Mail, Phone, User, MapPin } from 'lucide-react';\nimport { getAccountSettings, updateAccountSettings } from '../../api/settings';\nimport { getUserProfile } from '../../api/user';\nimport CommonButton from '../../components/CommonButton';\nimport ProfileImageUpload from '../../components/ProfileImageUpload';\nimport { useAlert } from '../../hooks/useAlert.jsx';\n\nconst AccountSettings = () => {\n  const navigate = useNavigate();\n  const { showSuccess, showError } = useAlert();\n  const [settings, setSettings] = useState({\n    email: '',\n    phoneNumber: '',\n    englishName: '',\n    residence: '',\n    profileImage: null,\n    bio: '',\n    birthDate: '',\n    gender: ''\n  });\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [validationErrors, setValidationErrors] = useState({});\n\n  useEffect(() => {\n    loadAccountSettings();\n  }, []);\n\n  const loadAccountSettings = async () => {\n    try {\n      setLoading(true);\n      \n      // 프로필 정보와 계정 설정 정보를 모두 가져오기\n      const [profileData, accountData] = await Promise.allSettled([\n        getUserProfile(),\n        getAccountSettings()\n      ]);\n\n      let combinedSettings = { ...settings };\n      \n      if (profileData.status === 'fulfilled') {\n        combinedSettings = {\n          ...combinedSettings,\n          englishName: profileData.value.englishName || '',\n          residence: profileData.value.residence || '',\n          profileImage: profileData.value.profileImage || null,\n          bio: profileData.value.bio || ''\n        };\n      }\n\n      if (accountData.status === 'fulfilled') {\n        combinedSettings = {\n          ...combinedSettings,\n          ...accountData.value\n        };\n      }\n\n      setSettings(combinedSettings);\n    } catch (error) {\n      console.error('Failed to load account settings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 유효성 검사 함수\n  const validateField = (field, value) => {\n    const errors = { ...validationErrors };\n    \n    switch (field) {\n      case 'englishName':\n        if (value && !/^[a-zA-Z\\s]*$/.test(value)) {\n          errors[field] = '영어 알파벳과 공백만 입력 가능합니다';\n        } else if (value && value.trim().length < 2) {\n          errors[field] = '최소 2글자 이상 입력해주세요';\n        } else if (value && value.length > 50) {\n          errors[field] = '50글자를 초과할 수 없습니다';\n        } else {\n          delete errors[field];\n        }\n        break;\n      case 'email':\n        if (value && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n          errors[field] = '올바른 이메일 형식을 입력해주세요';\n        } else {\n          delete errors[field];\n        }\n        break;\n      case 'phoneNumber':\n        if (value && !/^[\\d-+\\s()]*$/.test(value)) {\n          errors[field] = '유효한 전화번호 형식을 입력해주세요';\n        } else {\n          delete errors[field];\n        }\n        break;\n      case 'bio':\n        if (value && value.length > 500) {\n          errors[field] = '500글자를 초과할 수 없습니다';\n        } else {\n          delete errors[field];\n        }\n        break;\n      default:\n        break;\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSave = async () => {\n    // 전체 유효성 검사\n    const allValid = Object.keys(settings).every(field => \n      validateField(field, settings[field])\n    );\n    \n    if (!allValid) {\n      showError('입력 정보를 확인해주세요.');\n      return;\n    }\n    \n    try {\n      setSaving(true);\n      await updateAccountSettings(settings);\n      showSuccess('계정 설정이 저장되었습니다.');\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n      showError('설정 저장에 실패했습니다.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleInputChange = (field, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // 실시간 유효성 검사\n    validateField(field, value);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#FAFAFA] flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto\"></div>\n          <p className=\"text-[#929292] mt-2\">로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA] px-6\">\n      {/* Header */}\n      <div className=\"pt-12 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <button \n            onClick={() => navigate(-1)}\n            className=\"p-2 hover:bg-white rounded-lg transition-colors\"\n          >\n            <ChevronRight className=\"w-6 h-6 text-[#111111] rotate-180\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-[#111111]\">계정 설정</h1>\n          <div className=\"w-10\" />\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 프로필 이미지 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">프로필 이미지</h2>\n            <Camera className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          <div className=\"flex justify-center\">\n            <ProfileImageUpload\n              currentImage={settings.profileImage}\n              onImageChange={(imageUrl) => handleInputChange('profileImage', imageUrl)}\n              size=\"large\"\n            />\n          </div>\n        </div>\n\n        {/* 기본 정보 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">기본 정보</h2>\n            <User className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">영어 이름</label>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={settings.englishName}\n                  onChange={(e) => handleInputChange('englishName', e.target.value)}\n                  maxLength={50}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 transition-colors ${\n                    validationErrors.englishName \n                      ? 'border-[#EA4335] focus:ring-[#EA4335] focus:border-[#EA4335]'\n                      : 'border-gray-200 focus:ring-[#00C471] focus:border-[#00C471]'\n                  }`}\n                  placeholder=\"예: John Smith\"\n                />\n                <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-[12px] text-[#929292]\">\n                  {settings.englishName.length}/50\n                </div>\n              </div>\n              {validationErrors.englishName && (\n                <div className=\"flex items-center mt-1 text-[#EA4335] text-[12px]\">\n                  <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                  {validationErrors.englishName}\n                </div>\n              )}\n              <div className=\"mt-1 text-[11px] text-[#606060]\">\n                영어 알파벳과 공백만 사용 가능 (2-50글자)\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">거주지</label>\n              <div className=\"relative\">\n                <MapPin className=\"absolute left-3 top-3.5 w-5 h-5 text-[#929292]\" />\n                <input\n                  type=\"text\"\n                  value={settings.residence}\n                  onChange={(e) => handleInputChange('residence', e.target.value)}\n                  className=\"w-full pl-11 pr-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471] transition-colors\"\n                  placeholder=\"거주지를 입력하세요\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">자기소개</label>\n              <textarea\n                value={settings.bio}\n                onChange={(e) => handleInputChange('bio', e.target.value)}\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 transition-colors resize-none ${\n                  validationErrors.bio \n                    ? 'border-[#EA4335] focus:ring-[#EA4335] focus:border-[#EA4335]'\n                    : 'border-gray-200 focus:ring-[#00C471] focus:border-[#00C471]'\n                }`}\n                rows=\"4\"\n                placeholder=\"간단한 자기소개를 작성해주세요\"\n                maxLength=\"500\"\n              />\n              <div className=\"flex justify-between items-center mt-1\">\n                <div className=\"text-[11px] text-[#606060]\">\n                  학습 목표나 관심사를 포함하면 더 좋아요\n                </div>\n                <div className={`text-[12px] font-medium ${\n                  settings.bio.length > 450 ? 'text-[#FFA500]' : 'text-[#929292]'\n                }`}>\n                  {settings.bio.length}/500\n                </div>\n              </div>\n              {validationErrors.bio && (\n                <div className=\"flex items-center mt-1 text-[#EA4335] text-[12px]\">\n                  <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                  {validationErrors.bio}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* 연락처 정보 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">연락처</h2>\n            <Mail className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">이메일</label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3.5 w-5 h-5 text-[#929292]\" />\n                <input\n                  type=\"email\"\n                  value={settings.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  className={`w-full pl-11 pr-4 py-3 border rounded-lg focus:ring-2 transition-colors ${\n                    validationErrors.email \n                      ? 'border-[#EA4335] focus:ring-[#EA4335] focus:border-[#EA4335]'\n                      : 'border-gray-200 focus:ring-[#00C471] focus:border-[#00C471]'\n                  }`}\n                  placeholder=\"example@email.com\"\n                />\n              </div>\n              {validationErrors.email && (\n                <div className=\"flex items-center mt-1 text-[#EA4335] text-[12px]\">\n                  <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                  {validationErrors.email}\n                </div>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">전화번호</label>\n              <div className=\"relative\">\n                <Phone className=\"absolute left-3 top-3.5 w-5 h-5 text-[#929292]\" />\n                <input\n                  type=\"tel\"\n                  value={settings.phoneNumber}\n                  onChange={(e) => handleInputChange('phoneNumber', e.target.value)}\n                  className={`w-full pl-11 pr-4 py-3 border rounded-lg focus:ring-2 transition-colors ${\n                    validationErrors.phoneNumber \n                      ? 'border-[#EA4335] focus:ring-[#EA4335] focus:border-[#EA4335]'\n                      : 'border-gray-200 focus:ring-[#00C471] focus:border-[#00C471]'\n                  }`}\n                  placeholder=\"예: 010-1234-5678\"\n                />\n              </div>\n              {validationErrors.phoneNumber && (\n                <div className=\"flex items-center mt-1 text-[#EA4335] text-[12px]\">\n                  <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                  {validationErrors.phoneNumber}\n                </div>\n              )}\n              <div className=\"mt-1 text-[11px] text-[#606060]\">\n                숫자, 하이픈(-), 공백, 괄호(), 플러스(+) 기호 사용 가능\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 개인 정보 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">개인 정보</h2>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">생년월일</label>\n              <input\n                type=\"date\"\n                value={settings.birthDate}\n                onChange={(e) => handleInputChange('birthDate', e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471] transition-colors\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">성별</label>\n              <div className=\"flex space-x-4\">\n                {['male', 'female', 'other'].map((gender) => (\n                  <label key={gender} className=\"flex items-center\">\n                    <input\n                      type=\"radio\"\n                      name=\"gender\"\n                      value={gender}\n                      checked={settings.gender === gender}\n                      onChange={(e) => handleInputChange('gender', e.target.value)}\n                      className=\"w-4 h-4 text-[#00C471] border-gray-300 focus:ring-[#00C471]\"\n                    />\n                    <span className=\"ml-2 text-sm text-[#111111]\">\n                      {gender === 'male' ? '남성' : gender === 'female' ? '여성' : '기타'}\n                    </span>\n                  </label>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 저장 버튼 */}\n        <div className=\"pb-8\">\n          <CommonButton\n            onClick={handleSave}\n            disabled={saving}\n            variant=\"success\"\n          >\n            {saving ? '저장 중...' : '변경사항 저장'}\n          </CommonButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountSettings;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/DataSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/DeleteAccount.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'confirmAction' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.","line":10,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"confirmAction"},"fix":{"range":[426,441],"text":""},"desc":"Remove unused variable 'confirmAction'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronRight, AlertTriangle, Trash2, Eye, EyeOff } from 'lucide-react';\nimport { deleteAccount } from '../../api/settings';\nimport CommonButton from '../../components/CommonButton';\nimport { useAlert } from '../../hooks/useAlert';\n\nconst DeleteAccount = () => {\n  const navigate = useNavigate();\n  const { showError, showSuccess, confirmAction } = useAlert();\n  const [step, setStep] = useState(1); // 1: 확인, 2: 사유 선택, 3: 비밀번호\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [deleteReason, setDeleteReason] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const [agreements, setAgreements] = useState({\n    dataLoss: false,\n    noRecovery: false,\n    immediate: false\n  });\n  const [deleting, setDeleting] = useState(false);\n  const [confirmText, setConfirmText] = useState('');\n\n  const deleteReasons = [\n    { id: 'not_useful', label: '더 이상 사용하지 않음' },\n    { id: 'privacy_concerns', label: '개인정보 보호 우려' },\n    { id: 'found_alternative', label: '다른 서비스를 찾음' },\n    { id: 'technical_issues', label: '기술적 문제' },\n    { id: 'cost_concerns', label: '비용 문제' },\n    { id: 'poor_experience', label: '사용자 경험 불만' },\n    { id: 'other', label: '기타' }\n  ];\n\n  const handleDeleteAccount = async () => {\n    if (!password.trim()) {\n      showError('비밀번호를 입력해주세요.');\n      return;\n    }\n\n    if (!Object.values(agreements).every(Boolean)) {\n      showError('모든 항목에 동의해주세요.');\n      return;\n    }\n\n    // 확인 텍스트 검증\n    const requiredText = 'STUDYMATE 계정을 영구적으로 삭제하시겠습니까?';\n    if (confirmText !== requiredText) {\n      showError('확인 텍스트를 정확히 입력해주세요.');\n      return;\n    }\n\n    try {\n      setDeleting(true);\n      await deleteAccount(password);\n      \n      // 로컬 스토리지 클리어\n      localStorage.clear();\n      sessionStorage.clear();\n      \n      showSuccess(\n        '계정이 성공적으로 삭제되었습니다. 그동안 STUDYMATE를 이용해주셔서 감사했습니다.',\n        () => {\n          // 메인 페이지로 이동\n          window.location.href = '/';\n        }\n      );\n    } catch (error) {\n      console.error('Failed to delete account:', error);\n      if (error.response?.status === 401) {\n        showError('비밀번호가 올바르지 않습니다.');\n      } else {\n        showError('계정 삭제에 실패했습니다. 잠시 후 다시 시도해주세요.');\n      }\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  const handleAgreementChange = (field) => {\n    setAgreements(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA] px-6\">\n      {/* Header */}\n      <div className=\"pt-12 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <button \n            onClick={() => navigate(-1)}\n            className=\"p-2 hover:bg-white rounded-lg transition-colors\"\n          >\n            <ChevronRight className=\"w-6 h-6 text-[#111111] rotate-180\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-[#111111]\">계정 삭제</h1>\n          <div className=\"w-10\" />\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Warning Notice */}\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n          <div className=\"flex items-start space-x-3\">\n            <AlertTriangle className=\"w-6 h-6 text-red-600 mt-0.5 flex-shrink-0\" />\n            <div>\n              <h2 className=\"font-semibold text-red-900 mb-2\">⚠️ 중요한 안내</h2>\n              <p className=\"text-red-800 text-sm leading-relaxed\">\n                계정을 삭제하면 <strong>모든 데이터가 영구적으로 삭제</strong>되며, \n                이후 복구할 수 없습니다. 신중히 결정해주세요.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {step === 1 && (\n          <div className=\"bg-white rounded-lg p-6\">\n            <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">삭제될 데이터</h2>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <Trash2 className=\"w-5 h-5 text-red-500\" />\n                <span className=\"text-[#111111]\">프로필 정보 및 설정</span>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <Trash2 className=\"w-5 h-5 text-red-500\" />\n                <span className=\"text-[#111111]\">모든 채팅 메시지 기록</span>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <Trash2 className=\"w-5 h-5 text-red-500\" />\n                <span className=\"text-[#111111]\">학습 진도 및 통계</span>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <Trash2 className=\"w-5 h-5 text-red-500\" />\n                <span className=\"text-[#111111]\">세션 참여 기록</span>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <Trash2 className=\"w-5 h-5 text-red-500\" />\n                <span className=\"text-[#111111]\">매칭 기록 및 연결</span>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <Trash2 className=\"w-5 h-5 text-red-500\" />\n                <span className=\"text-[#111111]\">업로드한 파일 및 이미지</span>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <Trash2 className=\"w-5 h-5 text-red-500\" />\n                <span className=\"text-[#111111]\">성취 및 배지 정보</span>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-3 mt-6\">\n              <CommonButton\n                onClick={() => setStep(2)}\n                variant=\"danger\"\n                className=\"flex-1\"\n              >\n                계정 삭제 진행\n              </CommonButton>\n              <CommonButton\n                onClick={() => navigate(-1)}\n                variant=\"secondary\"\n                className=\"flex-1\"\n              >\n                취소\n              </CommonButton>\n            </div>\n          </div>\n        )}\n\n        {step === 2 && (\n          <div className=\"bg-white rounded-lg p-6\">\n            <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">삭제 사유 (선택사항)</h2>\n            <p className=\"text-sm text-[#929292] mb-4\">\n              서비스 개선을 위해 계정 삭제 사유를 알려주세요. 이 정보는 익명으로 처리됩니다.\n            </p>\n            \n            <div className=\"space-y-2 mb-4\">\n              {deleteReasons.map(reason => (\n                <label key={reason.id} className=\"flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"deleteReason\"\n                    value={reason.id}\n                    checked={deleteReason === reason.id}\n                    onChange={(e) => setDeleteReason(e.target.value)}\n                    className=\"w-4 h-4 text-red-600 border-gray-300 focus:ring-red-500\"\n                  />\n                  <span className=\"ml-3 text-[#111111]\">{reason.label}</span>\n                </label>\n              ))}\n            </div>\n\n            {deleteReason === 'other' && (\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium text-[#111111] mb-2\">기타 사유</label>\n                <textarea\n                  value={feedback}\n                  onChange={(e) => setFeedback(e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors resize-none\"\n                  rows=\"3\"\n                  placeholder=\"삭제 사유를 알려주세요\"\n                  maxLength=\"500\"\n                />\n              </div>\n            )}\n\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">추가 의견 (선택사항)</label>\n              <textarea\n                value={feedback}\n                onChange={(e) => setFeedback(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors resize-none\"\n                rows=\"3\"\n                placeholder=\"서비스 개선을 위한 의견을 남겨주세요\"\n                maxLength=\"500\"\n              />\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <CommonButton\n                onClick={() => setStep(3)}\n                variant=\"danger\"\n                className=\"flex-1\"\n              >\n                다음 단계\n              </CommonButton>\n              <CommonButton\n                onClick={() => setStep(1)}\n                variant=\"secondary\"\n                className=\"flex-1\"\n              >\n                이전\n              </CommonButton>\n            </div>\n          </div>\n        )}\n\n        {step === 3 && (\n          <div className=\"bg-white rounded-lg p-6\">\n            <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">계정 삭제 확인</h2>\n            \n            {/* 동의 사항 */}\n            <div className=\"space-y-4 mb-6\">\n              <div className=\"flex items-start space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"dataLoss\"\n                  checked={agreements.dataLoss}\n                  onChange={() => handleAgreementChange('dataLoss')}\n                  className=\"w-4 h-4 text-red-600 border-gray-300 rounded focus:ring-red-500 mt-1\"\n                />\n                <label htmlFor=\"dataLoss\" className=\"text-sm text-[#111111]\">\n                  모든 데이터가 영구적으로 삭제되며 복구할 수 없다는 것을 이해합니다.\n                </label>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"noRecovery\"\n                  checked={agreements.noRecovery}\n                  onChange={() => handleAgreementChange('noRecovery')}\n                  className=\"w-4 h-4 text-red-600 border-gray-300 rounded focus:ring-red-500 mt-1\"\n                />\n                <label htmlFor=\"noRecovery\" className=\"text-sm text-[#111111]\">\n                  삭제 후에는 어떤 방법으로도 계정을 복구할 수 없다는 것을 이해합니다.\n                </label>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"immediate\"\n                  checked={agreements.immediate}\n                  onChange={() => handleAgreementChange('immediate')}\n                  className=\"w-4 h-4 text-red-600 border-gray-300 rounded focus:ring-red-500 mt-1\"\n                />\n                <label htmlFor=\"immediate\" className=\"text-sm text-[#111111]\">\n                  계정 삭제가 즉시 처리되며, 진행 중인 세션이나 결제가 중단될 수 있다는 것을 이해합니다.\n                </label>\n              </div>\n            </div>\n\n            {/* 비밀번호 입력 */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">\n                비밀번호 확인\n              </label>\n              <p className=\"text-sm text-[#929292] mb-3\">\n                계정 삭제를 위해 현재 비밀번호를 입력해주세요.\n              </p>\n              <div className=\"relative\">\n                <input\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"현재 비밀번호\"\n                  className=\"w-full px-4 py-3 pr-12 border border-gray-200 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3.5 text-[#929292] hover:text-[#111111] transition-colors\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            {/* 최종 확인 텍스트 입력 */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">\n                최종 확인\n              </label>\n              <p className=\"text-sm text-[#929292] mb-3\">\n                계정 삭제를 확인하기 위해 아래 텍스트를 정확히 입력해주세요:\n              </p>\n              <p className=\"text-sm font-medium text-red-600 mb-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                STUDYMATE 계정을 영구적으로 삭제하시겠습니까?\n              </p>\n              <input\n                type=\"text\"\n                value={confirmText}\n                onChange={(e) => setConfirmText(e.target.value)}\n                placeholder=\"위의 텍스트를 정확히 입력하세요\"\n                className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors\"\n              />\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <CommonButton\n                onClick={handleDeleteAccount}\n                disabled={\n                  deleting || \n                  !Object.values(agreements).every(Boolean) || \n                  !password.trim() ||\n                  confirmText !== 'STUDYMATE 계정을 영구적으로 삭제하시겠습니까?'\n                }\n                variant=\"danger\"\n                className=\"flex-1\"\n              >\n                {deleting ? '삭제 중...' : '계정 영구 삭제'}\n              </CommonButton>\n              <CommonButton\n                onClick={() => setStep(2)}\n                variant=\"secondary\"\n                className=\"flex-1\"\n              >\n                이전\n              </CommonButton>\n            </div>\n          </div>\n        )}\n\n        {/* 대안 제시 */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n          <h3 className=\"font-medium text-blue-900 mb-3\">잠시만요! 다른 옵션을 고려해보세요</h3>\n          <div className=\"space-y-2 text-sm text-blue-800\">\n            <p>• <strong>계정 비활성화</strong>: 데이터를 보존하면서 일시적으로 계정을 비활성화할 수 있습니다.</p>\n            <p>• <strong>개인정보 수정</strong>: 개인정보 설정에서 공개 범위를 조정할 수 있습니다.</p>\n            <p>• <strong>알림 끄기</strong>: 알림 설정에서 모든 알림을 비활성화할 수 있습니다.</p>\n            <p>• <strong>고객 지원</strong>: 문제가 있다면 고객 지원팀에 문의해주세요.</p>\n          </div>\n          <div className=\"flex space-x-2 mt-4\">\n            <button\n              onClick={() => navigate('/settings/account')}\n              className=\"text-sm text-blue-900 font-medium hover:text-blue-700 underline\"\n            >\n              계정 설정으로 이동\n            </button>\n            <span className=\"text-blue-600\">|</span>\n            <button\n              onClick={() => window.open('mailto:support@studymate.com')}\n              className=\"text-sm text-blue-900 font-medium hover:text-blue-700 underline\"\n            >\n              고객 지원 문의\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"pb-8\" />\n    </div>\n  );\n};\n\nexport default DeleteAccount;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/LanguageSettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/LoginHistory.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/NotificationSettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Icon' is defined but never used.","line":99,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[2761,2772],"text":""},"desc":"Remove unused variable 'Icon'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronRight, Bell, Mail, MessageSquare, Video, Calendar, Award } from 'lucide-react';\nimport { getNotificationSettings, updateNotificationSettings } from '../../api/settings';\nimport CommonButton from '../../components/CommonButton';\nimport { useAlert } from '../../hooks/useAlert';\n\nconst NotificationSettings = () => {\n  const navigate = useNavigate();\n  const { showSuccess, showError } = useAlert();\n  const [settings, setSettings] = useState({\n    // 푸시 알림\n    pushEnabled: true,\n    pushChat: true,\n    pushMatching: true,\n    pushSession: true,\n    pushLevelTest: true,\n    pushAchievements: true,\n    \n    // 이메일 알림\n    emailEnabled: true,\n    emailWeeklySummary: true,\n    emailSessionReminder: true,\n    emailNewMatch: true,\n    emailPromotions: false,\n    \n    // 소리 및 진동\n    soundEnabled: true,\n    vibrationEnabled: true,\n    \n    // 방해 금지 시간\n    quietHoursEnabled: false,\n    quietHoursStart: '22:00',\n    quietHoursEnd: '08:00'\n  });\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, []);\n\n  const loadNotificationSettings = async () => {\n    try {\n      setLoading(true);\n      const data = await getNotificationSettings();\n      setSettings(prev => ({ ...prev, ...data }));\n    } catch (error) {\n      console.error('Failed to load notification settings:', error);\n      // 실패해도 기본 설정으로 진행\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      await updateNotificationSettings(settings);\n      showSuccess('알림 설정이 저장되었습니다.');\n    } catch (error) {\n      console.error('Failed to save notification settings:', error);\n      showError('설정 저장에 실패했습니다.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleToggle = (field) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  };\n\n  const handleTimeChange = (field, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const ToggleSwitch = ({ checked, onChange, disabled = false }) => (\n    <button\n      onClick={() => !disabled && onChange()}\n      disabled={disabled}\n      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n        checked ? 'bg-[#00C471]' : 'bg-gray-200'\n      } ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}\n    >\n      <span\n        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n          checked ? 'translate-x-6' : 'translate-x-1'\n        }`}\n      />\n    </button>\n  );\n\n  const SettingItem = ({ icon: Icon, title, description, checked, onChange, disabled = false }) => (\n    <div className=\"flex items-center justify-between py-4\">\n      <div className=\"flex items-center space-x-3\">\n        <Icon className=\"w-5 h-5 text-[#929292]\" />\n        <div>\n          <h3 className={`text-[#111111] font-medium ${disabled ? 'text-[#929292]' : ''}`}>\n            {title}\n          </h3>\n          {description && (\n            <p className=\"text-sm text-[#929292]\">{description}</p>\n          )}\n        </div>\n      </div>\n      <ToggleSwitch checked={checked} onChange={onChange} disabled={disabled} />\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#FAFAFA] flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto\"></div>\n          <p className=\"text-[#929292] mt-2\">로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA] px-6\">\n      {/* Header */}\n      <div className=\"pt-12 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <button \n            onClick={() => navigate(-1)}\n            className=\"p-2 hover:bg-white rounded-lg transition-colors\"\n          >\n            <ChevronRight className=\"w-6 h-6 text-[#111111] rotate-180\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-[#111111]\">알림 설정</h1>\n          <div className=\"w-10\" />\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 푸시 알림 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">푸시 알림</h2>\n            <Bell className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          \n          <div className=\"space-y-1\">\n            <SettingItem\n              icon={Bell}\n              title=\"푸시 알림 활성화\"\n              description=\"모든 푸시 알림을 받습니다\"\n              checked={settings.pushEnabled}\n              onChange={() => handleToggle('pushEnabled')}\n            />\n            \n            <div className=\"border-t border-gray-100 pt-4\">\n              <SettingItem\n                icon={MessageSquare}\n                title=\"채팅 메시지\"\n                description=\"새로운 채팅 메시지 알림\"\n                checked={settings.pushChat}\n                onChange={() => handleToggle('pushChat')}\n                disabled={!settings.pushEnabled}\n              />\n              \n              <SettingItem\n                icon={Award}\n                title=\"매칭 알림\"\n                description=\"새로운 매칭 파트너 알림\"\n                checked={settings.pushMatching}\n                onChange={() => handleToggle('pushMatching')}\n                disabled={!settings.pushEnabled}\n              />\n              \n              <SettingItem\n                icon={Video}\n                title=\"세션 알림\"\n                description=\"예정된 세션 및 초대 알림\"\n                checked={settings.pushSession}\n                onChange={() => handleToggle('pushSession')}\n                disabled={!settings.pushEnabled}\n              />\n              \n              <SettingItem\n                icon={Award}\n                title=\"레벨 테스트 및 성취\"\n                description=\"레벨 테스트 결과, 새로운 배지 알림\"\n                checked={settings.pushAchievements}\n                onChange={() => handleToggle('pushAchievements')}\n                disabled={!settings.pushEnabled}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 이메일 알림 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">이메일 알림</h2>\n            <Mail className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          \n          <div className=\"space-y-1\">\n            <SettingItem\n              icon={Mail}\n              title=\"이메일 알림 활성화\"\n              description=\"이메일로 알림을 받습니다\"\n              checked={settings.emailEnabled}\n              onChange={() => handleToggle('emailEnabled')}\n            />\n            \n            <div className=\"border-t border-gray-100 pt-4\">\n              <SettingItem\n                icon={Calendar}\n                title=\"주간 요약\"\n                description=\"주간 학습 활동 요약 이메일\"\n                checked={settings.emailWeeklySummary}\n                onChange={() => handleToggle('emailWeeklySummary')}\n                disabled={!settings.emailEnabled}\n              />\n              \n              <SettingItem\n                icon={Video}\n                title=\"세션 리마인더\"\n                description=\"예정된 세션 1시간 전 알림\"\n                checked={settings.emailSessionReminder}\n                onChange={() => handleToggle('emailSessionReminder')}\n                disabled={!settings.emailEnabled}\n              />\n              \n              <SettingItem\n                icon={Award}\n                title=\"새로운 매칭\"\n                description=\"새로운 매칭 파트너 이메일 알림\"\n                checked={settings.emailNewMatch}\n                onChange={() => handleToggle('emailNewMatch')}\n                disabled={!settings.emailEnabled}\n              />\n              \n              <SettingItem\n                icon={Mail}\n                title=\"프로모션 및 이벤트\"\n                description=\"특별 이벤트 및 프로모션 정보\"\n                checked={settings.emailPromotions}\n                onChange={() => handleToggle('emailPromotions')}\n                disabled={!settings.emailEnabled}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 소리 및 진동 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">소리 및 진동</h2>\n          \n          <div className=\"space-y-1\">\n            <SettingItem\n              icon={Bell}\n              title=\"알림 소리\"\n              description=\"알림 시 소리 재생\"\n              checked={settings.soundEnabled}\n              onChange={() => handleToggle('soundEnabled')}\n            />\n            \n            <SettingItem\n              icon={Bell}\n              title=\"진동\"\n              description=\"알림 시 진동 (모바일)\"\n              checked={settings.vibrationEnabled}\n              onChange={() => handleToggle('vibrationEnabled')}\n            />\n          </div>\n        </div>\n\n        {/* 방해 금지 시간 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">방해 금지 시간</h2>\n          \n          <div className=\"space-y-4\">\n            <SettingItem\n              icon={Bell}\n              title=\"방해 금지 시간 활성화\"\n              description=\"설정한 시간에는 알림을 받지 않습니다\"\n              checked={settings.quietHoursEnabled}\n              onChange={() => handleToggle('quietHoursEnabled')}\n            />\n            \n            {settings.quietHoursEnabled && (\n              <div className=\"bg-gray-50 rounded-lg p-4 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-[#111111]\">시작 시간</span>\n                  <input\n                    type=\"time\"\n                    value={settings.quietHoursStart}\n                    onChange={(e) => handleTimeChange('quietHoursStart', e.target.value)}\n                    className=\"px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471]\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-[#111111]\">종료 시간</span>\n                  <input\n                    type=\"time\"\n                    value={settings.quietHoursEnd}\n                    onChange={(e) => handleTimeChange('quietHoursEnd', e.target.value)}\n                    className=\"px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471]\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* 저장 버튼 */}\n        <div className=\"pb-8\">\n          <CommonButton\n            onClick={handleSave}\n            disabled={saving}\n            variant=\"success\"\n          >\n            {saving ? '저장 중...' : '변경사항 저장'}\n          </CommonButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationSettings;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/PrivacySettings.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Icon' is defined but never used.","line":103,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[2788,2799],"text":""},"desc":"Remove unused variable 'Icon'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'Icon' is defined but never used.","line":118,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"Icon"},"fix":{"range":[3333,3344],"text":""},"desc":"Remove unused variable 'Icon'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronRight, Shield, Eye, Users, MapPin, Calendar, Lock } from 'lucide-react';\nimport { getPrivacySettings, updatePrivacySettings } from '../../api/settings';\nimport CommonButton from '../../components/CommonButton';\nimport { useAlert } from '../../hooks/useAlert';\n\nconst PrivacySettings = () => {\n  const navigate = useNavigate();\n  const { showSuccess, showError } = useAlert();\n  const [settings, setSettings] = useState({\n    // 프로필 공개 설정\n    profileVisibility: 'public', // public, friends, private\n    showAge: true,\n    showLocation: true,\n    showOnlineStatus: true,\n    showLastSeen: false,\n    \n    // 매칭 설정\n    allowMatching: true,\n    matchingRadius: '50', // km\n    showInSearch: true,\n    \n    // 연락처 설정\n    allowDirectMessage: 'friends', // everyone, friends, none\n    allowGroupInvite: 'friends',\n    showEmail: false,\n    showPhoneNumber: false,\n    \n    // 활동 설정\n    showLearningStats: true,\n    showAchievements: true,\n    showSessionHistory: false,\n    \n    // 데이터 수집 동의\n    allowAnalytics: true,\n    allowPersonalization: true,\n    allowMarketing: false,\n    allowThirdPartySharing: false\n  });\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    loadPrivacySettings();\n  }, []);\n\n  const loadPrivacySettings = async () => {\n    try {\n      setLoading(true);\n      const data = await getPrivacySettings();\n      setSettings(prev => ({ ...prev, ...data }));\n    } catch (error) {\n      console.error('Failed to load privacy settings:', error);\n      // 실패해도 기본 설정으로 진행\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      await updatePrivacySettings(settings);\n      showSuccess('개인정보 설정이 저장되었습니다.');\n    } catch (error) {\n      console.error('Failed to save privacy settings:', error);\n      showError('설정 저장에 실패했습니다.');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleToggle = (field) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  };\n\n  const handleSelectChange = (field, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const ToggleSwitch = ({ checked, onChange }) => (\n    <button\n      onClick={onChange}\n      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n        checked ? 'bg-[#00C471]' : 'bg-gray-200'\n      } cursor-pointer`}\n    >\n      <span\n        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n          checked ? 'translate-x-6' : 'translate-x-1'\n        }`}\n      />\n    </button>\n  );\n\n  const SettingItem = ({ icon: Icon, title, description, checked, onChange }) => (\n    <div className=\"flex items-center justify-between py-4\">\n      <div className=\"flex items-center space-x-3\">\n        <Icon className=\"w-5 h-5 text-[#929292]\" />\n        <div>\n          <h3 className=\"text-[#111111] font-medium\">{title}</h3>\n          {description && (\n            <p className=\"text-sm text-[#929292]\">{description}</p>\n          )}\n        </div>\n      </div>\n      <ToggleSwitch checked={checked} onChange={onChange} />\n    </div>\n  );\n\n  const SelectSetting = ({ icon: Icon, title, description, value, options, onChange }) => (\n    <div className=\"py-4\">\n      <div className=\"flex items-center space-x-3 mb-3\">\n        <Icon className=\"w-5 h-5 text-[#929292]\" />\n        <div>\n          <h3 className=\"text-[#111111] font-medium\">{title}</h3>\n          {description && (\n            <p className=\"text-sm text-[#929292]\">{description}</p>\n          )}\n        </div>\n      </div>\n      <select\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471] transition-colors\"\n      >\n        {options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#FAFAFA] flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-[#00C471] border-t-transparent rounded-full animate-spin mx-auto\"></div>\n          <p className=\"text-[#929292] mt-2\">로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const privacyOptions = [\n    { value: 'public', label: '모두에게 공개' },\n    { value: 'friends', label: '친구에게만 공개' },\n    { value: 'private', label: '비공개' }\n  ];\n\n  const contactOptions = [\n    { value: 'everyone', label: '모든 사용자' },\n    { value: 'friends', label: '친구만' },\n    { value: 'none', label: '허용하지 않음' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#FAFAFA] px-6\">\n      {/* Header */}\n      <div className=\"pt-12 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <button \n            onClick={() => navigate(-1)}\n            className=\"p-2 hover:bg-white rounded-lg transition-colors\"\n          >\n            <ChevronRight className=\"w-6 h-6 text-[#111111] rotate-180\" />\n          </button>\n          <h1 className=\"text-xl font-bold text-[#111111]\">개인정보 보호</h1>\n          <div className=\"w-10\" />\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 프로필 공개 설정 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">프로필 공개 설정</h2>\n            <Eye className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          \n          <div className=\"space-y-1\">\n            <SelectSetting\n              icon={Shield}\n              title=\"프로필 공개 범위\"\n              description=\"다른 사용자가 프로필을 볼 수 있는 범위\"\n              value={settings.profileVisibility}\n              options={privacyOptions}\n              onChange={(value) => handleSelectChange('profileVisibility', value)}\n            />\n            \n            <div className=\"border-t border-gray-100 pt-4\">\n              <SettingItem\n                icon={Calendar}\n                title=\"나이 공개\"\n                description=\"프로필에서 나이를 표시합니다\"\n                checked={settings.showAge}\n                onChange={() => handleToggle('showAge')}\n              />\n              \n              <SettingItem\n                icon={MapPin}\n                title=\"위치 정보 공개\"\n                description=\"거주지 정보를 표시합니다\"\n                checked={settings.showLocation}\n                onChange={() => handleToggle('showLocation')}\n              />\n              \n              <SettingItem\n                icon={Users}\n                title=\"온라인 상태 표시\"\n                description=\"현재 온라인 상태를 표시합니다\"\n                checked={settings.showOnlineStatus}\n                onChange={() => handleToggle('showOnlineStatus')}\n              />\n              \n              <SettingItem\n                icon={Calendar}\n                title=\"최근 접속 시간 표시\"\n                description=\"마지막 접속 시간을 표시합니다\"\n                checked={settings.showLastSeen}\n                onChange={() => handleToggle('showLastSeen')}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 매칭 설정 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">매칭 설정</h2>\n            <Users className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          \n          <div className=\"space-y-4\">\n            <SettingItem\n              icon={Users}\n              title=\"매칭 허용\"\n              description=\"다른 사용자와의 매칭을 허용합니다\"\n              checked={settings.allowMatching}\n              onChange={() => handleToggle('allowMatching')}\n            />\n            \n            <SettingItem\n              icon={Eye}\n              title=\"검색 결과에 표시\"\n              description=\"매칭 검색 결과에 내 프로필이 표시됩니다\"\n              checked={settings.showInSearch}\n              onChange={() => handleToggle('showInSearch')}\n            />\n            \n            <div>\n              <label className=\"block text-sm font-medium text-[#111111] mb-2\">매칭 거리 (km)</label>\n              <select\n                value={settings.matchingRadius}\n                onChange={(e) => handleSelectChange('matchingRadius', e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#00C471] focus:border-[#00C471] transition-colors\"\n              >\n                <option value=\"10\">10km</option>\n                <option value=\"25\">25km</option>\n                <option value=\"50\">50km</option>\n                <option value=\"100\">100km</option>\n                <option value=\"unlimited\">제한 없음</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* 연락처 설정 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-[#111111]\">연락처 설정</h2>\n            <Lock className=\"w-5 h-5 text-[#929292]\" />\n          </div>\n          \n          <div className=\"space-y-4\">\n            <SelectSetting\n              icon={Users}\n              title=\"직접 메시지 허용\"\n              description=\"누가 나에게 직접 메시지를 보낼 수 있는지 설정\"\n              value={settings.allowDirectMessage}\n              options={contactOptions}\n              onChange={(value) => handleSelectChange('allowDirectMessage', value)}\n            />\n            \n            <SelectSetting\n              icon={Users}\n              title=\"그룹 초대 허용\"\n              description=\"누가 나를 그룹에 초대할 수 있는지 설정\"\n              value={settings.allowGroupInvite}\n              options={contactOptions}\n              onChange={(value) => handleSelectChange('allowGroupInvite', value)}\n            />\n            \n            <div className=\"border-t border-gray-100 pt-4\">\n              <SettingItem\n                icon={Lock}\n                title=\"이메일 주소 공개\"\n                description=\"프로필에서 이메일을 표시합니다\"\n                checked={settings.showEmail}\n                onChange={() => handleToggle('showEmail')}\n              />\n              \n              <SettingItem\n                icon={Lock}\n                title=\"전화번호 공개\"\n                description=\"프로필에서 전화번호를 표시합니다\"\n                checked={settings.showPhoneNumber}\n                onChange={() => handleToggle('showPhoneNumber')}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* 활동 설정 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">활동 정보 공개</h2>\n          \n          <div className=\"space-y-1\">\n            <SettingItem\n              icon={Users}\n              title=\"학습 통계 공개\"\n              description=\"학습 시간, 진도 등의 통계를 표시합니다\"\n              checked={settings.showLearningStats}\n              onChange={() => handleToggle('showLearningStats')}\n            />\n            \n            <SettingItem\n              icon={Users}\n              title=\"성취 배지 공개\"\n              description=\"획득한 배지와 성취를 표시합니다\"\n              checked={settings.showAchievements}\n              onChange={() => handleToggle('showAchievements')}\n            />\n            \n            <SettingItem\n              icon={Calendar}\n              title=\"세션 기록 공개\"\n              description=\"최근 세션 참여 기록을 표시합니다\"\n              checked={settings.showSessionHistory}\n              onChange={() => handleToggle('showSessionHistory')}\n            />\n          </div>\n        </div>\n\n        {/* 데이터 수집 동의 */}\n        <div className=\"bg-white rounded-lg p-6\">\n          <h2 className=\"text-lg font-semibold text-[#111111] mb-4\">데이터 수집 동의</h2>\n          \n          <div className=\"space-y-1\">\n            <SettingItem\n              icon={Shield}\n              title=\"분석 데이터 수집\"\n              description=\"서비스 개선을 위한 익명 사용 데이터 수집\"\n              checked={settings.allowAnalytics}\n              onChange={() => handleToggle('allowAnalytics')}\n            />\n            \n            <SettingItem\n              icon={Shield}\n              title=\"개인화 데이터 수집\"\n              description=\"개인화된 추천을 위한 데이터 수집\"\n              checked={settings.allowPersonalization}\n              onChange={() => handleToggle('allowPersonalization')}\n            />\n            \n            <SettingItem\n              icon={Shield}\n              title=\"마케팅 활용 동의\"\n              description=\"마케팅 목적의 데이터 활용에 동의\"\n              checked={settings.allowMarketing}\n              onChange={() => handleToggle('allowMarketing')}\n            />\n            \n            <SettingItem\n              icon={Shield}\n              title=\"제3자 공유 동의\"\n              description=\"파트너사와의 데이터 공유에 동의\"\n              checked={settings.allowThirdPartySharing}\n              onChange={() => handleToggle('allowThirdPartySharing')}\n            />\n          </div>\n        </div>\n\n        {/* 저장 버튼 */}\n        <div className=\"pb-8\">\n          <CommonButton\n            onClick={handleSave}\n            disabled={saving}\n            variant=\"success\"\n          >\n            {saving ? '저장 중...' : '변경사항 저장'}\n          </CommonButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrivacySettings;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/SecuritySettings.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/pages/Settings/SettingsMain.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/services/notificationWebSocket.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/services/pushNotificationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/services/unifiedWebSocketService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/services/webrtc.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":609,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":609,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// WebRTC Connection Manager\nimport { webrtcAPI } from '../api/webrtc';\nimport { log } from '../utils/logger';\nimport { handleWebRTCError, withRetry, AppError, ERROR_TYPES } from '../utils/errorHandler';\n\nclass WebRTCConnectionManager {\n  constructor() {\n    this.localStream = null;\n    this.remoteStreams = new Map();\n    this.peerConnections = new Map();\n    this.ws = null;\n    this.roomId = null;\n    this.userId = null;\n    this.userName = null;\n    this.isConnected = false;\n    this.callbacks = {\n      onLocalStream: null,\n      onRemoteStream: null,\n      onRemoteStreamRemoved: null,\n      onParticipantJoined: null,\n      onParticipantLeft: null,\n      onConnectionStateChange: null,\n      onError: null,\n      onChatMessage: null,\n    };\n\n    // WebRTC configuration (will be updated from API)\n    this.rtcConfiguration = {\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n      ],\n    };\n\n    // State tracking\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 3;\n    this.reconnectDelay = 1000; // ms\n    this.connectionCheckInterval = null;\n    this.lastConnectionCheck = 0;\n    this.connectionQuality = 'unknown'; // good, fair, poor, unknown\n    this.reconnectTimeout = null;\n  }\n\n  /**\n   * Initialize media devices\n   * @param {Object} constraints - Media constraints\n   * @returns {Promise<MediaStream>} Local media stream\n   */\n  async initializeMedia(constraints = { audio: true, video: false }) {\n    try {\n      this.localStream = await navigator.mediaDevices.getUserMedia(constraints);\n      if (this.callbacks.onLocalStream) {\n        this.callbacks.onLocalStream(this.localStream);\n      }\n      return this.localStream;\n    } catch (error) {\n      console.error('Failed to get user media:', error);\n      this.handleError('Failed to access media devices', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Connect to a room\n   * @param {string} roomId - Room ID\n   * @param {Object} userInfo - User information\n   * @param {Object} options - Connection options\n   * @returns {Promise<void>}\n   */\n  async connect(roomId, userInfo, options = {}) {\n    try {\n      this.roomId = roomId;\n      this.userId = userInfo.userId;\n      this.userName = userInfo.userName || 'Anonymous';\n\n      log.info('WebRTC 룸 연결 시작', { roomId, userId: this.userId }, 'WEBRTC');\n\n      // Get ICE servers from API if room exists\n      try {\n        const iceServersConfig = await webrtcAPI.getIceServers(roomId);\n        if (iceServersConfig && iceServersConfig.iceServers) {\n          this.rtcConfiguration.iceServers = iceServersConfig.iceServers;\n          log.info('ICE 서버 설정 업데이트', this.rtcConfiguration, 'WEBRTC');\n        }\n      } catch (iceError) {\n        log.warn('ICE 서버 조회 실패, 기본 설정 사용', iceError, 'WEBRTC');\n      }\n\n      // Join room via API\n      const joinResult = await webrtcAPI.joinRoom(roomId, userInfo);\n      log.info('WebRTC 룸 입장 성공', joinResult, 'WEBRTC');\n      \n      // Connect to WebSocket\n      const wsUrl = webrtcAPI.getWebSocketURL(roomId, this.userId, this.userName);\n      this.ws = new WebSocket(wsUrl);\n\n      this.setupWebSocketHandlers();\n      \n      // Wait for WebSocket connection\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('WebSocket connection timeout'));\n        }, options.connectionTimeout || 10000);\n\n        this.ws.onopen = () => {\n          clearTimeout(timeout);\n          this.isConnected = true;\n          this.reconnectAttempts = 0; // Reset reconnect attempts on successful connection\n          \n          if (this.callbacks.onConnectionStateChange) {\n            this.callbacks.onConnectionStateChange('connected');\n          }\n          \n          log.info('WebSocket 연결 성공', { roomId, userId: this.userId }, 'WEBRTC');\n          resolve();\n        };\n        \n        this.ws.onerror = (error) => {\n          clearTimeout(timeout);\n          log.error('WebSocket 연결 실패', error, 'WEBRTC');\n          reject(error);\n        };\n      });\n\n      // Request existing participants\n      this.sendMessage({ type: 'get-participants' });\n      \n    } catch (error) {\n      log.error('WebRTC 연결 실패', error, 'WEBRTC');\n      this.handleError('Failed to connect to room', error);\n      \n      // Attempt reconnection if configured\n      if (options.autoReconnect && this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        log.info(`재연결 시도 ${this.reconnectAttempts}/${this.maxReconnectAttempts}`, null, 'WEBRTC');\n        \n        setTimeout(() => {\n          this.connect(roomId, userInfo, options);\n        }, this.reconnectDelay * this.reconnectAttempts);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  setupWebSocketHandlers() {\n    this.ws.onmessage = async (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        await this.handleWebSocketMessage(data);\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      this.isConnected = false;\n      if (this.callbacks.onConnectionStateChange) {\n        this.callbacks.onConnectionStateChange('disconnected');\n      }\n      this.cleanup();\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.handleError('WebSocket connection error', error);\n    };\n  }\n\n  /**\n   * Handle WebSocket messages\n   * @param {Object} data - Message data\n   */\n  async handleWebSocketMessage(data) {\n    const { type, from, payload } = data;\n\n    switch (type) {\n      case 'participant-joined':\n        this.handleParticipantJoined(payload);\n        break;\n        \n      case 'participant-left':\n        this.handleParticipantLeft(payload);\n        break;\n        \n      case 'participants-list':\n        await this.handleParticipantsList(payload.participants);\n        break;\n        \n      case 'offer':\n        await this.handleOffer(from, payload);\n        break;\n        \n      case 'answer':\n        await this.handleAnswer(from, payload);\n        break;\n        \n      case 'ice-candidate':\n        await this.handleIceCandidate(from, payload);\n        break;\n        \n      case 'chat-message':\n        if (this.callbacks.onChatMessage) {\n          this.callbacks.onChatMessage(payload);\n        }\n        break;\n        \n      default:\n        console.warn('Unknown message type:', type);\n    }\n  }\n\n  /**\n   * Handle participant joined\n   * @param {Object} participant - Participant info\n   */\n  handleParticipantJoined(participant) {\n    console.log('Participant joined:', participant);\n    if (this.callbacks.onParticipantJoined) {\n      this.callbacks.onParticipantJoined(participant);\n    }\n    // Create peer connection for new participant\n    this.createPeerConnection(participant.userId);\n  }\n\n  /**\n   * Handle participant left\n   * @param {Object} participant - Participant info\n   */\n  handleParticipantLeft(participant) {\n    console.log('Participant left:', participant);\n    const { userId } = participant;\n    \n    // Close and remove peer connection\n    const pc = this.peerConnections.get(userId);\n    if (pc) {\n      pc.close();\n      this.peerConnections.delete(userId);\n    }\n    \n    // Remove remote stream\n    const stream = this.remoteStreams.get(userId);\n    if (stream) {\n      this.remoteStreams.delete(userId);\n      if (this.callbacks.onRemoteStreamRemoved) {\n        this.callbacks.onRemoteStreamRemoved(userId, stream);\n      }\n    }\n    \n    if (this.callbacks.onParticipantLeft) {\n      this.callbacks.onParticipantLeft(participant);\n    }\n  }\n\n  /**\n   * Handle participants list\n   * @param {Array} participants - List of participants\n   */\n  async handleParticipantsList(participants) {\n    // Create peer connections for existing participants\n    for (const participant of participants) {\n      if (participant.userId !== this.userId) {\n        await this.createPeerConnection(participant.userId, true);\n      }\n    }\n  }\n\n  /**\n   * Create peer connection\n   * @param {string} remoteUserId - Remote user ID\n   * @param {boolean} createOffer - Whether to create offer\n   * @returns {RTCPeerConnection}\n   */\n  async createPeerConnection(remoteUserId, createOffer = false) {\n    if (this.peerConnections.has(remoteUserId)) {\n      return this.peerConnections.get(remoteUserId);\n    }\n\n    const pc = new RTCPeerConnection(this.rtcConfiguration);\n    this.peerConnections.set(remoteUserId, pc);\n\n    // Add local stream tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        pc.addTrack(track, this.localStream);\n      });\n    }\n\n    // Handle incoming tracks\n    pc.ontrack = (event) => {\n      console.log('Remote track received from:', remoteUserId);\n      const [stream] = event.streams;\n      this.remoteStreams.set(remoteUserId, stream);\n      if (this.callbacks.onRemoteStream) {\n        this.callbacks.onRemoteStream(remoteUserId, stream);\n      }\n    };\n\n    // Handle ICE candidates\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        this.sendMessage({\n          type: 'ice-candidate',\n          to: remoteUserId,\n          payload: {\n            candidate: event.candidate,\n          },\n        });\n      }\n    };\n\n    // Handle connection state changes\n    pc.onconnectionstatechange = () => {\n      console.log(`Connection state with ${remoteUserId}:`, pc.connectionState);\n    };\n\n    // Create offer if needed\n    if (createOffer) {\n      try {\n        const offer = await pc.createOffer();\n        await pc.setLocalDescription(offer);\n        this.sendMessage({\n          type: 'offer',\n          to: remoteUserId,\n          payload: { sdp: offer },\n        });\n      } catch (error) {\n        console.error('Failed to create offer:', error);\n        this.handleError('Failed to create offer', error);\n      }\n    }\n\n    return pc;\n  }\n\n  /**\n   * Handle offer\n   * @param {string} from - Sender user ID\n   * @param {Object} payload - Offer payload\n   */\n  async handleOffer(from, payload) {\n    try {\n      const pc = await this.createPeerConnection(from);\n      await pc.setRemoteDescription(new RTCSessionDescription(payload.sdp));\n      \n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n      \n      this.sendMessage({\n        type: 'answer',\n        to: from,\n        payload: { sdp: answer },\n      });\n    } catch (error) {\n      console.error('Failed to handle offer:', error);\n      this.handleError('Failed to handle offer', error);\n    }\n  }\n\n  /**\n   * Handle answer\n   * @param {string} from - Sender user ID\n   * @param {Object} payload - Answer payload\n   */\n  async handleAnswer(from, payload) {\n    try {\n      const pc = this.peerConnections.get(from);\n      if (pc) {\n        await pc.setRemoteDescription(new RTCSessionDescription(payload.sdp));\n      }\n    } catch (error) {\n      console.error('Failed to handle answer:', error);\n      this.handleError('Failed to handle answer', error);\n    }\n  }\n\n  /**\n   * Handle ICE candidate\n   * @param {string} from - Sender user ID\n   * @param {Object} payload - ICE candidate payload\n   */\n  async handleIceCandidate(from, payload) {\n    try {\n      const pc = this.peerConnections.get(from);\n      if (pc) {\n        await pc.addIceCandidate(new RTCIceCandidate(payload.candidate));\n      }\n    } catch (error) {\n      console.error('Failed to handle ICE candidate:', error);\n      this.handleError('Failed to handle ICE candidate', error);\n    }\n  }\n\n  /**\n   * Send message via WebSocket\n   * @param {Object} message - Message to send\n   */\n  sendMessage(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket not connected');\n    }\n  }\n\n  /**\n   * Send chat message\n   * @param {string} text - Message text\n   */\n  sendChatMessage(text) {\n    this.sendMessage({\n      type: 'chat-message',\n      payload: {\n        userId: this.userId,\n        userName: this.userName,\n        text,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  }\n\n  /**\n   * Toggle audio\n   * @param {boolean} enabled - Whether audio should be enabled\n   */\n  toggleAudio(enabled) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        track.enabled = enabled;\n      });\n    }\n  }\n\n  /**\n   * Toggle video\n   * @param {boolean} enabled - Whether video should be enabled\n   */\n  toggleVideo(enabled) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        track.enabled = enabled;\n      });\n    }\n  }\n\n  /**\n   * Switch media device\n   * @param {string} kind - Device kind ('audioinput' or 'videoinput')\n   * @param {string} deviceId - Device ID\n   */\n  async switchDevice(kind, deviceId) {\n    try {\n      const constraints = {\n        audio: kind === 'audioinput' ? { deviceId } : this.localStream.getAudioTracks().length > 0,\n        video: kind === 'videoinput' ? { deviceId } : this.localStream.getVideoTracks().length > 0,\n      };\n\n      const newStream = await navigator.mediaDevices.getUserMedia(constraints);\n      \n      // Replace tracks in peer connections\n      const newTrack = kind === 'audioinput' \n        ? newStream.getAudioTracks()[0]\n        : newStream.getVideoTracks()[0];\n        \n      const oldTrack = kind === 'audioinput'\n        ? this.localStream.getAudioTracks()[0]\n        : this.localStream.getVideoTracks()[0];\n\n      this.peerConnections.forEach(pc => {\n        const sender = pc.getSenders().find(s => s.track === oldTrack);\n        if (sender) {\n          sender.replaceTrack(newTrack);\n        }\n      });\n\n      // Update local stream\n      this.localStream.removeTrack(oldTrack);\n      this.localStream.addTrack(newTrack);\n      oldTrack.stop();\n\n      if (this.callbacks.onLocalStream) {\n        this.callbacks.onLocalStream(this.localStream);\n      }\n    } catch (error) {\n      console.error('Failed to switch device:', error);\n      this.handleError('Failed to switch device', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disconnect from room\n   */\n  async disconnect() {\n    try {\n      if (this.roomId && this.userId) {\n        await webrtcAPI.leaveRoom(this.roomId, this.userId);\n      }\n    } catch (error) {\n      console.error('Failed to leave room:', error);\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup() {\n    // Close WebSocket\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n\n    // Close peer connections\n    this.peerConnections.forEach(pc => pc.close());\n    this.peerConnections.clear();\n\n    // Clear remote streams\n    this.remoteStreams.clear();\n\n    // Stop local stream\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => track.stop());\n      this.localStream = null;\n    }\n\n    this.isConnected = false;\n    this.roomId = null;\n    this.userId = null;\n    this.userName = null;\n  }\n\n  /**\n   * Handle error\n   * @param {string} message - Error message\n   * @param {Error} error - Error object\n   */\n  handleError(message, error) {\n    log.error(message, error, 'WEBRTC');\n    handleWebRTCError(error);\n    if (this.callbacks.onError) {\n      this.callbacks.onError(message, error);\n    }\n  }\n\n  /**\n   * Get connection statistics\n   * @returns {Promise<Object>} Connection statistics\n   */\n  async getConnectionStats() {\n    const stats = {\n      connectionState: this.isConnected ? 'connected' : 'disconnected',\n      participantCount: this.remoteStreams.size,\n      peerConnections: this.peerConnections.size,\n      localStream: !!this.localStream,\n      detailedStats: {}\n    };\n\n    // Get detailed stats for each peer connection\n    for (const [peerId, pc] of this.peerConnections) {\n      try {\n        const peerStats = await pc.getStats();\n        const statsObj = {};\n        \n        peerStats.forEach((report) => {\n          if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n            statsObj.rtt = report.currentRoundTripTime * 1000; // Convert to ms\n            statsObj.bytesReceived = report.bytesReceived;\n            statsObj.bytesSent = report.bytesSent;\n          } else if (report.type === 'inbound-rtp' && report.kind === 'audio') {\n            statsObj.audioPacketsReceived = report.packetsReceived;\n            statsObj.audioPacketsLost = report.packetsLost;\n          } else if (report.type === 'inbound-rtp' && report.kind === 'video') {\n            statsObj.videoPacketsReceived = report.packetsReceived;\n            statsObj.videoPacketsLost = report.packetsLost;\n            statsObj.framesReceived = report.framesReceived;\n          }\n        });\n        \n        stats.detailedStats[peerId] = statsObj;\n      } catch (error) {\n        log.warn(`통계 조회 실패: ${peerId}`, error, 'WEBRTC');\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * Create or join room\n   * @param {Object} options - Room options\n   * @returns {Promise<Object>} Room info\n   */\n  async createOrJoinRoom(options = {}) {\n    try {\n      let roomInfo;\n      \n      if (options.roomId) {\n        // Try to get existing room info\n        try {\n          roomInfo = await webrtcAPI.getRoomInfo(options.roomId);\n          log.info('기존 룸 정보 조회 성공', roomInfo, 'WEBRTC');\n        } catch (error) {\n          // Room doesn't exist, create it\n          roomInfo = await webrtcAPI.createRoom({\n            roomType: options.roomType || 'audio',\n            maxParticipants: options.maxParticipants || 4\n          });\n          log.info('새 룸 생성 완료', roomInfo, 'WEBRTC');\n        }\n      } else {\n        // Create new room\n        roomInfo = await webrtcAPI.createRoom({\n          roomType: options.roomType || 'audio',\n          maxParticipants: options.maxParticipants || 4\n        });\n        log.info('새 룸 생성 완료', roomInfo, 'WEBRTC');\n      }\n\n      return roomInfo;\n    } catch (error) {\n      log.error('룸 생성/입장 실패', error, 'WEBRTC');\n      throw error;\n    }\n  }\n\n  /**\n   * Start recording\n   * @param {Object} options - Recording options\n   * @returns {Promise<void>}\n   */\n  async startRecording(options = {}) {\n    try {\n      if (!this.localStream) {\n        throw new Error('Local stream not available for recording');\n      }\n\n      // Create MediaRecorder with the local stream\n      const mediaRecorder = new MediaRecorder(this.localStream, {\n        mimeType: options.mimeType || 'audio/webm;codecs=opus'\n      });\n\n      const chunks = [];\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = async () => {\n        try {\n          const blob = new Blob(chunks, { type: mediaRecorder.mimeType });\n          const filename = options.filename || `recording-${Date.now()}.webm`;\n          \n          // Upload recording if room and user info available\n          if (this.roomId && this.userId) {\n            await webrtcAPI.uploadRecording(\n              this.roomId,\n              this.userId,\n              blob,\n              filename,\n              options.duration || 0\n            );\n            log.info('녹음 파일 업로드 완료', { filename, size: blob.size }, 'WEBRTC');\n          }\n\n          if (options.onRecordingComplete) {\n            options.onRecordingComplete(blob, filename);\n          }\n        } catch (error) {\n          log.error('녹음 처리 실패', error, 'WEBRTC');\n          if (options.onError) {\n            options.onError(error);\n          }\n        }\n      };\n\n      this.mediaRecorder = mediaRecorder;\n      mediaRecorder.start(options.timeslice || 1000); // Collect data every second\n      \n      log.info('녹음 시작', options, 'WEBRTC');\n      \n    } catch (error) {\n      log.error('녹음 시작 실패', error, 'WEBRTC');\n      throw error;\n    }\n  }\n\n  /**\n   * Stop recording\n   * @returns {Promise<void>}\n   */\n  async stopRecording() {\n    try {\n      if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {\n        this.mediaRecorder.stop();\n        log.info('녹음 중지', null, 'WEBRTC');\n      }\n    } catch (error) {\n      log.error('녹음 중지 실패', error, 'WEBRTC');\n      throw error;\n    }\n  }\n\n  /**\n   * Start connection monitoring\n   */\n  startConnectionMonitoring() {\n    if (this.connectionCheckInterval) {\n      clearInterval(this.connectionCheckInterval);\n    }\n\n    this.connectionCheckInterval = setInterval(async () => {\n      try {\n        await this.checkConnectionHealth();\n      } catch (error) {\n        log.error('연결 상태 모니터링 실패', error, 'WEBRTC');\n      }\n    }, 5000); // Check every 5 seconds\n\n    log.info('WebRTC 연결 모니터링 시작', null, 'WEBRTC');\n  }\n\n  /**\n   * Stop connection monitoring\n   */\n  stopConnectionMonitoring() {\n    if (this.connectionCheckInterval) {\n      clearInterval(this.connectionCheckInterval);\n      this.connectionCheckInterval = null;\n    }\n\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    log.info('WebRTC 연결 모니터링 중지', null, 'WEBRTC');\n  }\n\n  /**\n   * Check connection health and trigger recovery if needed\n   */\n  async checkConnectionHealth() {\n    const now = Date.now();\n    this.lastConnectionCheck = now;\n\n    if (!this.isConnected || this.peerConnections.size === 0) {\n      return;\n    }\n\n    let unhealthyConnections = 0;\n    let totalConnections = 0;\n\n    for (const [peerId, pc] of this.peerConnections) {\n      totalConnections++;\n      const connectionState = pc.connectionState;\n      const iceConnectionState = pc.iceConnectionState;\n\n      log.debug(`연결 상태 확인: ${peerId}`, {\n        connectionState,\n        iceConnectionState\n      }, 'WEBRTC');\n\n      // Check for unhealthy connection states\n      if (\n        connectionState === 'failed' ||\n        connectionState === 'disconnected' ||\n        iceConnectionState === 'failed' ||\n        iceConnectionState === 'disconnected'\n      ) {\n        unhealthyConnections++;\n        log.warn(`비정상 연결 감지: ${peerId}`, {\n          connectionState,\n          iceConnectionState\n        }, 'WEBRTC');\n\n        // Try to recover this specific connection\n        this.recoverPeerConnection(peerId);\n      }\n    }\n\n    // Update connection quality\n    const healthRatio = totalConnections > 0 ? \n      (totalConnections - unhealthyConnections) / totalConnections : 0;\n    \n    if (healthRatio >= 0.8) {\n      this.connectionQuality = 'good';\n    } else if (healthRatio >= 0.5) {\n      this.connectionQuality = 'fair';\n    } else {\n      this.connectionQuality = 'poor';\n      log.warn('연결 품질 저하 감지', { \n        healthyConnections: totalConnections - unhealthyConnections,\n        totalConnections \n      }, 'WEBRTC');\n    }\n\n    // Trigger full reconnection if too many connections are unhealthy\n    if (unhealthyConnections > totalConnections * 0.5 && totalConnections > 0) {\n      log.error('다수 연결 실패 감지, 전체 재연결 시도', {\n        unhealthyConnections,\n        totalConnections\n      }, 'WEBRTC');\n      this.attemptReconnection();\n    }\n  }\n\n  /**\n   * Attempt to recover a specific peer connection\n   * @param {string} peerId - Peer ID to recover\n   */\n  async recoverPeerConnection(peerId) {\n    try {\n      log.info(`피어 연결 복구 시도: ${peerId}`, null, 'WEBRTC');\n\n      const pc = this.peerConnections.get(peerId);\n      if (!pc) {\n        log.warn(`피어 연결을 찾을 수 없음: ${peerId}`, null, 'WEBRTC');\n        return;\n      }\n\n      // Close the problematic connection\n      pc.close();\n      this.peerConnections.delete(peerId);\n\n      // Remove the remote stream\n      const stream = this.remoteStreams.get(peerId);\n      if (stream) {\n        this.remoteStreams.delete(peerId);\n        if (this.callbacks.onRemoteStreamRemoved) {\n          this.callbacks.onRemoteStreamRemoved(peerId, stream);\n        }\n      }\n\n      // Wait a bit before recreating\n      setTimeout(() => {\n        if (this.isConnected) {\n          this.createPeerConnection(peerId, true);\n        }\n      }, 1000);\n\n    } catch (error) {\n      log.error(`피어 연결 복구 실패: ${peerId}`, error, 'WEBRTC');\n    }\n  }\n\n  /**\n   * Attempt full reconnection\n   */\n  async attemptReconnection() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      log.error('최대 재연결 시도 횟수 초과', {\n        attempts: this.reconnectAttempts,\n        maxAttempts: this.maxReconnectAttempts\n      }, 'WEBRTC');\n      \n      if (this.callbacks.onError) {\n        this.callbacks.onError('Connection failed after multiple attempts', \n          new AppError('연결 실패', ERROR_TYPES.WEBRTC));\n      }\n      return;\n    }\n\n    this.reconnectAttempts++;\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n\n    log.info(`전체 재연결 시도 ${this.reconnectAttempts}/${this.maxReconnectAttempts}`, {\n      delay\n    }, 'WEBRTC');\n\n    if (this.callbacks.onConnectionStateChange) {\n      this.callbacks.onConnectionStateChange('reconnecting');\n    }\n\n    // Clean up current connections\n    this.peerConnections.forEach(pc => pc.close());\n    this.peerConnections.clear();\n    this.remoteStreams.clear();\n\n    // Attempt reconnection after delay\n    this.reconnectTimeout = setTimeout(async () => {\n      try {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          // Request participants list again\n          this.sendMessage({ type: 'get-participants' });\n          \n          if (this.callbacks.onConnectionStateChange) {\n            this.callbacks.onConnectionStateChange('connected');\n          }\n          \n          this.reconnectAttempts = 0; // Reset on successful reconnection\n          log.info('재연결 성공', null, 'WEBRTC');\n        } else {\n          // WebSocket is also disconnected, need full reconnection\n          throw new Error('WebSocket connection lost');\n        }\n      } catch (error) {\n        log.error(`재연결 실패 시도 ${this.reconnectAttempts}`, error, 'WEBRTC');\n        // Retry again\n        setTimeout(() => this.attemptReconnection(), 2000);\n      }\n    }, delay);\n  }\n\n  /**\n   * Enhanced connect method with retry logic\n   */\n  async connectWithRetry(roomId, userInfo, options = {}) {\n    return withRetry(\n      () => this.connect(roomId, userInfo, options),\n      options.maxRetries || 3,\n      options.retryDelay || 2000\n    );\n  }\n\n  /**\n   * Set callback\n   * @param {string} name - Callback name\n   * @param {Function} callback - Callback function\n   */\n  on(name, callback) {\n    if (Object.prototype.hasOwnProperty.call(this.callbacks, name)) {\n      this.callbacks[name] = callback;\n    }\n  }\n\n  /**\n   * Remove callback\n   * @param {string} name - Callback name\n   */\n  off(name) {\n    if (Object.prototype.hasOwnProperty.call(this.callbacks, name)) {\n      this.callbacks[name] = null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const webrtcManager = new WebRTCConnectionManager();\n\n// Export class for testing\nexport default WebRTCConnectionManager;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/services/websocketService.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'subscriptionId' is defined but never used.","line":235,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":235,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"subscriptionId"},"fix":{"range":[6704,6720],"text":""},"desc":"Remove unused variable 'subscriptionId'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import SockJS from \"sockjs-client\";\nimport { Client } from \"@stomp/stompjs\";\n\nclass WebSocketService {\n  constructor() {\n    this.client = null;\n    this.isConnecting = false;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // 시작 지연 시간 (밀리초)\n    this.maxReconnectDelay = 30000; // 최대 지연 시간\n    this.subscriptions = new Map();\n    this.messageQueue = [];\n    this.connectionListeners = new Set();\n    this.errorListeners = new Set();\n  }\n\n  /**\n   * WebSocket 연결 설정\n   * @param {Object} options - 연결 옵션\n   * @param {string} options.endpoint - WebSocket 엔드포인트\n   * @param {Object} options.headers - 연결 헤더\n   * @param {boolean} options.debug - 디버그 모드\n   */\n  connect(options = {}) {\n    if (this.isConnecting || this.isConnected) {\n      console.log(\"WebSocket is already connecting or connected\");\n      return Promise.resolve();\n    }\n\n    const {\n      endpoint = \"/ws/chat\",\n      headers = {},\n      debug = false\n    } = options;\n\n    this.isConnecting = true;\n    \n    const token = localStorage.getItem(\"accessToken\");\n    const baseUrl = import.meta.env.VITE_WS_URL || \"https://api.languagemate.kr\";\n    const socketUrl = `${baseUrl}${endpoint}`;\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.client = new Client({\n          webSocketFactory: () => new SockJS(socketUrl),\n          connectHeaders: {\n            Authorization: `Bearer ${token}`,\n            ...headers\n          },\n          debug: debug ? (str) => console.log(\"STOMP Debug:\", str) : undefined,\n          \n          onConnect: (frame) => {\n            console.log(\"WebSocket Connected:\", frame);\n            this.isConnecting = false;\n            this.isConnected = true;\n            this.reconnectAttempts = 0;\n            \n            // 대기 중인 메시지 전송\n            this.flushMessageQueue();\n            \n            // 기존 구독 재설정\n            this.reestablishSubscriptions();\n            \n            // 연결 리스너 호출\n            this.connectionListeners.forEach(listener => {\n              try {\n                listener('connected', frame);\n              } catch (error) {\n                console.error(\"Connection listener error:\", error);\n              }\n            });\n            \n            resolve();\n          },\n          \n          onStompError: (frame) => {\n            console.error(\"STOMP Error:\", frame);\n            this.isConnecting = false;\n            this.isConnected = false;\n            \n            // 에러 리스너 호출\n            this.errorListeners.forEach(listener => {\n              try {\n                listener('stomp_error', frame);\n              } catch (error) {\n                console.error(\"Error listener error:\", error);\n              }\n            });\n            \n            this.handleReconnection();\n            reject(new Error(`STOMP Error: ${frame.headers.message}`));\n          },\n          \n          onWebSocketClose: (event) => {\n            console.log(\"WebSocket Closed:\", event);\n            this.isConnecting = false;\n            this.isConnected = false;\n            \n            // 연결 리스너 호출\n            this.connectionListeners.forEach(listener => {\n              try {\n                listener('disconnected', event);\n              } catch (error) {\n                console.error(\"Connection listener error:\", error);\n              }\n            });\n            \n            // 정상 종료가 아닌 경우 재연결 시도\n            if (!event.wasClean) {\n              this.handleReconnection();\n            }\n          },\n          \n          onWebSocketError: (error) => {\n            console.error(\"WebSocket Error:\", error);\n            this.isConnecting = false;\n            this.isConnected = false;\n            \n            // 에러 리스너 호출\n            this.errorListeners.forEach(listener => {\n              try {\n                listener('websocket_error', error);\n              } catch (error) {\n                console.error(\"Error listener error:\", error);\n              }\n            });\n            \n            this.handleReconnection();\n            reject(error);\n          }\n        });\n\n        this.client.activate();\n      } catch (error) {\n        this.isConnecting = false;\n        this.isConnected = false;\n        console.error(\"Failed to create WebSocket client:\", error);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * 재연결 처리\n   */\n  handleReconnection() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error(\"Max reconnection attempts reached\");\n      return;\n    }\n\n    this.reconnectAttempts++;\n    const delay = Math.min(\n      this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1),\n      this.maxReconnectDelay\n    );\n\n    console.log(\n      `Reconnecting... Attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${delay}ms`\n    );\n\n    setTimeout(() => {\n      if (!this.isConnected && !this.isConnecting) {\n        this.connect().catch(error => {\n          console.error(\"Reconnection failed:\", error);\n        });\n      }\n    }, delay);\n  }\n\n  /**\n   * 구독 추가\n   * @param {string} destination - 구독할 목적지\n   * @param {Function} callback - 메시지 콜백\n   * @param {Object} headers - 구독 헤더\n   * @returns {string} 구독 ID\n   */\n  subscribe(destination, callback, headers = {}) {\n    const subscriptionId = `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const subscriptionInfo = {\n      destination,\n      callback,\n      headers,\n      subscription: null\n    };\n\n    this.subscriptions.set(subscriptionId, subscriptionInfo);\n\n    if (this.isConnected && this.client) {\n      try {\n        subscriptionInfo.subscription = this.client.subscribe(\n          destination,\n          (message) => {\n            try {\n              const parsedMessage = JSON.parse(message.body);\n              callback(parsedMessage, message);\n            } catch (error) {\n              console.error(\"Error parsing message:\", error);\n              callback(message.body, message);\n            }\n          },\n          headers\n        );\n      } catch (error) {\n        console.error(\"Failed to subscribe:\", error);\n      }\n    }\n\n    return subscriptionId;\n  }\n\n  /**\n   * 구독 해제\n   * @param {string} subscriptionId - 구독 ID\n   */\n  unsubscribe(subscriptionId) {\n    const subscriptionInfo = this.subscriptions.get(subscriptionId);\n    if (subscriptionInfo && subscriptionInfo.subscription) {\n      try {\n        subscriptionInfo.subscription.unsubscribe();\n      } catch (error) {\n        console.error(\"Failed to unsubscribe:\", error);\n      }\n    }\n    this.subscriptions.delete(subscriptionId);\n  }\n\n  /**\n   * 기존 구독 재설정 (재연결 시 사용)\n   */\n  reestablishSubscriptions() {\n    this.subscriptions.forEach((subscriptionInfo, subscriptionId) => {\n      if (!subscriptionInfo.subscription && this.client) {\n        try {\n          subscriptionInfo.subscription = this.client.subscribe(\n            subscriptionInfo.destination,\n            (message) => {\n              try {\n                const parsedMessage = JSON.parse(message.body);\n                subscriptionInfo.callback(parsedMessage, message);\n              } catch (error) {\n                console.error(\"Error parsing message:\", error);\n                subscriptionInfo.callback(message.body, message);\n              }\n            },\n            subscriptionInfo.headers\n          );\n        } catch (error) {\n          console.error(\"Failed to reestablish subscription:\", error);\n        }\n      }\n    });\n  }\n\n  /**\n   * 메시지 전송\n   * @param {string} destination - 전송 목적지\n   * @param {Object} message - 전송할 메시지\n   * @param {Object} headers - 전송 헤더\n   */\n  send(destination, message, headers = {}) {\n    if (this.isConnected && this.client) {\n      try {\n        this.client.publish({\n          destination,\n          body: JSON.stringify(message),\n          headers\n        });\n      } catch (error) {\n        console.error(\"Failed to send message:\", error);\n        // 연결이 끊어진 경우 큐에 추가\n        this.messageQueue.push({ destination, message, headers });\n      }\n    } else {\n      // 연결되지 않은 경우 메시지 큐에 추가\n      this.messageQueue.push({ destination, message, headers });\n      \n      // 연결되지 않은 경우 연결 시도\n      if (!this.isConnecting) {\n        this.connect().catch(error => {\n          console.error(\"Failed to connect for message sending:\", error);\n        });\n      }\n    }\n  }\n\n  /**\n   * 대기 중인 메시지 전송\n   */\n  flushMessageQueue() {\n    while (this.messageQueue.length > 0 && this.isConnected) {\n      const { destination, message, headers } = this.messageQueue.shift();\n      this.send(destination, message, headers);\n    }\n  }\n\n  /**\n   * 연결 상태 리스너 추가\n   * @param {Function} listener - 연결 상태 콜백 (status, data)\n   */\n  addConnectionListener(listener) {\n    this.connectionListeners.add(listener);\n  }\n\n  /**\n   * 연결 상태 리스너 제거\n   * @param {Function} listener - 제거할 리스너\n   */\n  removeConnectionListener(listener) {\n    this.connectionListeners.delete(listener);\n  }\n\n  /**\n   * 에러 리스너 추가\n   * @param {Function} listener - 에러 콜백 (type, error)\n   */\n  addErrorListener(listener) {\n    this.errorListeners.add(listener);\n  }\n\n  /**\n   * 에러 리스너 제거\n   * @param {Function} listener - 제거할 리스너\n   */\n  removeErrorListener(listener) {\n    this.errorListeners.delete(listener);\n  }\n\n  /**\n   * WebSocket 연결 해제\n   */\n  disconnect() {\n    if (this.client) {\n      try {\n        // 모든 구독 해제\n        this.subscriptions.forEach((subscriptionInfo) => {\n          if (subscriptionInfo.subscription) {\n            subscriptionInfo.subscription.unsubscribe();\n          }\n        });\n        this.subscriptions.clear();\n        \n        // 클라이언트 비활성화\n        this.client.deactivate();\n      } catch (error) {\n        console.error(\"Error during disconnect:\", error);\n      }\n    }\n    \n    this.client = null;\n    this.isConnecting = false;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.messageQueue = [];\n    this.connectionListeners.clear();\n    this.errorListeners.clear();\n  }\n\n  /**\n   * 연결 상태 확인\n   * @returns {boolean} 연결 상태\n   */\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      isConnecting: this.isConnecting,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n}\n\n// 싱글톤 인스턴스\nconst websocketService = new WebSocketService();\n\nexport default websocketService;","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/shims/es-toolkit-compat-get.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/shims/react-is.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/achievementStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/langInfoStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/levelTestStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/matchingStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/motivationStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/notificationStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/partnerStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/profileStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/sessionStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/store/themeStore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/Login.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/components/AchievementBadges.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/components/SessionScheduleList.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/components/WeeklyActivityChart.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/pages/ObInt4.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/pages/Schedule.render.test.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/utils.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/tests/unit/utils/onboardingTransform.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/accessibility.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/analytics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/connectionQualityMonitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/errorHandler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/imageOptimizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/imageUtils.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'alt' is defined but never used.","line":36,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"alt"},"fix":{"range":[878,883],"text":""},"desc":"Remove unused variable 'alt'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 이미지 최적화 유틸리티 함수들\n\n// 프로필 이미지 기본값\nexport const DEFAULT_PROFILE_IMAGE = '/assets/basicProfilePic.png';\n\n// WebP 지원 체크\nexport const supportsWebP = () => {\n  if (typeof window === 'undefined') return false;\n  \n  const canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  \n  return canvas.toDataURL('image/webp').indexOf('image/webp') === 0;\n};\n\n// 이미지 URL 최적화\nexport const getOptimizedImageUrl = (url, options = {}) => {\n  if (!url || !url.startsWith('http')) return url;\n  \n  const { width, height, quality = 85, format = 'auto' } = options;\n  \n  // Cloudflare Images 변환 API 사용\n  const params = new URLSearchParams({\n    url,\n    ...(width && { w: width }),\n    ...(height && { h: height }),\n    q: quality,\n    f: format\n  });\n  \n  return `/api/images/transform?${params}`;\n};\n\n// 반응형 이미지 소스 생성\nexport const generateResponsiveSources = (baseUrl, alt) => {\n  const sizes = [\n    { width: 320, media: '(max-width: 640px)' },\n    { width: 640, media: '(max-width: 768px)' },\n    { width: 768, media: '(max-width: 1024px)' },\n    { width: 1024, media: '(max-width: 1280px)' },\n    { width: 1280, media: '(min-width: 1281px)' }\n  ];\n  \n  return sizes.map(({ width, media }) => ({\n    srcSet: getOptimizedImageUrl(baseUrl, { width }),\n    media,\n    type: 'image/webp'\n  }));\n};\n\n// 블러 데이터 URL 생성 (작은 미리보기 이미지)\nexport const generateBlurDataURL = async (imageUrl) => {\n  try {\n    const response = await fetch(getOptimizedImageUrl(imageUrl, { \n      width: 40, \n      quality: 20 \n    }));\n    const blob = await response.blob();\n    \n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.error('Error generating blur data URL:', error);\n    return null;\n  }\n};\n\n// 이미지 프리로드\nexport const preloadImage = (src) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = resolve;\n    img.onerror = reject;\n    img.src = src;\n  });\n};\n\n// 여러 이미지 프리로드\nexport const preloadImages = (srcArray) => {\n  return Promise.all(srcArray.map(src => preloadImage(src)));\n};","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/lazyImports.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'text' is defined but never used.","line":139,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"text"},"fix":{"range":[3589,3593],"text":""},"desc":"Remove unused variable 'text'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { lazy } from 'react';\n\n/**\n * 지연 로딩 컴포넌트 래퍼\n * @param {Function} importFn - dynamic import 함수\n * @param {Object} options - 옵션\n * @param {number} options.delay - 최소 로딩 지연 시간 (ms)\n * @param {Function} options.fallback - 에러 발생시 폴백 컴포넌트\n */\nexport const createLazyComponent = (importFn, { delay = 0, fallback = null } = {}) => {\n  const LazyComponent = lazy(() => {\n    return Promise.all([\n      importFn(),\n      // 최소 지연 시간 보장 (로딩 스피너가 너무 빨리 사라지는 것 방지)\n      delay > 0 ? new Promise(resolve => setTimeout(resolve, delay)) : Promise.resolve()\n    ]).then(([moduleExports]) => moduleExports);\n  });\n\n  // 에러 경계가 있는 경우 폴백 컴포넌트 적용\n  if (fallback) {\n    LazyComponent.fallback = fallback;\n  }\n\n  return LazyComponent;\n};\n\n/**\n * 페이지 컴포넌트들의 지연 로딩\n */\n// 메인 페이지들\nexport const LazyMainPage = createLazyComponent(\n  () => import('../pages/Main'), \n  { delay: 200 }\n);\n\nexport const LazyLoginPage = createLazyComponent(\n  () => import('../pages/Login/Login')\n);\n\nexport const LazyChatPage = createLazyComponent(\n  () => import('../pages/Chat/ChatPage'),\n  { delay: 100 }\n);\n\nexport const LazyProfilePage = createLazyComponent(\n  () => import('../pages/Profile/ProfilePage')\n);\n\nexport const LazyAnalyticsPage = createLazyComponent(\n  () => import('../pages/Analytics/AnalyticsPage'),\n  { delay: 150 }\n);\n\nexport const LazyNotificationCenter = createLazyComponent(\n  () => import('../pages/Notifications/NotificationCenter')\n);\n\n// 온보딩 관련 페이지들\nexport const LazyOnboardingPage = createLazyComponent(\n  () => import('../pages/Onboarding/OnboardingPage')\n);\n\nexport const LazyAgreementPage = createLazyComponent(\n  () => import('../pages/Agreement/AgreementPage')\n);\n\nexport const LazySignupCompletePage = createLazyComponent(\n  () => import('../pages/SignupComplete/SignupCompletePage')\n);\n\n// 기능별 컴포넌트들\nexport const LazyMatchingPage = createLazyComponent(\n  () => import('../pages/Matching/MatchingPage')\n);\n\nexport const LazyAchievementPage = createLazyComponent(\n  () => import('../pages/Achievement/AchievementPage')\n);\n\nexport const LazyGroupSessionPage = createLazyComponent(\n  () => import('../pages/GroupSession/GroupSessionPage')\n);\n\n/**\n * 큰 컴포넌트들의 지연 로딩\n */\nexport const LazyWebRTCComponent = createLazyComponent(\n  () => import('../components/webrtc/WebRTCComponent'),\n  { delay: 200 }\n);\n\nexport const LazyRealtimeSubtitles = createLazyComponent(\n  () => import('../components/RealtimeSubtitles')\n);\n\nexport const LazyAnalyticsCharts = createLazyComponent(\n  () => import('../components/analytics/AnalyticsCharts'),\n  { delay: 300 }\n);\n\nexport const LazyChatSidebar = createLazyComponent(\n  () => import('../components/chat/Sidebar')\n);\n\n/**\n * 유틸리티 라이브러리들의 지연 로딩\n */\nexport const loadEmojiPicker = () => \n  import('emoji-picker-react').then(module => module.default);\n\nexport const loadChartLibrary = () =>\n  import('recharts').then(module => ({\n    LineChart: module.LineChart,\n    BarChart: module.BarChart,\n    PieChart: module.PieChart,\n    XAxis: module.XAxis,\n    YAxis: module.YAxis,\n    CartesianGrid: module.CartesianGrid,\n    Tooltip: module.Tooltip,\n    Legend: module.Legend,\n    ResponsiveContainer: module.ResponsiveContainer\n  }));\n\nexport const loadDateLibrary = () =>\n  import('date-fns').then(module => ({\n    format: module.format,\n    formatDistance: module.formatDistance,\n    isToday: module.isToday,\n    isYesterday: module.isYesterday,\n    parseISO: module.parseISO\n  }));\n\n/**\n * 기능별 청크 분리\n */\nexport const loadTranslationModule = () =>\n  import('../modules/translation').catch(() => ({\n    translate: (text) => Promise.resolve(text),\n    detectLanguage: (text) => Promise.resolve('en')\n  }));\n\nexport const loadAudioModule = () =>\n  import('../modules/audio').catch(() => ({\n    startRecording: () => Promise.reject('Audio module not available'),\n    stopRecording: () => Promise.reject('Audio module not available')\n  }));\n\nexport const loadVideoModule = () =>\n  import('../modules/video').catch(() => ({\n    startVideo: () => Promise.reject('Video module not available'),\n    stopVideo: () => Promise.reject('Video module not available')\n  }));\n\n/**\n * 조건부 로딩을 위한 헬퍼 함수들\n */\nexport const loadComponentIf = (condition, importFn) => {\n  if (!condition) {\n    return Promise.resolve({ default: () => null });\n  }\n  return importFn();\n};\n\nexport const loadModuleOnUserAction = (importFn) => {\n  let modulePromise = null;\n  \n  return () => {\n    if (!modulePromise) {\n      modulePromise = importFn();\n    }\n    return modulePromise;\n  };\n};\n\n/**\n * 프리로딩을 위한 함수들\n */\nexport const preloadCriticalPages = () => {\n  // 중요한 페이지들을 미리 로드\n  const criticalPages = [\n    () => import('../pages/Main'),\n    () => import('../pages/Chat/ChatPage'),\n    () => import('../pages/Profile/ProfilePage')\n  ];\n\n  return Promise.allSettled(criticalPages.map(importFn => importFn()));\n};\n\nexport const preloadOnIdle = (importFn) => {\n  if ('requestIdleCallback' in window) {\n    requestIdleCallback(() => {\n      importFn().catch(() => {\n        // 프리로딩 실패는 무시\n      });\n    });\n  } else {\n    // requestIdleCallback이 없는 브라우저에서는 setTimeout 사용\n    setTimeout(() => {\n      importFn().catch(() => {\n        // 프리로딩 실패는 무시\n      });\n    }, 2000);\n  }\n};\n\n/**\n * 번들 분석을 위한 메타데이터\n */\nexport const chunkMetadata = {\n  pages: {\n    main: { size: 'large', priority: 'high' },\n    chat: { size: 'large', priority: 'high' },\n    profile: { size: 'medium', priority: 'medium' },\n    analytics: { size: 'large', priority: 'low' },\n    onboarding: { size: 'small', priority: 'medium' }\n  },\n  components: {\n    webrtc: { size: 'large', priority: 'low' },\n    charts: { size: 'large', priority: 'low' },\n    subtitles: { size: 'medium', priority: 'low' }\n  },\n  libraries: {\n    emoji: { size: 'medium', priority: 'low' },\n    charts: { size: 'large', priority: 'low' },\n    dates: { size: 'small', priority: 'medium' }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/lazyLoad.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/logger.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/mobileOptimizations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/onboardingStatus.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/onboardingTransform.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/performance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/serviceWorker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/storeHelpers.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":48,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[1307,1314],"text":""},"desc":"Remove unused variable 'error'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Store용 공통 헬퍼 함수들\nimport { log } from './logger';\nimport { toast } from '../components/toast-manager.js';\n\n/**\n * API 호출을 위한 공통 래퍼 함수\n * @param {Function} apiCall - 실행할 API 함수\n * @param {string} context - 에러 메시지에 포함될 컨텍스트 정보\n * @param {Object} options - 추가 옵션\n * @param {boolean} options.showToast - 에러 시 Toast 표시 여부 (기본: true)\n * @param {boolean} options.logError - 에러 로깅 여부 (기본: true)\n * @param {string} options.fallbackValue - 실패 시 반환할 기본값\n */\nexport const safeApiCall = async (apiCall, context = '', options = {}) => {\n  const {\n    showToast = true,\n    logError = true,\n    fallbackValue = null\n  } = options;\n\n  try {\n    log.debug(`API 호출 시작: ${context}`, null, 'STORE');\n    const result = await apiCall();\n    log.debug(`API 호출 성공: ${context}`, result, 'STORE');\n    return result;\n  } catch (error) {\n    if (logError) {\n      log.error(`API 호출 실패: ${context}`, error, 'STORE');\n    }\n\n    if (showToast && typeof window !== 'undefined') {\n      const errorMessage = getStoreErrorMessage(context, error);\n      toast.error('오류 발생', errorMessage);\n    }\n\n    if (fallbackValue !== null) {\n      log.info(`폴백 값 사용: ${context}`, fallbackValue, 'STORE');\n      return fallbackValue;\n    }\n\n    throw error;\n  }\n};\n\n/**\n * Store 에러에 대한 사용자 친화적 메시지 생성\n */\nexport const getStoreErrorMessage = (context, error) => {\n  const contextMessages = {\n    'language-info-load': '언어 설정을 불러오는 중 문제가 발생했습니다.',\n    'language-info-save': '언어 설정 저장에 실패했습니다.',\n    'partner-info-load': '파트너 설정을 불러오는 중 문제가 발생했습니다.',\n    'partner-info-save': '파트너 설정 저장에 실패했습니다.',\n    'motivation-info-load': '관심사 정보를 불러오는 중 문제가 발생했습니다.',\n    'motivation-info-save': '관심사 정보 저장에 실패했습니다.',\n    'profile-load': '프로필 정보를 불러오는 중 문제가 발생했습니다.',\n    'profile-save': '프로필 저장에 실패했습니다.',\n    'level-test-load': '레벨테스트 정보를 불러오는 중 문제가 발생했습니다.',\n    'level-test-submit': '레벨테스트 제출에 실패했습니다.',\n    'session-load': '세션 정보를 불러오는 중 문제가 발생했습니다.',\n    'matching-load': '매칭 정보를 불러오는 중 문제가 발생했습니다.',\n    'matching-action': '매칭 처리 중 문제가 발생했습니다.'\n  };\n\n  return contextMessages[context] || `${context} 처리 중 문제가 발생했습니다.`;\n};\n\n/**\n * Store 액션에 사용자 로깅 추가\n */\nexport const logUserAction = (action, data = null) => {\n  log.user(action, data);\n};\n\n/**\n * Store 상태 변경 시 로깅\n */\nexport const logStateChange = (storeName, stateName, oldValue, newValue) => {\n  log.debug(\n    `${storeName} 상태 변경: ${stateName}`,\n    { oldValue, newValue },\n    'STORE-STATE'\n  );\n};\n\n/**\n * 비동기 Store 액션을 위한 래퍼 (로딩 상태 포함)\n */\nexport const withLoading = (set) => {\n  return async (actionName, asyncAction) => {\n    try {\n      set({ loading: true, error: null });\n      log.debug(`${actionName} 시작`, null, 'STORE');\n      \n      const result = await asyncAction();\n      \n      log.debug(`${actionName} 완료`, result, 'STORE');\n      set({ loading: false });\n      \n      return result;\n    } catch (error) {\n      log.error(`${actionName} 실패`, error, 'STORE');\n      set({ loading: false, error: error.message });\n      throw error;\n    }\n  };\n};\n\n/**\n * Store 초기화를 위한 헬퍼\n */\nexport const createStoreInitializer = (storeName, initialData = {}) => {\n  return (set, get) => ({\n    // 공통 상태\n    loading: false,\n    error: null,\n    \n    // 초기 데이터\n    ...initialData,\n\n    // 공통 액션들\n    setLoading: (loading) => {\n      logStateChange(storeName, 'loading', get().loading, loading);\n      set({ loading });\n    },\n\n    setError: (error) => {\n      logStateChange(storeName, 'error', get().error, error);\n      set({ error });\n    },\n\n    clearError: () => {\n      set({ error: null });\n    },\n\n    // 상태 리셋\n    reset: () => {\n      log.info(`${storeName} 상태 리셋`, null, 'STORE');\n      set({ ...initialData, loading: false, error: null });\n    }\n  });\n};\n\nexport default {\n  safeApiCall,\n  getStoreErrorMessage,\n  logUserAction,\n  logStateChange,\n  withLoading,\n  createStoreInitializer\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/webVitals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/webrtcRecorder.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/src/utils/webrtcTest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/minhan/Desktop/public-repo/studymate/STYDYMATE-CLIENT/vitest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]