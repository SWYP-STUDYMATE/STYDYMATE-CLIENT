import{c as e,p as t}from"./utils-vendor-chunk-D6MFAdC1.js";const n="https://api.languagemate.kr";async function r(e,t){try{const r=new FormData;r.append("audio",e,`question_${t}.webm`),r.append("questionNumber",t.toString()),r.append("userId",localStorage.getItem("userId")||"guest");const o=await fetch(`${n}/api/level-test/submit`,{method:"POST",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`},body:r});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return await o.json()}catch(r){throw r}}async function o(e){try{const t=await fetch(`${n}/api/level-test/complete`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${localStorage.getItem("token")}`},body:JSON.stringify({userId:e})});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw t}}const i=e(t((e,t)=>({testStatus:"idle",currentQuestionIndex:0,totalQuestions:4,connectionStatus:{microphone:!1,internet:!1,audioLevel:0},timerSeconds:180,timeRemaining:180,isTimerRunning:!1,recordings:[],currentRecording:null,questions:[{id:1,text:"Introduce yourself. Tell me about your name, where you're from, and what you do.",korean:"자기소개를 해주세요. 이름, 출신지, 하는 일에 대해 말씀해주세요.",duration:60,difficulty:"A1-A2"},{id:2,text:"Describe your typical day. What do you usually do from morning to evening?",korean:"일상적인 하루를 설명해주세요. 아침부터 저녁까지 보통 무엇을 하나요?",duration:90,difficulty:"A2-B1"},{id:3,text:"Talk about a memorable experience you had recently. What happened and how did you feel?",korean:"최근에 있었던 기억에 남는 경험에 대해 이야기해주세요. 무슨 일이 있었고 어떻게 느꼈나요?",duration:120,difficulty:"B1-B2"},{id:4,text:"What are your thoughts on technology's impact on education? Discuss both positive and negative aspects.",korean:"기술이 교육에 미치는 영향에 대한 당신의 생각은 무엇인가요? 긍정적인 면과 부정적인 면을 모두 논의해주세요.",duration:180,difficulty:"B2-C1"}],isSubmitting:!1,submitError:null,loadQuestions:async()=>{},submitTest:async()=>{const i=t();if(i.recordings.length===i.totalQuestions){e({isSubmitting:!0,submitError:null});try{const t=i.recordings.map(e=>e.blob);let s={level:"B1",overallScore:65,scores:{}};for(let e=0;e<t.length;e++)await r(t[e],e+1);const u=localStorage.getItem("userId")||"guest";await o(u),s=await async function(e){try{const t=await fetch(`${n}/api/level-test/result/${e}`,{method:"GET",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`}});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw t}}(u);const a={level:s.level||"B1",overallScore:s.overallScore||65,scores:s.scores||{pronunciation:70,fluency:65,grammar:60,vocabulary:70,coherence:65,interaction:60},strengths:s.strengths||["Good pronunciation and intonation","Natural speaking pace","Clear communication"],improvements:s.improvements||["Expand vocabulary range","Use more complex grammar structures","Improve coherence in longer responses"],feedback:s.feedback||"Good overall performance. Continue practicing to improve fluency and expand vocabulary.",date:(new Date).toISOString()};return e({testResult:a,testStatus:"completed",isSubmitting:!1}),a}catch(s){throw e({submitError:s.message||"Failed to submit test. Please try again.",isSubmitting:!1}),s}}else e({submitError:"Please complete all questions before submitting."})},getCurrentQuestion:()=>{const e=t();return e.questions[e.currentQuestionIndex]},getProgress:()=>{const e=t();return(e.currentQuestionIndex+1)/e.totalQuestions*100},isFirstQuestion:()=>0===t().currentQuestionIndex,isLastQuestion:()=>{const e=t();return e.currentQuestionIndex===e.totalQuestions-1},hasCompletedAllQuestions:()=>{const e=t();return e.recordings.length===e.totalQuestions},testResult:null,setTestStatus:t=>e({testStatus:t}),setConnectionStatus:t=>e(e=>({connectionStatus:{...e.connectionStatus,...t}})),setAudioLevel:t=>e(e=>({connectionStatus:{...e.connectionStatus,audioLevel:t}})),startTimer:()=>e({isTimerRunning:!0}),stopTimer:()=>e({isTimerRunning:!1}),decrementTimer:()=>e(e=>({timerSeconds:Math.max(0,e.timerSeconds-1),timeRemaining:Math.max(0,e.timeRemaining-1)})),resetTimer:()=>e({timerSeconds:180,timeRemaining:180,isTimerRunning:!1}),setTimerSeconds:t=>e({timerSeconds:t,timeRemaining:t}),nextQuestion:()=>e(e=>{const t=Math.min(e.totalQuestions-1,e.currentQuestionIndex+1),n=e.questions[t],r=n?.duration||180;return{currentQuestionIndex:t,timerSeconds:r,timeRemaining:r}}),previousQuestion:()=>e(e=>({currentQuestionIndex:Math.max(0,e.currentQuestionIndex-1)})),setCurrentQuestionIndex:t=>e({currentQuestionIndex:t}),addRecording:t=>e(e=>({recordings:[...e.recordings.filter(t=>t.questionIndex!==e.currentQuestionIndex),{...t,questionIndex:e.currentQuestionIndex,timestamp:(new Date).toISOString()}]})),setCurrentRecording:t=>e({currentRecording:t}),clearCurrentRecording:()=>e({currentRecording:null}),startRecording:t=>e(e=>({currentRecording:{blob:t,startTime:Date.now(),questionIndex:e.currentQuestionIndex}})),stopRecording:()=>e(e=>{if(e.currentRecording){const t=Math.floor((Date.now()-e.currentRecording.startTime)/1e3);return{recordings:[...e.recordings.filter(t=>t.questionIndex!==e.currentQuestionIndex),{...e.currentRecording,duration:t,timestamp:(new Date).toISOString()}],currentRecording:null}}return e}),updateRecordingDuration:t=>e(e=>e.currentRecording?{currentRecording:{...e.currentRecording,duration:t}}:e),getRecordingForQuestion:e=>t().recordings.find(t=>t.questionIndex===e),setTestResult:t=>e({testResult:{...t,date:(new Date).toISOString()}}),resetTest:()=>e(e=>{const t=e.questions[0],n=t?.duration||180;return{testStatus:"idle",currentQuestionIndex:0,connectionStatus:{microphone:!1,internet:!1,audioLevel:0},timerSeconds:n,timeRemaining:n,isTimerRunning:!1,recordings:[],currentRecording:null,testResult:null,isSubmitting:!1,submitError:null}}),isTestComplete:()=>{const e=t();return e.recordings.length===e.totalQuestions},isCurrentQuestionRecorded:()=>{const e=t();return e.recordings.some(t=>t.questionIndex===e.currentQuestionIndex)}}),{name:"level-test-storage",partialize:e=>({testResult:e.testResult,recordings:e.recordings.map(e=>({questionIndex:e.questionIndex,duration:e.duration,timestamp:e.timestamp}))})}));export{o as c,r as s,i as u};
